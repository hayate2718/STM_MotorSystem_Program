
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008224  08008224  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008224  08008224  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800822c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000204  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026f23  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be9  00000000  00000000  00046f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0004ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  0004bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209b5  00000000  00000000  0004cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169e9  00000000  00000000  0006d5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2cac  00000000  00000000  00083fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136c8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  00136ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081d4 	.word	0x080081d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080081d4 	.word	0x080081d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <_ZN3ADC9ADC_startEv>:
		this->ADC_sens_gain = ADC_sens_gain;
	}

};

inline void ADC::ADC_start(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	_cr->bit28 = 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000c2e:	78d3      	ldrb	r3, [r2, #3]
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	70d3      	strb	r3, [r2, #3]
	HAL_ADC_Start(_hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fa6d 	bl	800311c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(_hadc,1));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fb52 	bl	80032f4 <HAL_ADC_PollForConversion>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d000      	beq.n	8000c62 <_ZN3ADC9ADC_startEv+0x42>
 8000c60:	e7ef      	b.n	8000c42 <_ZN3ADC9ADC_startEv+0x22>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN3ADC8ADC_stopEv>:

inline void ADC::ADC_stop(){
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(_hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fb05 	bl	8003288 <HAL_ADC_Stop>
	_cr->bit1=1;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000c84:	7813      	ldrb	r3, [r2, #0]
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	7013      	strb	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>:
 *      Author: 0_hayate
 */

#include <ADC.hpp>

ADC::ADC(ADC_HandleTypeDef *_hadc, float ADC_supply_voltage) :
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	ed87 0a01 	vstr	s0, [r7, #4]
		current(0),
		ADC_supply_voltage(ADC_supply_voltage),
		ADC_sens_gain(0.33),
		configrable_const_num(0),
		_hadc(_hadc),
        before_current(0)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4a3f      	ldr	r2, [pc, #252]	; (8000dbc <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x128>)
 8000cbe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{
	_hadc->Init.Resolution = ADC_RESOLUTION_12B;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
	switch (_hadc->Init.Resolution) {
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	2b18      	cmp	r3, #24
 8000cea:	d84c      	bhi.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x60>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d59 	.word	0x08000d59
 8000cf8:	08000d87 	.word	0x08000d87
 8000cfc:	08000d87 	.word	0x08000d87
 8000d00:	08000d87 	.word	0x08000d87
 8000d04:	08000d87 	.word	0x08000d87
 8000d08:	08000d87 	.word	0x08000d87
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000d87 	.word	0x08000d87
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d87 	.word	0x08000d87
 8000d1c:	08000d87 	.word	0x08000d87
 8000d20:	08000d87 	.word	0x08000d87
 8000d24:	08000d87 	.word	0x08000d87
 8000d28:	08000d87 	.word	0x08000d87
 8000d2c:	08000d87 	.word	0x08000d87
 8000d30:	08000d87 	.word	0x08000d87
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d87 	.word	0x08000d87
 8000d3c:	08000d87 	.word	0x08000d87
 8000d40:	08000d87 	.word	0x08000d87
 8000d44:	08000d87 	.word	0x08000d87
 8000d48:	08000d87 	.word	0x08000d87
 8000d4c:	08000d87 	.word	0x08000d87
 8000d50:	08000d87 	.word	0x08000d87
 8000d54:	08000d7d 	.word	0x08000d7d
	case ADC_RESOLUTION_12B:
		ADC_resolution = 1<<12;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d62:	e010      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_10B:
		ADC_resolution = 1<<10;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d6e:	e00a      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_8B:
		ADC_resolution = 1<<8;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d76:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d7a:	e004      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_6B:
		ADC_resolution = 1<<6;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d84:	bf00      	nop
	}

	__IO uint32_t *_isr_buf = &_hadc->Instance->ISR;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	617b      	str	r3, [r7, #20]
	_isr = (use_register*) _isr_buf;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	__IO uint32_t *_cr_buf = &_hadc->Instance->CR;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3308      	adds	r3, #8
 8000d9a:	613b      	str	r3, [r7, #16]
	_cr = (use_register*) _cr_buf;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	calibration_current[100] = { 0 };
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	return;
}
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	3ea8f5c3 	.word	0x3ea8f5c3

08000dc0 <_ZN3ADC15ADC_calibrationEv>:

void ADC::ADC_calibration() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	configrable_const_num = ADC_supply_voltage / ADC_resolution / ADC_sens_gain;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ddc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8000de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	ADC_start();
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff15 	bl	8000c20 <_ZN3ADC9ADC_startEv>
	_isr->bit2 = 1; //EOCbitクリア
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 100; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b63      	cmp	r3, #99	; 0x63
 8000e0c:	dc17      	bgt.n	8000e3e <_ZN3ADC15ADC_calibrationEv+0x7e>
		while (!_isr->bit2); //EOCbitが再セットされるのをまつ
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d100      	bne.n	8000e22 <_ZN3ADC15ADC_calibrationEv+0x62>
 8000e20:	e7f5      	b.n	8000e0e <_ZN3ADC15ADC_calibrationEv+0x4e>
		calibration_current[i] = _hadc->Instance->DR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 100; i++) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e7e4      	b.n	8000e08 <_ZN3ADC15ADC_calibrationEv+0x48>
	}
	for (int j = 0; j < 100; j++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b63      	cmp	r3, #99	; 0x63
 8000e46:	dc0e      	bgt.n	8000e66 <_ZN3ADC15ADC_calibrationEv+0xa6>
		ofset_current += calibration_current[j];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000e56:	441a      	add	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for (int j = 0; j < 100; j++) {
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e7ed      	b.n	8000e42 <_ZN3ADC15ADC_calibrationEv+0x82>
	}
	ofset_current /= 100;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <_ZN3ADC15ADC_calibrationEv+0xe8>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	095a      	lsrs	r2, r3, #5
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ADC_stop();
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fef5 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
	before_current = ofset_current * configrable_const_num;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	51eb851f 	.word	0x51eb851f

08000eac <_ZN3ADC15ADC_get_currentEv>:

float ADC::ADC_get_current() { //電流センサ出力から現在の電流を計算して返す
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	_isr->bit2 = 1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000eba:	7813      	ldrb	r3, [r2, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	7013      	strb	r3, [r2, #0]
	while (!_isr->bit2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <_ZN3ADC15ADC_get_currentEv+0x2a>
 8000ed4:	e7f5      	b.n	8000ec2 <_ZN3ADC15ADC_get_currentEv+0x16>
	current = _hadc->Instance->DR - ofset_current;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	current = current * configrable_const_num;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0c:	ee17 2a90 	vmov	r2, s15
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//ADC_current_fillter();

	return current;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8000f24:	eeb0 0a67 	vmov.f32	s0, s15
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_ZN15STM_MotorSystem12set_velocityEf>:

	void STM_MotorSystem_start();

	void STM_MotorSystem_stop();

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_buf = velocity_tar;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	609a      	str	r2, [r3, #8]
		this->MotorSystem_mode_buf = VELOCITY_CONTROL;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZN15STM_MotorSystem10set_torqueEf>:

	void set_torque(float torque_tar){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	ed87 0a00 	vstr	s0, [r7]
		torque_tar *=1/kt;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f72:	ed97 7a00 	vldr	s14, [r7]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc7 7a00 	vstr	s15, [r7]
		this->current_buf = torque_tar;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	619a      	str	r2, [r3, #24]
		this->MotorSystem_mode_buf = TORQUE_CONTROL;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f8a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN15STM_MotorSystem16com_get_velocityEv>:

	float com_get_velocity(){//通信系に現在の速度を返す
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
		return this->velocity_buf;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	ee07 3a90 	vmov	s15, r3
	}
 8000fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZN15STM_MotorSystem15com_get_currentEv>:

	float get_velocity(); //エンコダ出力から現在の速度を計算して返す



	float com_get_current(){//通信系に現在の電流を返す
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
		return current_ref;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	ee07 3a90 	vmov	s15, r3
	}
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN15STM_MotorSystem8set_voltEf>:
	void motor_control();

	void set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir); //dir用のピンを設定
	void set_dir(GPIO_PinState dir); //dirを設定

	void set_volt(float volt){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	ed87 0a00 	vstr	s0, [r7]
		this->volt = volt;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	621a      	str	r2, [r3, #32]
	}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN15STM_MotorSystem6set_ktEf>:

	void set_kt(float kt){
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	ed87 0a00 	vstr	s0, [r7]
		this->kt = kt;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZN15STM_MotorSystem7set_pprEf>:

	void set_ppr(float ppr){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
		this->ppr = ppr;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZN15STM_MotorSystem17set_current_limitEf>:

	void set_current_limit(float current_limit){
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	ed87 0a00 	vstr	s0, [r7]
		this->current_limit = current_limit;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	61da      	str	r2, [r3, #28]
	}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN15STM_MotorSystem14set_velocity_pEf>:
		this->GPIO_PIN_coast = GPIO_PIN_coast;
		this->GPIO_coast = GPIO_coast;
	}


	void set_velocity_p(float velocity_p_buf){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_p_buf = velocity_p_buf;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_ZN15STM_MotorSystem14set_velocity_iEf>:

	void set_velocity_i(float velocity_i_buf){
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_i_buf = velocity_i_buf;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
	}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_ZN15STM_MotorSystem14set_velocity_dEf>:

	void set_velocity_d(float velocity_d_buf){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_d_buf = velocity_d_buf;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_ZN15STM_MotorSystem12set_torque_pEf>:

	void set_torque_p(float torque_p_buf){
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	ed87 0a00 	vstr	s0, [r7]
		this->torque_p_buf = torque_p_buf;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN15STM_MotorSystem12set_torque_iEf>:

	void set_torque_i(float torque_i_buf){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	ed87 0a00 	vstr	s0, [r7]
		this->torque_i_buf = torque_i_buf;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN15STM_MotorSystem12set_torque_dEf>:

	void set_torque_d(float torque_d_buf){
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	ed87 0a00 	vstr	s0, [r7]
		this->torque_d_buf = torque_d_buf;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
	}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>:

#include <CAN.hpp>
#include <STM_MotorSystem.hpp>


USER_CAN::USER_CAN(CAN_HandleTypeDef * _use_hcan){
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]

	this->_use_hcan = _use_hcan;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	609a      	str	r2, [r3, #8]

	CAN_FilterTypeDef filter;
	_filter = &filter;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f107 0208 	add.w	r2, r7, #8
 8001116:	601a      	str	r2, [r3, #0]

	CAN_TxHeaderTypeDef TxHeader;
	_TxHeader = &TxHeader;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800111e:	605a      	str	r2, [r3, #4]

	filter.FilterActivation = 0; //filter enable
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterBank = 0; //used filterbank 0
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
	filter.FilterMode = 0; //filter mode is mask mode
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	filter.FilterScale = 0; //filterscale is dual 16bits
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterIdHigh = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdHigh = 15;
 8001138:	230f      	movs	r3, #15
 800113a:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(this->_use_hcan, _filter);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f002 fedf 	bl	8003f0a <HAL_CAN_ConfigFilter>

	TxHeader.DLC = 4; //データ長（4byte）
 800114c:	2304      	movs	r3, #4
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = 0; //標準識別子
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.RTR = 0; //データフレーム (現状モータシステムからホストにデータ要求はしないと思うから)
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	HAL_CAN_Start(this->_use_hcan);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff9b 	bl	800409e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(this->_use_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f9c6 	bl	8004500 <HAL_CAN_ActivateNotification>

}
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3748      	adds	r7, #72	; 0x48
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZN8USER_CAN10use_tx_CANEmf>:

void USER_CAN::use_tx_CAN(uint32_t cmd,float data){
 800117e:	b580      	push	{r7, lr}
 8001180:	b088      	sub	sp, #32
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	ed87 0a01 	vstr	s0, [r7, #4]
	can_data tx;

	uint32_t mailbox;

	tx.low_data = data;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	61bb      	str	r3, [r7, #24]
	_TxHeader->StdId = cmd+get_id_CAN();
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f815 	bl	80011c0 <_ZN8USER_CAN10get_id_CANEv>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	440a      	add	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

	HAL_CAN_AddTxMessage(_use_hcan,_TxHeader, tx.low_data_raw,&mailbox);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	f107 0218 	add.w	r2, r7, #24
 80011b4:	f002 ffb7 	bl	8004126 <HAL_CAN_AddTxMessage>
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN8USER_CAN10get_id_CANEv>:

uint8_t USER_CAN::get_id_CAN(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	id_set id;
	id.bit0 = HAL_GPIO_ReadPin(GPIO_idbit0,GPIO_PIN_idbit0);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8a1b      	ldrh	r3, [r3, #16]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f003 fe6e 	bl	8004eb4 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	f362 0300 	bfi	r3, r2, #0, #1
 80011e6:	733b      	strb	r3, [r7, #12]
	id.bit1 = HAL_GPIO_ReadPin(GPIO_idbit1,GPIO_PIN_idbit1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8b1b      	ldrh	r3, [r3, #24]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f003 fe5e 	bl	8004eb4 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	f362 0341 	bfi	r3, r2, #1, #1
 8001206:	733b      	strb	r3, [r7, #12]
	id.bit2 = HAL_GPIO_ReadPin(GPIO_idbit2,GPIO_PIN_idbit2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	8c1b      	ldrh	r3, [r3, #32]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f003 fe4e 	bl	8004eb4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	7b3b      	ldrb	r3, [r7, #12]
 8001222:	f362 0382 	bfi	r3, r2, #2, #1
 8001226:	733b      	strb	r3, [r7, #12]
	id.bit3 = HAL_GPIO_ReadPin(GPIO_idbit3,GPIO_PIN_idbit3);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f003 fe3e 	bl	8004eb4 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	f362 03c3 	bfi	r3, r2, #3, #1
 8001246:	733b      	strb	r3, [r7, #12]
	return id.all_data;
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800124e:	b2db      	uxtb	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN8USER_CAN10filter_setEv>:
	this->GPIO_PIN_idbit1 = GPIO_PIN_idbit1;
	this->GPIO_PIN_idbit2 = GPIO_PIN_idbit2;
	this->GPIO_PIN_idbit3 = GPIO_PIN_idbit3;
}

void USER_CAN::filter_set(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	_filter->FilterIdHigh = this->get_id_CAN();
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffad 	bl	80011c0 <_ZN8USER_CAN10get_id_CANEv>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	601a      	str	r2, [r3, #0]
	HAL_CAN_ConfigFilter(this->_use_hcan, _filter);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f002 fe45 	bl	8003f0a <HAL_CAN_ConfigFilter>

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>:

void USER_CAN::use_rx_CAN(CAN_HandleTypeDef *_hcan){
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08d      	sub	sp, #52	; 0x34
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	if(_hcan != _use_hcan){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 816f 	bne.w	800157c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2f4>
		return;
	}

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 800129e:	4bbf      	ldr	r3, [pc, #764]	; (800159c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x314>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;

	if(HAL_CAN_GetRxMessage(_use_hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6898      	ldr	r0, [r3, #8]
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	f107 0210 	add.w	r2, r7, #16
 80012b0:	2100      	movs	r1, #0
 80012b2:	f003 f813 	bl	80042dc <HAL_CAN_GetRxMessage>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8167 	beq.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
		switch(RxHeader.StdId & 0xfff0){
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80012ce:	4013      	ands	r3, r2
 80012d0:	f24f 2240 	movw	r2, #62016	; 0xf240
 80012d4:	4293      	cmp	r3, r2
 80012d6:	f000 8121 	beq.w	800151c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x294>
 80012da:	f24f 2240 	movw	r2, #62016	; 0xf240
 80012de:	4293      	cmp	r3, r2
 80012e0:	f200 8159 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80012e4:	f24f 2230 	movw	r2, #62000	; 0xf230
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f000 810f 	beq.w	800150c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x284>
 80012ee:	f24f 2230 	movw	r2, #62000	; 0xf230
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f200 814f 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80012f8:	f24f 2220 	movw	r2, #61984	; 0xf220
 80012fc:	4293      	cmp	r3, r2
 80012fe:	f000 80fd 	beq.w	80014fc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x274>
 8001302:	f24f 2220 	movw	r2, #61984	; 0xf220
 8001306:	4293      	cmp	r3, r2
 8001308:	f200 8145 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800130c:	f24f 2210 	movw	r2, #61968	; 0xf210
 8001310:	4293      	cmp	r3, r2
 8001312:	f000 80eb 	beq.w	80014ec <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x264>
 8001316:	f24f 2210 	movw	r2, #61968	; 0xf210
 800131a:	4293      	cmp	r3, r2
 800131c:	f200 813b 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001320:	f24f 1240 	movw	r2, #61760	; 0xf140
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80d9 	beq.w	80014dc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x254>
 800132a:	f24f 1240 	movw	r2, #61760	; 0xf140
 800132e:	4293      	cmp	r3, r2
 8001330:	f200 8131 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001334:	f24f 1230 	movw	r2, #61744	; 0xf130
 8001338:	4293      	cmp	r3, r2
 800133a:	f000 80c7 	beq.w	80014cc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x244>
 800133e:	f24f 1230 	movw	r2, #61744	; 0xf130
 8001342:	4293      	cmp	r3, r2
 8001344:	f200 8127 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001348:	f24f 1220 	movw	r2, #61728	; 0xf120
 800134c:	4293      	cmp	r3, r2
 800134e:	f000 80b5 	beq.w	80014bc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x234>
 8001352:	f24f 1220 	movw	r2, #61728	; 0xf120
 8001356:	4293      	cmp	r3, r2
 8001358:	f200 811d 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800135c:	f24f 1210 	movw	r2, #61712	; 0xf110
 8001360:	4293      	cmp	r3, r2
 8001362:	f000 80a3 	beq.w	80014ac <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x224>
 8001366:	f24f 1210 	movw	r2, #61712	; 0xf110
 800136a:	4293      	cmp	r3, r2
 800136c:	f200 8113 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001370:	f24f 0240 	movw	r2, #61504	; 0xf040
 8001374:	4293      	cmp	r3, r2
 8001376:	f000 8091 	beq.w	800149c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x214>
 800137a:	f24f 0240 	movw	r2, #61504	; 0xf040
 800137e:	4293      	cmp	r3, r2
 8001380:	f200 8109 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001384:	f24f 0230 	movw	r2, #61488	; 0xf030
 8001388:	4293      	cmp	r3, r2
 800138a:	d07f      	beq.n	800148c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x204>
 800138c:	f24f 0230 	movw	r2, #61488	; 0xf030
 8001390:	4293      	cmp	r3, r2
 8001392:	f200 8100 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001396:	f24f 0220 	movw	r2, #61472	; 0xf020
 800139a:	4293      	cmp	r3, r2
 800139c:	d06e      	beq.n	800147c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x1f4>
 800139e:	f24f 0220 	movw	r2, #61472	; 0xf020
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f200 80f7 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013a8:	f24f 0210 	movw	r2, #61456	; 0xf010
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d05d      	beq.n	800146c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x1e4>
 80013b0:	f24f 0210 	movw	r2, #61456	; 0xf010
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f200 80ee 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013ba:	f24e 2210 	movw	r2, #57872	; 0xe210
 80013be:	4293      	cmp	r3, r2
 80013c0:	f000 80c4 	beq.w	800154c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2c4>
 80013c4:	f24e 2210 	movw	r2, #57872	; 0xe210
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f200 80e4 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013ce:	f24e 1230 	movw	r2, #57648	; 0xe130
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f000 80d4 	beq.w	8001580 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2f8>
 80013d8:	f24e 1230 	movw	r2, #57648	; 0xe130
 80013dc:	4293      	cmp	r3, r2
 80013de:	f200 80da 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013e2:	f24e 1220 	movw	r2, #57632	; 0xe120
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f000 80cc 	beq.w	8001584 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2fc>
 80013ec:	f24e 1220 	movw	r2, #57632	; 0xe120
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f200 80d0 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013f6:	f24e 1210 	movw	r2, #57616	; 0xe110
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f000 80c4 	beq.w	8001588 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x300>
 8001400:	f24e 1210 	movw	r2, #57616	; 0xe110
 8001404:	4293      	cmp	r3, r2
 8001406:	f200 80c6 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800140a:	f24e 0240 	movw	r2, #57408	; 0xe040
 800140e:	4293      	cmp	r3, r2
 8001410:	f000 80bc 	beq.w	800158c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x304>
 8001414:	f24e 0240 	movw	r2, #57408	; 0xe040
 8001418:	4293      	cmp	r3, r2
 800141a:	f200 80bc 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800141e:	f24e 0230 	movw	r2, #57392	; 0xe030
 8001422:	4293      	cmp	r3, r2
 8001424:	f000 80b4 	beq.w	8001590 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x308>
 8001428:	f24e 0230 	movw	r2, #57392	; 0xe030
 800142c:	4293      	cmp	r3, r2
 800142e:	f200 80b2 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001432:	f24e 0220 	movw	r2, #57376	; 0xe020
 8001436:	4293      	cmp	r3, r2
 8001438:	f000 80ac 	beq.w	8001594 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30c>
 800143c:	f24e 0220 	movw	r2, #57376	; 0xe020
 8001440:	4293      	cmp	r3, r2
 8001442:	f200 80a8 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001446:	f24e 0210 	movw	r2, #57360	; 0xe010
 800144a:	4293      	cmp	r3, r2
 800144c:	d06e      	beq.n	800152c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2a4>
 800144e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001452:	4293      	cmp	r3, r2
 8001454:	f200 809f 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001458:	f241 0210 	movw	r2, #4112	; 0x1010
 800145c:	4293      	cmp	r3, r2
 800145e:	f000 8085 	beq.w	800156c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2e4>
 8001462:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020
 8001466:	f000 8085 	beq.w	8001574 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2ec>
 800146a:	e094      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
			case SET_VELOCITY:
				ms->set_velocity(rx.low_data);
 800146c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001476:	f7ff fd5c 	bl	8000f32 <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 800147a:	e08c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_P:
				ms->set_velocity_p(rx.low_data);
 800147c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001486:	f7ff fde1 	bl	800104c <_ZN15STM_MotorSystem14set_velocity_pEf>
				break;
 800148a:	e084      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_I:
				ms->set_velocity_i(rx.low_data);
 800148c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001496:	f7ff fde8 	bl	800106a <_ZN15STM_MotorSystem14set_velocity_iEf>
				break;
 800149a:	e07c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_D:
				ms->set_velocity_d(rx.low_data);
 800149c:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014a6:	f7ff fdef 	bl	8001088 <_ZN15STM_MotorSystem14set_velocity_dEf>
				break;
 80014aa:	e074      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE:
				ms->set_torque(rx.low_data);
 80014ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014b6:	f7ff fd4f 	bl	8000f58 <_ZN15STM_MotorSystem10set_torqueEf>
				break;
 80014ba:	e06c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_P:
				ms->set_torque_p(rx.low_data);
 80014bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014c6:	f7ff fdee 	bl	80010a6 <_ZN15STM_MotorSystem12set_torque_pEf>
				break;
 80014ca:	e064      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_I:
				ms->set_torque_i(rx.low_data);
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014d6:	f7ff fdf5 	bl	80010c4 <_ZN15STM_MotorSystem12set_torque_iEf>
				break;
 80014da:	e05c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_D:
				ms->set_torque_d(rx.low_data);
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014e6:	f7ff fdfc 	bl	80010e2 <_ZN15STM_MotorSystem12set_torque_dEf>
				break;
 80014ea:	e054      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VOLTAGE:
				ms->set_volt(rx.low_data);
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014f6:	f7ff fd6d 	bl	8000fd4 <_ZN15STM_MotorSystem8set_voltEf>
				break;
 80014fa:	e04c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_PPR:
				ms->set_ppr(rx.low_data);
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001506:	f7ff fd83 	bl	8001010 <_ZN15STM_MotorSystem7set_pprEf>
				break;
 800150a:	e044      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_KT:
				ms->set_kt(rx.low_data);
 800150c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001516:	f7ff fd6c 	bl	8000ff2 <_ZN15STM_MotorSystem6set_ktEf>
				break;
 800151a:	e03c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_CURRENT_LIMIT:
				ms->set_current_limit(rx.low_data);
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001526:	f7ff fd82 	bl	800102e <_ZN15STM_MotorSystem17set_current_limitEf>
				break;
 800152a:	e034      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case GET_VELOCITY:
				ms->use_can.use_tx_CAN(GET_VELOCITY,ms->com_get_velocity());
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8001532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001534:	f7ff fd30 	bl	8000f98 <_ZN15STM_MotorSystem16com_get_velocityEv>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	f24e 0110 	movw	r1, #57360	; 0xe010
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fe1a 	bl	800117e <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 800154a:	e024      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case GET_TORQUE_D:
				break;

			case GET_CURRENT:
				ms->use_can.use_tx_CAN(GET_CURRENT,ms->com_get_current());
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8001552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001554:	f7ff fd2f 	bl	8000fb6 <_ZN15STM_MotorSystem15com_get_currentEv>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f24e 2110 	movw	r1, #57872	; 0xe210
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff fe0a 	bl	800117e <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 800156a:	e014      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SYSTEM_INIT:
				ms->STM_MotorSystem_init();
 800156c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800156e:	f000 fd3f 	bl	8001ff0 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>
				break;
 8001572:	e010      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SYSTEM_START:
				ms->STM_MotorSystem_start();
 8001574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001576:	f000 fd6d 	bl	8002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
				break;
 800157a:	e00c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
		return;
 800157c:	bf00      	nop
 800157e:	e00a      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001580:	bf00      	nop
 8001582:	e008      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001584:	bf00      	nop
 8001586:	e006      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001588:	bf00      	nop
 800158a:	e004      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 800158c:	bf00      	nop
 800158e:	e002      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001594:	bf00      	nop
			}

		}
}
 8001596:	3734      	adds	r7, #52	; 0x34
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20000028 	.word	0x20000028

080015a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

#ifndef debug

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //受信割り込みコールバック
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	STM_MotorSystem *ms = STM_MotorSystem::_ms;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
	ms->use_can.use_rx_CAN(hcan);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	33bc      	adds	r3, #188	; 0xbc
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe67 	bl	8001288 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000028 	.word	0x20000028

080015c8 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>:
 *      Author: 0_hayate
 */

#include <ENCODER.hpp>

ENCODER::ENCODER(TIM_HandleTypeDef *_encoder_timer)
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
{
	this->_encoder_timer = _encoder_timer;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	609a      	str	r2, [r3, #8]
	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	085a      	lsrs	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
	ofset_count = arr/2;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	085a      	lsrs	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	213c      	movs	r1, #60	; 0x3c
 8001604:	4618      	mov	r0, r3
 8001606:	f005 f9c1 	bl	800698c <HAL_TIM_Encoder_Start>

	return;
}
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN7ENCODER9get_ofsetEv>:


uint32_t ENCODER::get_ofset(){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return this->ofset_count;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZN7ENCODER12init_ENCODEREv>:

void ENCODER::init_ENCODER(){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Stop(this->_encoder_timer,TIM_CHANNEL_ALL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	213c      	movs	r1, #60	; 0x3c
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fa34 	bl	8006aa8 <HAL_TIM_Encoder_Stop>

	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	0852      	lsrs	r2, r2, #1
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	085a      	lsrs	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]

	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	213c      	movs	r1, #60	; 0x3c
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f991 	bl	800698c <HAL_TIM_Encoder_Start>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZN3PWMC1EP17TIM_HandleTypeDefm>:
 */


#include <PWM.hpp>

PWM::PWM(TIM_HandleTypeDef *_pwm_timer,uint32_t TIM_CHANNEL_n ){ //TIMxCHn n=1,2,3...
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	this->_pwm_timer = _pwm_timer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	605a      	str	r2, [r3, #4]
	this->supply_voltage = 12;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xd8>)
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d84c      	bhi.n	800172c <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xb8>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x24>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016cd 	.word	0x080016cd
 800169c:	0800172d 	.word	0x0800172d
 80016a0:	0800172d 	.word	0x0800172d
 80016a4:	0800172d 	.word	0x0800172d
 80016a8:	080016e5 	.word	0x080016e5
 80016ac:	0800172d 	.word	0x0800172d
 80016b0:	0800172d 	.word	0x0800172d
 80016b4:	0800172d 	.word	0x0800172d
 80016b8:	080016fd 	.word	0x080016fd
 80016bc:	0800172d 	.word	0x0800172d
 80016c0:	0800172d 	.word	0x0800172d
 80016c4:	0800172d 	.word	0x0800172d
 80016c8:	08001715 	.word	0x08001715

	switch(TIM_CHANNEL_n){
	case TIM_CHANNEL_1:
		CCRn = & this->_pwm_timer->Instance->CCR1;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
		break;
 80016e2:	e024      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_2:
		CCRn = & this->_pwm_timer->Instance->CCR2;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
		break;
 80016fa:	e018      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_3:
		CCRn = & this->_pwm_timer->Instance->CCR3;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
		break;
 8001712:	e00c      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_4:
		CCRn = & this->_pwm_timer->Instance->CCR4;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
		break;
 800172a:	e000      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	default:
		break;
 800172c:	bf00      	nop

	}

	HAL_TIM_PWM_Start(_pwm_timer, TIM_CHANNEL_n);
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f004 ff99 	bl	8006668 <HAL_TIM_PWM_Start>

	this->arr = this->_pwm_timer->Instance->ARR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	60da      	str	r2, [r3, #12]

}
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	41400000 	.word	0x41400000

08001750 <_ZN3PWM7PWM_outEf>:

void PWM::PWM_out(float voltage){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	ed87 0a00 	vstr	s0, [r7]

	uint32_t buf;

	buf = arr / supply_voltage * voltage;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 3a90 	vmov	r3, s15
 8001782:	60fb      	str	r3, [r7, #12]

	if(buf > arr){ //pwmdutyリミット
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d902      	bls.n	8001794 <_ZN3PWM7PWM_outEf+0x44>
		buf = arr;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	60fb      	str	r3, [r7, #12]
	}

	*CCRn = buf;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZN3PWM8PWM_stopEv>:

void PWM::PWM_stop(){ //pwmタイマ自体は動作している。dutyを0にしているだけ
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	*CCRn = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_ZN3PID14PID_controllerEf>:
	float d;
	d = this->d;
	return d;
}

inline float PID::PID_controller(float error){
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
	float MV = 0; //PIDコントローラ操作量
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

	i_sum = i_sum + dt*(error+error_before)/2; //微小時間の間線形に動いていたとして
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edd3 6a03 	vldr	s13, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 6a06 	vldr	s12, [r3, #24]
 80017e8:	edd7 7a00 	vldr	s15, [r7]
 80017ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 80017f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80017f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edc3 7a05 	vstr	s15, [r3, #20]

	p_mv = this->p*error;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	edd7 7a00 	vldr	s15, [r7]
 8001810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edc3 7a07 	vstr	s15, [r3, #28]
	i_mv = this->i*i_sum;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a05 	vldr	s15, [r3, #20]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edc3 7a08 	vstr	s15, [r3, #32]
	d_mv = this->d*(error-error_before)/dt;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a02 	vldr	s14, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a06 	vldr	s15, [r3, #24]
 800183c:	edd7 6a00 	vldr	s13, [r7]
 8001840:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001844:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a03 	vldr	s14, [r3, #12]
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	MV = p_mv+i_mv+d_mv;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	ed93 7a07 	vldr	s14, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 7a08 	vldr	s15, [r3, #32]
 8001864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	edc7 7a03 	vstr	s15, [r7, #12]
	error_before = error;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	619a      	str	r2, [r3, #24]

	return MV;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	ee07 3a90 	vmov	s15, r3
}
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_ZN7ENCODER9get_countEv>:

	void init_ENCODER();

};

inline uint32_t ENCODER::get_count(){
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	ENCODER_count = _encoder_timer->Instance->CNT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
	return ENCODER_count;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>:
inline void STM_MotorSystem::set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir){
	this->GPIO_PIN_dir = GPIO_PIN_dir;
	this->GPIO_dir = GPIO_dir;
}

inline void STM_MotorSystem::set_dir(GPIO_PinState dir){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin (this->GPIO_dir,this->GPIO_PIN_dir,dir);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f003 fb09 	bl	8004ee4 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN15STM_MotorSystem13motor_controlEv>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

void STM_MotorSystem::motor_control(){
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	 * 機能追加の際はMotorSystem_start()内に初期化文を書き、タイマー割り込み周期ごとの処理をここに書く。
	 * 割り込み周期ごとの処理書く際、重複する処理はフォースルーで収束させる。
	 * 制御周期を長期に変化させたい場合は各caseにbreakを記述し、特定のcaseに達したら処理を行わせcontrol_switchを初期化する。
	 * 重複する処理や、制御周期を長期にしたい場合defaultに処理をおくか、breakさせるのがラクだが例外判定ができないため必ずdefaultには例外処理をおく(システム停止でなくてもよい)。
	 */
	control_switch++;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	switch(this->MotorSystem_mode){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d009      	beq.n	8001912 <_ZN15STM_MotorSystem13motor_controlEv+0x38>
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d250      	bcs.n	80019a6 <_ZN15STM_MotorSystem13motor_controlEv+0xcc>
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d047      	beq.n	8001998 <_ZN15STM_MotorSystem13motor_controlEv+0xbe>
 8001908:	f640 72ff 	movw	r2, #4095	; 0xfff
 800190c:	4293      	cmp	r3, r2
 800190e:	d02a      	beq.n	8001966 <_ZN15STM_MotorSystem13motor_controlEv+0x8c>
 8001910:	e049      	b.n	80019a6 <_ZN15STM_MotorSystem13motor_controlEv+0xcc>
	case VELOCITY_CONTROL:
		{switch(control_switch){
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d014      	beq.n	8001946 <_ZN15STM_MotorSystem13motor_controlEv+0x6c>
 800191c:	2b0a      	cmp	r3, #10
 800191e:	dc1a      	bgt.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <_ZN15STM_MotorSystem13motor_controlEv+0x56>
 8001924:	2b00      	cmp	r3, #0
 8001926:	dd16      	ble.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>
 8001928:	3b02      	subs	r3, #2
 800192a:	2b07      	cmp	r3, #7
 800192c:	d813      	bhi.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>
 800192e:	e006      	b.n	800193e <_ZN15STM_MotorSystem13motor_controlEv+0x64>
		case 1:
			this->controller_velocity();
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f843 	bl	80019bc <_ZN15STM_MotorSystem19controller_velocityEv>
			this->controller_torque();
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f88c 	bl	8001a54 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 800193c:	e012      	b.n	8001964 <_ZN15STM_MotorSystem13motor_controlEv+0x8a>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			this->controller_torque();
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f888 	bl	8001a54 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 8001944:	e00e      	b.n	8001964 <_ZN15STM_MotorSystem13motor_controlEv+0x8a>

		case 10:
			this->controller_torque();
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f884 	bl	8001a54 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			break;
 8001954:	e006      	b.n	8001964 <_ZN15STM_MotorSystem13motor_controlEv+0x8a>

		default :
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c
			this->STM_MotorSystem_start();
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fb79 	bl	8002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001962:	bf00      	nop

		}}break;
 8001964:	e026      	b.n	80019b4 <_ZN15STM_MotorSystem13motor_controlEv+0xda>

	case TORQUE_CONTROL:
		this->current_tar = this->current_buf;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	615a      	str	r2, [r3, #20]
		{switch(control_switch){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <_ZN15STM_MotorSystem13motor_controlEv+0xae>
		case 1:
			this->controller_torque();
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f86b 	bl	8001a54 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			break;
 8001986:	e006      	b.n	8001996 <_ZN15STM_MotorSystem13motor_controlEv+0xbc>

		default:
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c
			this->STM_MotorSystem_start();
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb60 	bl	8002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001994:	bf00      	nop

		}}break;
 8001996:	e00d      	b.n	80019b4 <_ZN15STM_MotorSystem13motor_controlEv+0xda>

	case COAST_CONTROL:
		this->MotorSystem_mode_buf = COAST_CONTROL;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
		this->STM_MotorSystem_start();
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb58 	bl	8002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
		break;
 80019a4:	e006      	b.n	80019b4 <_ZN15STM_MotorSystem13motor_controlEv+0xda>

	default:
		this->MotorSystem_mode_buf = SYSTEM_STOP;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
		this->STM_MotorSystem_start();
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fb51 	bl	8002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
		break;
 80019b2:	bf00      	nop

	}
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN15STM_MotorSystem19controller_velocityEv>:




void STM_MotorSystem::controller_velocity(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	this->velocity_ref = this->get_velocity();
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8c3 	bl	8001b50 <_ZN15STM_MotorSystem12get_velocityEv>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a00 	vstr	s15, [r3]
	float e_velocity;
	this->velocity_tar = this->velocity_buf;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	605a      	str	r2, [r3, #4]

	if(fabsf(velocity_tar) > velocity_limit){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	dd14      	ble.n	8001a20 <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			if(velocity_tar > 0){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	dd04      	ble.n	8001a10 <_ZN15STM_MotorSystem19controller_velocityEv+0x54>
				velocity_tar = velocity_limit;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e007      	b.n	8001a20 <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			}else{
				velocity_tar = -1*velocity_limit;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a16:	eef1 7a67 	vneg.f32	s15, s15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		}

	e_velocity = this->velocity_tar - this->velocity_ref;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a30:	edc7 7a03 	vstr	s15, [r7, #12]

	current_tar = this->pid_velocity.PID_controller(e_velocity);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	336c      	adds	r3, #108	; 0x6c
 8001a38:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fec1 	bl	80017c4 <_ZN3PID14PID_controllerEf>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edc3 7a05 	vstr	s15, [r3, #20]

	return;
 8001a4c:	bf00      	nop
}
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN15STM_MotorSystem17controller_torqueEv>:



void STM_MotorSystem::controller_torque(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	ed2d 8b02 	vpush	{d8}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	float e_current;
	float volt_tar;

	if(fabsf(current_tar) > current_limit){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a66:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	dd14      	ble.n	8001aa4 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				if(current_tar > 0){
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd04      	ble.n	8001a94 <_ZN15STM_MotorSystem17controller_torqueEv+0x40>
					current_tar = current_limit;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	e007      	b.n	8001aa4 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				}else{
					current_tar = -1*current_limit;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a9a:	eef1 7a67 	vneg.f32	s15, s15
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edc3 7a05 	vstr	s15, [r3, #20]
				}
			}

	e_current = current_tar - this->get_current();
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	ed93 8a05 	vldr	s16, [r3, #20]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8d4 	bl	8001c58 <_ZN15STM_MotorSystem11get_currentEv>
 8001ab0:	eef0 7a40 	vmov.f32	s15, s0
 8001ab4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001ab8:	edc7 7a03 	vstr	s15, [r7, #12]

	volt_tar = this->pid_torque.PID_controller(e_current);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3394      	adds	r3, #148	; 0x94
 8001ac0:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe7d 	bl	80017c4 <_ZN3PID14PID_controllerEf>
 8001aca:	ed87 0a02 	vstr	s0, [r7, #8]
	volt_tar += velocity_tar*kt + this->velocity_ref*kt; //フィードフォワードとフィードバックをたす
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 6a00 	vldr	s13, [r3]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	edc7 7a02 	vstr	s15, [r7, #8]

	if(volt_tar >= 0){ //モータの回転方向を決める
 8001afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	db04      	blt.n	8001b16 <_ZN15STM_MotorSystem17controller_torqueEv+0xc2>
			dir_f = GPIO_PIN_RESET;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001b14:	e003      	b.n	8001b1e <_ZN15STM_MotorSystem17controller_torqueEv+0xca>
		}else{
			dir_f = GPIO_PIN_SET;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}

	this->use_pwm.PWM_out(fabsf(volt_tar));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	33e8      	adds	r3, #232	; 0xe8
 8001b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b26:	eef0 7ae7 	vabs.f32	s15, s15
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe0e 	bl	8001750 <_ZN3PWM7PWM_outEf>
	set_dir(dir_f);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff feb9 	bl	80018b4 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>

	return;
 8001b42:	bf00      	nop
}
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	ecbd 8b02 	vpop	{d8}
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <_ZN15STM_MotorSystem12get_velocityEv>:



float STM_MotorSystem::get_velocity(){
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	int64_t buf;
	float velocity;

	buf = this->use_encoder.get_count();
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	33f8      	adds	r3, #248	; 0xf8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe97 	bl	8001890 <_ZN7ENCODER9get_countEv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	buf -= before_encoder_cnt;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	461a      	mov	r2, r3
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b7c:	1a84      	subs	r4, r0, r2
 8001b7e:	eb61 0503 	sbc.w	r5, r1, r3
 8001b82:	e9c7 4504 	strd	r4, r5, [r7, #16]
	before_encoder_cnt += buf;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	441a      	add	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	659a      	str	r2, [r3, #88]	; 0x58
	velocity = buf;
 8001b92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b96:	f7ff f805 	bl	8000ba4 <__aeabi_l2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60fb      	str	r3, [r7, #12]
	velocity *=1570.796/ppr;
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7fe fc76 	bl	8000490 <__aeabi_f2d>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	460d      	mov	r5, r1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc6f 	bl	8000490 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	a122      	add	r1, pc, #136	; (adr r1, 8001c40 <_ZN15STM_MotorSystem12get_velocityEv+0xf0>)
 8001bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bbc:	f7fe fdea 	bl	8000794 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fcba 	bl	8000540 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe fec6 	bl	8000964 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]

	velocity = velocity*0.7+0.3*before_vel;
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7fe fc57 	bl	8000490 <__aeabi_f2d>
 8001be2:	a319      	add	r3, pc, #100	; (adr r3, 8001c48 <_ZN15STM_MotorSystem12get_velocityEv+0xf8>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fcaa 	bl	8000540 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fc49 	bl	8000490 <__aeabi_f2d>
 8001bfe:	a314      	add	r3, pc, #80	; (adr r3, 8001c50 <_ZN15STM_MotorSystem12get_velocityEv+0x100>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fc9c 	bl	8000540 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fae0 	bl	80001d4 <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe fea2 	bl	8000964 <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
	before_vel = velocity;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44

	return velocity;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	ee07 3a90 	vmov	s15, r3
}
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	1a9fbe77 	.word	0x1a9fbe77
 8001c44:	40988b2f 	.word	0x40988b2f
 8001c48:	66666666 	.word	0x66666666
 8001c4c:	3fe66666 	.word	0x3fe66666
 8001c50:	33333333 	.word	0x33333333
 8001c54:	3fd33333 	.word	0x3fd33333

08001c58 <_ZN15STM_MotorSystem11get_currentEv>:


float STM_MotorSystem::get_current(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	this->current_ref = use_adc.ADC_get_current();
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f920 	bl	8000eac <_ZN3ADC15ADC_get_currentEv>
 8001c6c:	eef0 7a40 	vmov.f32	s15, s0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edc3 7a04 	vstr	s15, [r3, #16]
	return current_ref;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	ee07 3a90 	vmov	s15, r3
}
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){ //tim1割り込みコールバック
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
	ms->motor_control();
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fe1f 	bl	80018da <_ZN15STM_MotorSystem13motor_controlEv>
	return;
 8001c9c:	bf00      	nop
}
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000028 	.word	0x20000028

08001ca8 <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6178      	str	r0, [r7, #20]
 8001cb0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cb4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cb8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001cbc:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0),p_mv(0),i_mv(0),d_mv(0)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_ZN3PID9PID_set_pEf>:
inline void PID::PID_set_p(float p){
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_ZN3PID9PID_set_iEf>:
inline void PID::PID_set_i(float i){
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	ed87 0a00 	vstr	s0, [r7]
	this->i = i;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	605a      	str	r2, [r3, #4]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_ZN3PID9PID_set_dEf>:
inline void PID::PID_set_d(float d){
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	ed87 0a00 	vstr	s0, [r7]
	this->d = d;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_ZN3PID10PID_set_dtEf>:
inline void PID::PID_set_dt(float dt){
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	ed87 0a00 	vstr	s0, [r7]
	this->dt = dt;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	60da      	str	r2, [r3, #12]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_ZN3ADC12ADC_set_gainEf>:
	void ADC_set_gain(float ADC_sens_gain){
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	ed87 0a00 	vstr	s0, [r7]
		this->ADC_sens_gain = ADC_sens_gain;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>:
	void set_coast_pin(GPIO_TypeDef *GPIO_coast,uint16_t GPIO_PIN_coast){
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
		this->GPIO_PIN_coast = GPIO_PIN_coast;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		this->GPIO_coast = GPIO_coast;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>:
inline void STM_MotorSystem::set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir){
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80fb      	strh	r3, [r7, #6]
	this->GPIO_PIN_dir = GPIO_PIN_dir;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	this->GPIO_dir = GPIO_dir;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem(
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
pid_velocity(0,0,0,0.0001),
pid_torque(0,0,0,0.0001),
use_can(_hcan),
use_pwm(_pwm_timer,TIM_CHANNEL_n),
use_encoder(_encoder_timer),
use_adc(_hadc,3.3)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1c8>)
 8001e32:	621a      	str	r2, [r3, #32]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	336c      	adds	r3, #108	; 0x6c
 8001e58:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001e5c:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e60:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e64:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff1d 	bl	8001ca8 <_ZN3PIDC1Effff>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3394      	adds	r3, #148	; 0x94
 8001e72:	eddf 1a56 	vldr	s3, [pc, #344]	; 8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001e76:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e7a:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e7e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff10 	bl	8001ca8 <_ZN3PIDC1Effff>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	33bc      	adds	r3, #188	; 0xbc
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f936 	bl	8001100 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	33e8      	adds	r3, #232	; 0xe8
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fbe9 	bl	8001674 <_ZN3PWMC1EP17TIM_HandleTypeDefm>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	33f8      	adds	r3, #248	; 0xf8
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fb8d 	bl	80015c8 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001eb4:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001fd4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d4>
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe feea 	bl	8000c94 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>

{

	_ms = this;
 8001ec0:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d8>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6013      	str	r3, [r2, #0]

	this->_control_timer = _control_timer;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	665a      	str	r2, [r3, #100]	; 0x64

#ifndef debug
	//can id set
	use_can.GPIO_idbit0 = GPIOB;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a43      	ldr	r2, [pc, #268]	; (8001fdc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001ed0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	use_can.GPIO_idbit1 = GPIOB;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a41      	ldr	r2, [pc, #260]	; (8001fdc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001ed8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	use_can.GPIO_idbit2 = GPIOA;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ee2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	use_can.GPIO_idbit3 = GPIOA;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001eec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	use_can.GPIO_PIN_idbit0 = GPIO_PIN_1;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	use_can.GPIO_PIN_idbit1 = GPIO_PIN_8;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efe:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	use_can.GPIO_PIN_idbit2 = GPIO_PIN_9;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	use_can.GPIO_PIN_idbit3 = GPIO_PIN_10;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f12:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	use_can.filter_set();
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	33bc      	adds	r3, #188	; 0xbc
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f99c 	bl	8001258 <_ZN8USER_CAN10filter_setEv>

	//can通信有効化
	HAL_CAN_Start(_hcan);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f002 f8bc 	bl	800409e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f26:	2102      	movs	r1, #2
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f002 fae9 	bl	8004500 <HAL_CAN_ActivateNotification>

#endif

	//pid init
	pid_velocity.PID_set_dt(0.001);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	336c      	adds	r3, #108	; 0x6c
 8001f32:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001fe0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e0>
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff1a 	bl	8001d70 <_ZN3PID10PID_set_dtEf>
	pid_torque.PID_set_dt(0.0001);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3394      	adds	r3, #148	; 0x94
 8001f40:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff13 	bl	8001d70 <_ZN3PID10PID_set_dtEf>

	this->velocity_p_buf = 0;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
	this->velocity_i_buf = 0;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
	this->velocity_d_buf = 0;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34

	this->torque_p_buf = 0;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
	this->torque_i_buf = 0;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
	this->torque_d_buf = 0;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40

	//速度制御用エンコダバッファ初期化
	before_encoder_cnt = use_encoder.get_ofset();
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	33f8      	adds	r3, #248	; 0xf8
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fb48 	bl	8001614 <_ZN7ENCODER9get_ofsetEv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58

	//速度、電流制限
	velocity_limit = 100; //ここはそこまで問題じゃない
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e4>)
 8001f8e:	60da      	str	r2, [r3, #12]
	current_limit = 10; //こっちはちゃんと設定しないと積分がバグる。とくにストールとかさせたとき
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e8>)
 8001f94:	61da      	str	r2, [r3, #28]

	//a3921のdirピンの操作ピン設定
	set_dir_pin(GPIOB,GPIO_PIN_4);
 8001f96:	2210      	movs	r2, #16
 8001f98:	4910      	ldr	r1, [pc, #64]	; (8001fdc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff ff1b 	bl	8001dd6 <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>

	//coast機能ピン設定
	set_coast_pin(GPIOA,GPIO_PIN_7);
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff01 	bl	8001dae <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>

	//電流センサゲインセット
	this->use_adc.ADC_set_gain(0.025);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001fb2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001fec <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1ec>
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fee9 	bl	8001d8e <_ZN3ADC12ADC_set_gainEf>


}
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	41400000 	.word	0x41400000
 8001fcc:	38d1b717 	.word	0x38d1b717
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40533333 	.word	0x40533333
 8001fd8:	20000028 	.word	0x20000028
 8001fdc:	48000400 	.word	0x48000400
 8001fe0:	3a83126f 	.word	0x3a83126f
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	41200000 	.word	0x41200000
 8001fec:	3ccccccd 	.word	0x3ccccccd

08001ff0 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>:

void STM_MotorSystem::STM_MotorSystem_init(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(_control_timer); //割り込みタイマ停止
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 faa3 	bl	8006548 <HAL_TIM_Base_Stop_IT>
	_control_timer->Instance->CNT = 0; //割り込みタイマカウント初期化
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
	this->control_switch = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	this->use_adc.ADC_calibration(); //adcのキャリブレーション
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fed0 	bl	8000dc0 <_ZN3ADC15ADC_calibrationEv>

	this->use_encoder.init_ENCODER(); //エンコダカウント初期化
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	33f8      	adds	r3, #248	; 0xf8
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fb01 	bl	800162c <_ZN7ENCODER12init_ENCODEREv>

	this->use_pwm.PWM_stop(); //PWMdutyを0にする
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	33e8      	adds	r3, #232	; 0xe8
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fbba 	bl	80017a8 <_ZN3PWM8PWM_stopEv>

	HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET); //coast無効化
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	f002 ff4f 	bl	8004ee4 <HAL_GPIO_WritePin>

	this->MotorSystem_mode_buf = SYSTEM_STOP; //システムをストップモードにセット
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>:


void STM_MotorSystem::STM_MotorSystem_start(){ //スタート毎にモードの初期化が行われる
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(_control_timer);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fa71 	bl	8006548 <HAL_TIM_Base_Stop_IT>
	_control_timer->Instance->CNT = 0; //割り込みタイマカウント初期化
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(_control_timer, TIM_FLAG_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0201 	mvn.w	r2, #1
 800207a:	611a      	str	r2, [r3, #16]
	this->control_switch = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	f002 ff27 	bl	8004ee4 <HAL_GPIO_WritePin>

	switch(MotorSystem_mode_buf){
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	4293      	cmp	r3, r2
 80020a0:	d012      	beq.n	80020c8 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x74>
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	f080 80bd 	bcs.w	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
 80020aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d05c      	beq.n	800216c <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x118>
 80020b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b6:	f080 80b5 	bcs.w	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 808b 	beq.w	80021d6 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x182>
 80020c0:	2bff      	cmp	r3, #255	; 0xff
 80020c2:	f000 8097 	beq.w	80021f4 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1a0>
		this->use_pwm.PWM_stop();
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
		this->use_adc.ADC_stop();
		break;
	}
}
 80020c6:	e0ad      	b.n	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = VELOCITY_CONTROL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ce:	661a      	str	r2, [r3, #96]	; 0x60
		pid_velocity.PID_set_p(velocity_p_buf); //pid gain set
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020dc:	eeb0 0a67 	vmov.f32	s0, s15
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7ff fe18 	bl	8001d16 <_ZN3PID9PID_set_pEf>
		pid_velocity.PID_set_i(velocity_i_buf);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	4610      	mov	r0, r2
 80020f8:	f7ff fe1c 	bl	8001d34 <_ZN3PID9PID_set_iEf>
		pid_velocity.PID_set_d(velocity_d_buf);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002108:	eeb0 0a67 	vmov.f32	s0, s15
 800210c:	4610      	mov	r0, r2
 800210e:	f7ff fe20 	bl	8001d52 <_ZN3PID9PID_set_dEf>
		pid_torque.PID_set_p(torque_p_buf);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	4610      	mov	r0, r2
 8002124:	f7ff fdf7 	bl	8001d16 <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002134:	eeb0 0a67 	vmov.f32	s0, s15
 8002138:	4610      	mov	r0, r2
 800213a:	f7ff fdfb 	bl	8001d34 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800214a:	eeb0 0a67 	vmov.f32	s0, s15
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fdff 	bl	8001d52 <_ZN3PID9PID_set_dEf>
		this->use_adc.ADC_start();
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fd60 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002164:	4618      	mov	r0, r3
 8002166:	f004 f993 	bl	8006490 <HAL_TIM_Base_Start_IT>
		break;
 800216a:	e05b      	b.n	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = TORQUE_CONTROL;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002172:	661a      	str	r2, [r3, #96]	; 0x60
		pid_torque.PID_set_p(torque_p_buf);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	4610      	mov	r0, r2
 8002186:	f7ff fdc6 	bl	8001d16 <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	4610      	mov	r0, r2
 800219c:	f7ff fdca 	bl	8001d34 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	4610      	mov	r0, r2
 80021b2:	f7ff fdce 	bl	8001d52 <_ZN3PID9PID_set_dEf>
		this->velocity_tar = 0; //トルクコントロールモードでのフィードフォワード無効化
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
		this->use_adc.ADC_start();
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fd2b 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 f95e 	bl	8006490 <HAL_TIM_Base_Start_IT>
		break;
 80021d4:	e026      	b.n	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = SYSTEM_STOP;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	; 0x60
		this->use_pwm.PWM_stop();
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	33e8      	adds	r3, #232	; 0xe8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fae1 	bl	80017a8 <_ZN3PWM8PWM_stopEv>
		this->use_adc.ADC_stop();
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fd3c 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
		break;
 80021f2:	e017      	b.n	8002224 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = COAST_CONTROL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
		this->use_pwm.PWM_stop();
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	33e8      	adds	r3, #232	; 0xe8
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fad2 	bl	80017a8 <_ZN3PWM8PWM_stopEv>
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800220e:	2201      	movs	r2, #1
 8002210:	4619      	mov	r1, r3
 8002212:	f002 fe67 	bl	8004ee4 <HAL_GPIO_WritePin>
		this->use_adc.ADC_stop();
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fd24 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
		break;
 8002222:	bf00      	nop
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002232:	af04      	add	r7, sp, #16

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002234:	f000 fd7a 	bl	8002d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002238:	f000 f826 	bl	8002288 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223c:	f000 fac6 	bl	80027cc <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 8002240:	f000 f894 	bl	800236c <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 8002244:	f000 f8fa 	bl	800243c <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8002248:	f000 f996 	bl	8002578 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800224c:	f000 f9f2 	bl	8002634 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8002250:	f000 fa88 	bl	8002764 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8002254:	f000 f92e 	bl	80024b4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms(&hadc2,&hcan,&htim2,&htim3,TIM_CHANNEL_3,&htim1);
 8002258:	1d38      	adds	r0, r7, #4
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <main+0x48>)
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2308      	movs	r3, #8
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <main+0x4c>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <main+0x50>)
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <main+0x54>)
 800226a:	4906      	ldr	r1, [pc, #24]	; (8002284 <main+0x58>)
 800226c:	f7ff fdc8 	bl	8001e00 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>
   */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002270:	e7fe      	b.n	8002270 <main+0x44>
 8002272:	bf00      	nop
 8002274:	200000a4 	.word	0x200000a4
 8002278:	2000013c 	.word	0x2000013c
 800227c:	200000f0 	.word	0x200000f0
 8002280:	2000007c 	.word	0x2000007c
 8002284:	2000002c 	.word	0x2000002c

08002288 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b096      	sub	sp, #88	; 0x58
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002292:	2228      	movs	r2, #40	; 0x28
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f005 ff94 	bl	80081c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022bc:	2301      	movs	r3, #1
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ca:	2301      	movs	r3, #1
 80022cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ce:	2302      	movs	r3, #2
 80022d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fe16 	bl	8004f14 <HAL_RCC_OscConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80022f8:	f000 fae2 	bl	80028c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fc:	230f      	movs	r3, #15
 80022fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	2102      	movs	r1, #2
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fd03 	bl	8005d24 <HAL_RCC_ClockConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800232e:	f000 fac7 	bl	80028c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8002332:	f241 0381 	movw	r3, #4225	; 0x1081
 8002336:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002338:	2301      	movs	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800233c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002340:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	4618      	mov	r0, r3
 800234a:	f003 ff23 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800235e:	f000 faaf 	bl	80028c0 <Error_Handler>
  }
}
 8002362:	bf00      	nop
 8002364:	3758      	adds	r7, #88	; 0x58
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002372:	463b      	mov	r3, r7
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
 8002380:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <_ZL12MX_ADC2_Initv+0xcc>)
 8002386:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 800238a:	2200      	movs	r2, #0
 800238c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 800239c:	2201      	movs	r2, #1
 800239e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023bc:	2201      	movs	r2, #1
 80023be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023ca:	2204      	movs	r2, #4
 80023cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023da:	4816      	ldr	r0, [pc, #88]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 80023dc:	f000 fd0c 	bl	8002df8 <HAL_ADC_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80023f0:	f000 fa66 	bl	80028c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002400:	2303      	movs	r3, #3
 8002402:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4808      	ldr	r0, [pc, #32]	; (8002434 <_ZL12MX_ADC2_Initv+0xc8>)
 8002412:	f001 f83d 	bl	8003490 <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 8002426:	f000 fa4b 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000002c 	.word	0x2000002c
 8002438:	50000100 	.word	0x50000100

0800243c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002442:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <_ZL11MX_CAN_Initv+0x74>)
 8002444:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002448:	2204      	movs	r2, #4
 800244a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 800245a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800245e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002462:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002466:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 800246a:	2200      	movs	r2, #0
 800246c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002470:	2201      	movs	r2, #1
 8002472:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002476:	2201      	movs	r2, #1
 8002478:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 800247c:	2201      	movs	r2, #1
 800247e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002482:	2200      	movs	r2, #0
 8002484:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 8002488:	2200      	movs	r2, #0
 800248a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <_ZL11MX_CAN_Initv+0x70>)
 800248e:	f001 fc41 	bl	8003d14 <HAL_CAN_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80024a2:	f000 fa0d 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000007c 	.word	0x2000007c
 80024b0:	40006400 	.word	0x40006400

080024b4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <_ZL12MX_TIM1_Initv+0xc0>)
 80024d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024e6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80024ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fe:	481c      	ldr	r0, [pc, #112]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 8002500:	f003 ff6e 	bl	80063e0 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002514:	f000 f9d4 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4619      	mov	r1, r3
 8002524:	4812      	ldr	r0, [pc, #72]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 8002526:	f004 fd99 	bl	800705c <HAL_TIM_ConfigClockSource>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800253a:	f000 f9c1 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <_ZL12MX_TIM1_Initv+0xbc>)
 8002550:	f005 fa54 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002564:	f000 f9ac 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200000a4 	.word	0x200000a4
 8002574:	40012c00 	.word	0x40012c00

08002578 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f005 fe1c 	bl	80081c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	463b      	mov	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 8002598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800259c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025be:	2303      	movs	r3, #3
 80025c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025c6:	2301      	movs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4619      	mov	r1, r3
 80025e8:	4811      	ldr	r0, [pc, #68]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 80025ea:	f004 f929 	bl	8006840 <HAL_TIM_Encoder_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80025fe:	f000 f95f 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	4619      	mov	r1, r3
 800260e:	4808      	ldr	r0, [pc, #32]	; (8002630 <_ZL12MX_TIM2_Initv+0xb8>)
 8002610:	f005 f9f4 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002624:	f000 f94c 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200000f0 	.word	0x200000f0

08002634 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002654:	463b      	mov	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002668:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <_ZL12MX_TIM3_Initv+0x12c>)
 800266a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 800267a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800267e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800268c:	4833      	ldr	r0, [pc, #204]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 800268e:	f003 fea7 	bl	80063e0 <HAL_TIM_Base_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80026a2:	f000 f90d 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026b0:	4619      	mov	r1, r3
 80026b2:	482a      	ldr	r0, [pc, #168]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 80026b4:	f004 fcd2 	bl	800705c <HAL_TIM_ConfigClockSource>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80026c8:	f000 f8fa 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026cc:	4823      	ldr	r0, [pc, #140]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 80026ce:	f003 ff6a 	bl	80065a6 <HAL_TIM_PWM_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80026e2:	f000 f8ed 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4819      	ldr	r0, [pc, #100]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 80026f6:	f005 f981 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800270a:	f000 f8d9 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800270e:	2360      	movs	r3, #96	; 0x60
 8002710:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800271e:	463b      	mov	r3, r7
 8002720:	2208      	movs	r2, #8
 8002722:	4619      	mov	r1, r3
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002726:	f004 fb85 	bl	8006e34 <HAL_TIM_PWM_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 800273a:	f000 f8c1 	bl	80028c0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0208 	bic.w	r2, r2, #8
 800274c:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <_ZL12MX_TIM3_Initv+0x128>)
 8002750:	f000 f9ec 	bl	8002b2c <HAL_TIM_MspPostInit>

}
 8002754:	bf00      	nop
 8002756:	3738      	adds	r7, #56	; 0x38
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000013c 	.word	0x2000013c
 8002760:	40000400 	.word	0x40000400

08002764 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800276c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002770:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a6:	4807      	ldr	r0, [pc, #28]	; (80027c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80027a8:	f005 f9b4 	bl	8007b14 <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80027bc:	f000 f880 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000188 	.word	0x20000188
 80027c8:	40013800 	.word	0x40013800

080027cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027e2:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 80027e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ec:	6153      	str	r3, [r2, #20]
 80027ee:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	6153      	str	r3, [r2, #20]
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6153      	str	r3, [r2, #20]
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f002 fb57 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002836:	2200      	movs	r2, #0
 8002838:	2130      	movs	r1, #48	; 0x30
 800283a:	4820      	ldr	r0, [pc, #128]	; (80028bc <_ZL12MX_GPIO_Initv+0xf0>)
 800283c:	f002 fb52 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002840:	f240 730c 	movw	r3, #1804	; 0x70c
 8002844:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284a:	2301      	movs	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f002 f9ba 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002876:	f002 f9ab 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800287a:	2302      	movs	r3, #2
 800287c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002882:	2301      	movs	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	4619      	mov	r1, r3
 800288c:	480b      	ldr	r0, [pc, #44]	; (80028bc <_ZL12MX_GPIO_Initv+0xf0>)
 800288e:	f002 f99f 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002892:	2330      	movs	r3, #48	; 0x30
 8002894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4619      	mov	r1, r3
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <_ZL12MX_GPIO_Initv+0xf0>)
 80028aa:	f002 f991 	bl	8004bd0 <HAL_GPIO_Init>

}
 80028ae:	bf00      	nop
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	48000400 	.word	0x48000400

080028c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <Error_Handler+0x8>
	...

080028cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_MspInit+0x44>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_MspInit+0x44>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6193      	str	r3, [r2, #24]
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_MspInit+0x44>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_MspInit+0x44>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_MspInit+0x44>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_MspInit+0x44>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_ADC_MspInit+0x74>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d124      	bne.n	8002980 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_ADC_MspInit+0x78>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_ADC_MspInit+0x78>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002940:	6153      	str	r3, [r2, #20]
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_ADC_MspInit+0x78>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_ADC_MspInit+0x78>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_ADC_MspInit+0x78>)
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	6153      	str	r3, [r2, #20]
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_ADC_MspInit+0x78>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002966:	2320      	movs	r3, #32
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800296a:	2303      	movs	r3, #3
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f002 f928 	bl	8004bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	50000100 	.word	0x50000100
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_CAN_MspInit+0xa0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d139      	bne.n	8002a26 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6153      	str	r3, [r2, #20]
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_CAN_MspInit+0xa4>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80029f4:	2309      	movs	r3, #9
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f002 f8e5 	bl	8004bd0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 2, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2102      	movs	r1, #2
 8002a0a:	2014      	movs	r0, #20
 8002a0c:	f002 f8a9 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8002a10:	2014      	movs	r0, #20
 8002a12:	f002 f8c2 	bl	8004b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 3, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2103      	movs	r1, #3
 8002a1a:	2015      	movs	r0, #21
 8002a1c:	f002 f8a1 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8002a20:	2015      	movs	r0, #21
 8002a22:	f002 f8ba 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40006400 	.word	0x40006400
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_TIM_Base_MspInit+0x68>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d114      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a54:	6193      	str	r3, [r2, #24]
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2104      	movs	r1, #4
 8002a66:	2019      	movs	r0, #25
 8002a68:	f002 f87b 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a6c:	2019      	movs	r0, #25
 8002a6e:	f002 f894 	bl	8004b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a72:	e010      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_TIM_Base_MspInit+0x70>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	61d3      	str	r3, [r2, #28]
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d128      	bne.n	8002b20 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	61d3      	str	r3, [r2, #28]
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	6153      	str	r3, [r2, #20]
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002afe:	2303      	movs	r3, #3
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1c:	f002 f858 	bl	8004bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b20:	bf00      	nop
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_TIM_MspPostInit+0x64>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d11b      	bne.n	8002b86 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_TIM_MspPostInit+0x68>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <HAL_TIM_MspPostInit+0x68>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6153      	str	r3, [r2, #20]
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_TIM_MspPostInit+0x68>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b66:	2301      	movs	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <HAL_TIM_MspPostInit+0x6c>)
 8002b82:	f002 f825 	bl	8004bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40021000 	.word	0x40021000
 8002b98:	48000400 	.word	0x48000400

08002b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_UART_MspInit+0x7c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d127      	bne.n	8002c0e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6193      	str	r3, [r2, #24]
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6153      	str	r3, [r2, #20]
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_UART_MspInit+0x80>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bfe:	2307      	movs	r3, #7
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4805      	ldr	r0, [pc, #20]	; (8002c20 <HAL_UART_MspInit+0x84>)
 8002c0a:	f001 ffe1 	bl	8004bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	48000400 	.word	0x48000400

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <NMI_Handler+0x4>

08002c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <MemManage_Handler+0x4>

08002c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <BusFault_Handler+0x4>

08002c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <UsageFault_Handler+0x4>

08002c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c70:	f000 f8a2 	bl	8002db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <CAN_RX0_IRQHandler+0x10>)
 8002c7e:	f001 fc65 	bl	800454c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000007c 	.word	0x2000007c

08002c8c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <CAN_RX1_IRQHandler+0x10>)
 8002c92:	f001 fc5b 	bl	800454c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000007c 	.word	0x2000007c

08002ca0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ca6:	f003 ffa6 	bl	8006bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200000a4 	.word	0x200000a4

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <SystemInit+0x20>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <SystemInit+0x20>)
 8002cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cdc:	480d      	ldr	r0, [pc, #52]	; (8002d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cde:	490e      	ldr	r1, [pc, #56]	; (8002d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <LoopForever+0xe>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf4:	4c0b      	ldr	r4, [pc, #44]	; (8002d24 <LoopForever+0x16>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d02:	f7ff ffd7 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d06:	f005 fa39 	bl	800817c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d0a:	f7ff fa8f 	bl	800222c <main>

08002d0e <LoopForever>:

LoopForever:
    b LoopForever
 8002d0e:	e7fe      	b.n	8002d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d1c:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8002d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d24:	20000210 	.word	0x20000210

08002d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d28:	e7fe      	b.n	8002d28 <ADC1_2_IRQHandler>
	...

08002d2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_Init+0x28>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_Init+0x28>)
 8002d36:	f043 0310 	orr.w	r3, r3, #16
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f001 ff05 	bl	8004b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d42:	200f      	movs	r0, #15
 8002d44:	f000 f808 	bl	8002d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d48:	f7ff fdc0 	bl	80028cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40022000 	.word	0x40022000

08002d58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x54>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_InitTick+0x58>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 ff1d 	bl	8004bb6 <HAL_SYSTICK_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00e      	b.n	8002da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d80a      	bhi.n	8002da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f001 fee5 	bl	8004b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_InitTick+0x5c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x20>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_IncTick+0x24>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_IncTick+0x24>)
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	2000020c 	.word	0x2000020c

08002de0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_GetTick+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	2000020c 	.word	0x2000020c

08002df8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09a      	sub	sp, #104	; 0x68
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e172      	b.n	80030fe <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d176      	bne.n	8002f18 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d152      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fd61 	bl	8002914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13b      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fe3b 	bl	8003adc <ADC_Disable>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12f      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
 8002e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d12b      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	f043 0202 	orr.w	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eb2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <HAL_ADC_Init+0x310>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a94      	ldr	r2, [pc, #592]	; (800310c <HAL_ADC_Init+0x314>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9a      	lsrs	r2, r3, #18
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef4:	d110      	bne.n	8002f18 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f023 0312 	bic.w	r3, r3, #18
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 80df 	bne.w	80030e4 <HAL_ADC_Init+0x2ec>
 8002f26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80da 	bne.w	80030e4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 80d2 	bne.w	80030e4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f48:	f043 0202 	orr.w	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f50:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_ADC_Init+0x318>)
 8002f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f5c:	d102      	bne.n	8002f64 <HAL_ADC_Init+0x16c>
 8002f5e:	4b6d      	ldr	r3, [pc, #436]	; (8003114 <HAL_ADC_Init+0x31c>)
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_Init+0x172>
 8002f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_ADC_Init+0x192>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x192>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_Init+0x194>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11c      	bne.n	8002fca <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_ADC_Init+0x1bc>
 8002fb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7e5b      	ldrb	r3, [r3, #25]
 8002fce:	035b      	lsls	r3, r3, #13
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd4:	2a01      	cmp	r2, #1
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Init+0x1e6>
 8002fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_Init+0x1e8>
 8002fde:	2200      	movs	r2, #0
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d11b      	bne.n	8003036 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7e5b      	ldrb	r3, [r3, #25]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	3b01      	subs	r3, #1
 800300c:	045a      	lsls	r2, r3, #17
 800300e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003010:	4313      	orrs	r3, r2
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
 8003018:	e00d      	b.n	8003036 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b01      	cmp	r3, #1
 800303c:	d007      	beq.n	800304e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4313      	orrs	r3, r2
 8003048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800304a:	4313      	orrs	r3, r2
 800304c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	d114      	bne.n	8003086 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7e1b      	ldrb	r3, [r3, #24]
 8003074:	039a      	lsls	r2, r3, #14
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4313      	orrs	r3, r2
 8003080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003082:	4313      	orrs	r3, r2
 8003084:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_ADC_Init+0x320>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f023 010f 	bic.w	r1, r3, #15
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ba:	e007      	b.n	80030cc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 020f 	bic.w	r2, r2, #15
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
 80030e2:	e00a      	b.n	80030fa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f023 0312 	bic.w	r3, r3, #18
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80030fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3768      	adds	r7, #104	; 0x68
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000
 800310c:	431bde83 	.word	0x431bde83
 8003110:	50000300 	.word	0x50000300
 8003114:	50000100 	.word	0x50000100
 8003118:	fff0c007 	.word	0xfff0c007

0800311c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 809c 	bne.w	8003270 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Start+0x2a>
 8003142:	2302      	movs	r3, #2
 8003144:	e097      	b.n	8003276 <HAL_ADC_Start+0x15a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fc60 	bl	8003a14 <ADC_Enable>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8083 	bne.w	8003266 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <HAL_ADC_Start+0x164>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_ADC_Start+0x6e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003188:	d115      	bne.n	80031b6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d027      	beq.n	80031f4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031b4:	e01e      	b.n	80031f4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Start+0xba>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <HAL_ADC_Start+0x168>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10e      	bne.n	80031f4 <HAL_ADC_Start+0xd8>
 80031d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d106      	bne.n	8003210 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f023 0206 	bic.w	r2, r3, #6
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
 800320e:	e002      	b.n	8003216 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	221c      	movs	r2, #28
 8003224:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_ADC_Start+0x164>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_ADC_Start+0x138>
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_ADC_Start+0x164>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2b05      	cmp	r3, #5
 800323c:	d00a      	beq.n	8003254 <HAL_ADC_Start+0x138>
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_ADC_Start+0x164>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b09      	cmp	r3, #9
 8003248:	d004      	beq.n	8003254 <HAL_ADC_Start+0x138>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d10f      	bne.n	8003274 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0204 	orr.w	r2, r2, #4
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e006      	b.n	8003274 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800326e:	e001      	b.n	8003274 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003270:	2302      	movs	r3, #2
 8003272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	50000300 	.word	0x50000300
 8003284:	50000100 	.word	0x50000100

08003288 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Stop+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e023      	b.n	80032ea <HAL_ADC_Stop+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032aa:	216c      	movs	r1, #108	; 0x6c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fc7b 	bl	8003ba8 <ADC_ConversionStop>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fc0d 	bl	8003adc <ADC_Disable>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b08      	cmp	r3, #8
 8003308:	d102      	bne.n	8003310 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800330a:	2308      	movs	r3, #8
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e02e      	b.n	800336e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_ADC_PollForConversion+0x198>)
 8003312:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11d      	bne.n	800336a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09d      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e08b      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800336a:	230c      	movs	r3, #12
 800336c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_ADC_PollForConversion+0x198>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_ADC_PollForConversion+0x90>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003382:	d104      	bne.n	800338e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e003      	b.n	8003396 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800338e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003396:	f7ff fd23 	bl	8002de0 <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800339c:	e021      	b.n	80033e2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d01d      	beq.n	80033e2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_ADC_PollForConversion+0xc8>
 80033ac:	f7ff fd18 	bl	8002de0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d212      	bcs.n	80033e2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0d6      	beq.n	800339e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003406:	2b00      	cmp	r3, #0
 8003408:	d131      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003410:	2b00      	cmp	r3, #0
 8003412:	d12c      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d125      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d112      	bne.n	8003456 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d112      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
 8003454:	e00b      	b.n	800346e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	50000300 	.word	0x50000300

08003490 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b09b      	sub	sp, #108	; 0x6c
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x22>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e2a5      	b.n	80039fe <HAL_ADC_ConfigChannel+0x56e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 8289 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d81c      	bhi.n	800350c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	461a      	mov	r2, r3
 80034e6:	231f      	movs	r3, #31
 80034e8:	4093      	lsls	r3, r2
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4019      	ands	r1, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
 800350a:	e063      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d81e      	bhi.n	8003552 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	3b1e      	subs	r3, #30
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	4019      	ands	r1, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	3b1e      	subs	r3, #30
 8003544:	fa00 f203 	lsl.w	r2, r0, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	635a      	str	r2, [r3, #52]	; 0x34
 8003550:	e040      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b0e      	cmp	r3, #14
 8003558:	d81e      	bhi.n	8003598 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	3b3c      	subs	r3, #60	; 0x3c
 800356e:	221f      	movs	r2, #31
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	4019      	ands	r1, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	3b3c      	subs	r3, #60	; 0x3c
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
 8003596:	e01d      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	3b5a      	subs	r3, #90	; 0x5a
 80035ac:	221f      	movs	r2, #31
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4019      	ands	r1, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	3b5a      	subs	r3, #90	; 0x5a
 80035c8:	fa00 f203 	lsl.w	r2, r0, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 80e5 	bne.w	80037ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d91c      	bls.n	8003626 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	3b1e      	subs	r3, #30
 80035fe:	2207      	movs	r2, #7
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	4019      	ands	r1, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6898      	ldr	r0, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	3b1e      	subs	r3, #30
 8003618:	fa00 f203 	lsl.w	r2, r0, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	619a      	str	r2, [r3, #24]
 8003624:	e019      	b.n	800365a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6959      	ldr	r1, [r3, #20]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	2207      	movs	r2, #7
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	4019      	ands	r1, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6898      	ldr	r0, [r3, #8]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	08db      	lsrs	r3, r3, #3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b03      	cmp	r3, #3
 800367a:	d84f      	bhi.n	800371c <HAL_ADC_ConfigChannel+0x28c>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <HAL_ADC_ConfigChannel+0x1f4>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036b7 	.word	0x080036b7
 800368c:	080036d9 	.word	0x080036d9
 8003690:	080036fb 	.word	0x080036fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800369a:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <HAL_ADC_ConfigChannel+0x484>)
 800369c:	4013      	ands	r3, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	0691      	lsls	r1, r2, #26
 80036a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a6:	430a      	orrs	r2, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036b4:	e07e      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036bc:	4b95      	ldr	r3, [pc, #596]	; (8003914 <HAL_ADC_ConfigChannel+0x484>)
 80036be:	4013      	ands	r3, r2
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	0691      	lsls	r1, r2, #26
 80036c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036c8:	430a      	orrs	r2, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036d6:	e06d      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036de:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <HAL_ADC_ConfigChannel+0x484>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	0691      	lsls	r1, r2, #26
 80036e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ea:	430a      	orrs	r2, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036f8:	e05c      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003700:	4b84      	ldr	r3, [pc, #528]	; (8003914 <HAL_ADC_ConfigChannel+0x484>)
 8003702:	4013      	ands	r3, r2
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	0691      	lsls	r1, r2, #26
 800370a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800370c:	430a      	orrs	r2, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003718:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800371a:	e04b      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	069b      	lsls	r3, r3, #26
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800373e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	069b      	lsls	r3, r3, #26
 8003750:	429a      	cmp	r2, r3
 8003752:	d107      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003762:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800376a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	069b      	lsls	r3, r3, #26
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003786:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	069b      	lsls	r3, r3, #26
 8003798:	429a      	cmp	r2, r3
 800379a:	d10a      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80037ac:	e001      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80037b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x344>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x344>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x346>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 810b 	bne.w	80039f2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d00f      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003802:	e049      	b.n	8003898 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b09      	cmp	r3, #9
 8003824:	d91c      	bls.n	8003860 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6999      	ldr	r1, [r3, #24]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	3b1b      	subs	r3, #27
 8003838:	2207      	movs	r2, #7
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	4019      	ands	r1, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6898      	ldr	r0, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	3b1b      	subs	r3, #27
 8003852:	fa00 f203 	lsl.w	r2, r0, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e01b      	b.n	8003898 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6959      	ldr	r1, [r3, #20]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	2207      	movs	r2, #7
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	4019      	ands	r1, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6898      	ldr	r0, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	fa00 f203 	lsl.w	r2, r0, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <HAL_ADC_ConfigChannel+0x488>)
 800389a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d105      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038b4:	2b11      	cmp	r3, #17
 80038b6:	d105      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038c8:	2b12      	cmp	r3, #18
 80038ca:	f040 8092 	bne.w	80039f2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 808b 	bne.w	80039f2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e4:	d102      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x45c>
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_ADC_ConfigChannel+0x48c>)
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e002      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x462>
 80038ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10f      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x490>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d108      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x490>
 800390e:	2301      	movs	r3, #1
 8003910:	e007      	b.n	8003922 <HAL_ADC_ConfigChannel+0x492>
 8003912:	bf00      	nop
 8003914:	83fff000 	.word	0x83fff000
 8003918:	50000300 	.word	0x50000300
 800391c:	50000100 	.word	0x50000100
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d150      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003926:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x4b8>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x4b8>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_ADC_ConfigChannel+0x4ba>
 8003948:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13c      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b10      	cmp	r3, #16
 8003954:	d11d      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x502>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800395e:	d118      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_ADC_ConfigChannel+0x57c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_ConfigChannel+0x580>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0c9a      	lsrs	r2, r3, #18
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003982:	e002      	b.n	800398a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3b01      	subs	r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f9      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003990:	e02e      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b11      	cmp	r3, #17
 8003998:	d10b      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x522>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a2:	d106      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80039a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039b0:	e01e      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b12      	cmp	r3, #18
 80039b8:	d11a      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80039ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039c6:	e013      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039da:	e00a      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	376c      	adds	r7, #108	; 0x6c
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	431bde83 	.word	0x431bde83

08003a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <ADC_Enable+0x2c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <ADC_Enable+0x2c>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <ADC_Enable+0x2e>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d143      	bne.n	8003ace <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <ADC_Enable+0xc4>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f043 0210 	orr.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e02f      	b.n	8003ad0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003a80:	f7ff f9ae 	bl	8002de0 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a86:	e01b      	b.n	8003ac0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a88:	f7ff f9aa 	bl	8002de0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d914      	bls.n	8003ac0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d00d      	beq.n	8003ac0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f043 0210 	orr.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d1dc      	bne.n	8003a88 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	8000003f 	.word	0x8000003f

08003adc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d108      	bne.n	8003b08 <ADC_Disable+0x2c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <ADC_Disable+0x2c>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <ADC_Disable+0x2e>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d047      	beq.n	8003b9e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030d 	and.w	r3, r3, #13
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10f      	bne.n	8003b3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0202 	orr.w	r2, r2, #2
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2203      	movs	r2, #3
 8003b32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b34:	f7ff f954 	bl	8002de0 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b3a:	e029      	b.n	8003b90 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e023      	b.n	8003ba0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b58:	f7ff f942 	bl	8002de0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d914      	bls.n	8003b90 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10d      	bne.n	8003b90 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e007      	b.n	8003ba0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d0dc      	beq.n	8003b58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 809b 	beq.w	8003d04 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bdc:	d12a      	bne.n	8003c34 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d126      	bne.n	8003c34 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d122      	bne.n	8003c34 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003bee:	230c      	movs	r3, #12
 8003bf0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003bf2:	e014      	b.n	8003c1e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <ADC_ConversionStop+0x168>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d90d      	bls.n	8003c18 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0210 	orr.w	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e076      	b.n	8003d06 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d1e3      	bne.n	8003bf4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d015      	beq.n	8003c66 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d10e      	bne.n	8003c66 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0210 	orr.w	r2, r2, #16
 8003c64:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d015      	beq.n	8003c98 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d10e      	bne.n	8003c98 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0220 	orr.w	r2, r2, #32
 8003c96:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b60      	cmp	r3, #96	; 0x60
 8003c9c:	d005      	beq.n	8003caa <ADC_ConversionStop+0x102>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b6c      	cmp	r3, #108	; 0x6c
 8003ca2:	d105      	bne.n	8003cb0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	617b      	str	r3, [r7, #20]
        break;
 8003ca8:	e005      	b.n	8003cb6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003caa:	2308      	movs	r3, #8
 8003cac:	617b      	str	r3, [r7, #20]
        break;
 8003cae:	e002      	b.n	8003cb6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	617b      	str	r3, [r7, #20]
        break;
 8003cb4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cb6:	f7ff f893 	bl	8002de0 <HAL_GetTick>
 8003cba:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003cbc:	e01b      	b.n	8003cf6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cbe:	f7ff f88f 	bl	8002de0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b0b      	cmp	r3, #11
 8003cca:	d914      	bls.n	8003cf6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e007      	b.n	8003d06 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1dc      	bne.n	8003cbe <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000993ff 	.word	0x000993ff

08003d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0ed      	b.n	8003f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe fe2c 	bl	8002990 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d48:	f7ff f84a 	bl	8002de0 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d4e:	e012      	b.n	8003d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d50:	f7ff f846 	bl	8002de0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b0a      	cmp	r3, #10
 8003d5c:	d90b      	bls.n	8003d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0c5      	b.n	8003f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0e5      	beq.n	8003d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0202 	bic.w	r2, r2, #2
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d94:	f7ff f824 	bl	8002de0 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d9a:	e012      	b.n	8003dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d9c:	f7ff f820 	bl	8002de0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b0a      	cmp	r3, #10
 8003da8:	d90b      	bls.n	8003dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2205      	movs	r2, #5
 8003dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e09f      	b.n	8003f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7e1b      	ldrb	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d108      	bne.n	8003dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e007      	b.n	8003dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7e5b      	ldrb	r3, [r3, #25]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e007      	b.n	8003e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7e9b      	ldrb	r3, [r3, #26]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d108      	bne.n	8003e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0220 	orr.w	r2, r2, #32
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e007      	b.n	8003e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0220 	bic.w	r2, r2, #32
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7edb      	ldrb	r3, [r3, #27]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d108      	bne.n	8003e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0210 	bic.w	r2, r2, #16
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e007      	b.n	8003e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0210 	orr.w	r2, r2, #16
 8003e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7f1b      	ldrb	r3, [r3, #28]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0208 	orr.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0208 	bic.w	r2, r2, #8
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7f5b      	ldrb	r3, [r3, #29]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0204 	orr.w	r2, r2, #4
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e007      	b.n	8003ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	ea42 0103 	orr.w	r1, r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d003      	beq.n	8003f30 <HAL_CAN_ConfigFilter+0x26>
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f040 80aa 	bne.w	8004084 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2201      	movs	r2, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d123      	bne.n	8003fb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	401a      	ands	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3248      	adds	r2, #72	; 0x48
 8003f92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fa6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	3348      	adds	r3, #72	; 0x48
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d122      	bne.n	8004000 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3248      	adds	r2, #72	; 0x48
 8003fe0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ff4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	3348      	adds	r3, #72	; 0x48
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800401a:	e007      	b.n	800402c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	431a      	orrs	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	401a      	ands	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004046:	e007      	b.n	8004058 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	431a      	orrs	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	431a      	orrs	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e006      	b.n	8004092 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d12e      	bne.n	8004110 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ca:	f7fe fe89 	bl	8002de0 <HAL_GetTick>
 80040ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040d0:	e012      	b.n	80040f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d2:	f7fe fe85 	bl	8002de0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b0a      	cmp	r3, #10
 80040de:	d90b      	bls.n	80040f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2205      	movs	r2, #5
 80040f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e012      	b.n	800411e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e006      	b.n	800411e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004126:	b480      	push	{r7}
 8004128:	b089      	sub	sp, #36	; 0x24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004144:	7ffb      	ldrb	r3, [r7, #31]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d003      	beq.n	8004152 <HAL_CAN_AddTxMessage+0x2c>
 800414a:	7ffb      	ldrb	r3, [r7, #31]
 800414c:	2b02      	cmp	r3, #2
 800414e:	f040 80b8 	bne.w	80042c2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004162:	2b00      	cmp	r3, #0
 8004164:	d105      	bne.n	8004172 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a0 	beq.w	80042b2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d907      	bls.n	8004192 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e09e      	b.n	80042d0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004192:	2201      	movs	r2, #1
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	6809      	ldr	r1, [r1, #0]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3318      	adds	r3, #24
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	440b      	add	r3, r1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e00f      	b.n	80041e0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041ca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80041d4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3318      	adds	r3, #24
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	440b      	add	r3, r1
 80041de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3318      	adds	r3, #24
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	440b      	add	r3, r1
 80041f0:	3304      	adds	r3, #4
 80041f2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	7d1b      	ldrb	r3, [r3, #20]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d111      	bne.n	8004220 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3318      	adds	r3, #24
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6811      	ldr	r1, [r2, #0]
 8004210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3318      	adds	r3, #24
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	440b      	add	r3, r1
 800421c:	3304      	adds	r3, #4
 800421e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3307      	adds	r3, #7
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	061a      	lsls	r2, r3, #24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3306      	adds	r3, #6
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	041b      	lsls	r3, r3, #16
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3305      	adds	r3, #5
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	4313      	orrs	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	3204      	adds	r2, #4
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	4610      	mov	r0, r2
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	ea43 0200 	orr.w	r2, r3, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	440b      	add	r3, r1
 8004252:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004256:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3303      	adds	r3, #3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	061a      	lsls	r2, r3, #24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3302      	adds	r3, #2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3301      	adds	r3, #1
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	4313      	orrs	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	4610      	mov	r0, r2
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	6811      	ldr	r1, [r2, #0]
 800427e:	ea43 0200 	orr.w	r2, r3, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	440b      	add	r3, r1
 8004288:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800428c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3318      	adds	r3, #24
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6811      	ldr	r1, [r2, #0]
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3318      	adds	r3, #24
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	440b      	add	r3, r1
 80042ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e00e      	b.n	80042d0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e006      	b.n	80042d0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3724      	adds	r7, #36	; 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d003      	beq.n	8004300 <HAL_CAN_GetRxMessage+0x24>
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f040 80f3 	bne.w	80044e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10e      	bne.n	8004324 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0e7      	b.n	80044f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0d8      	b.n	80044f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	331b      	adds	r3, #27
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0204 	and.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10c      	bne.n	800437a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	331b      	adds	r3, #27
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0d5b      	lsrs	r3, r3, #21
 8004370:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e00b      	b.n	8004392 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	331b      	adds	r3, #27
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	331b      	adds	r3, #27
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0202 	and.w	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	331b      	adds	r3, #27
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	331b      	adds	r3, #27
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	331b      	adds	r3, #27
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	3304      	adds	r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	4413      	add	r3, r2
 8004410:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0a1a      	lsrs	r2, r3, #8
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	4413      	add	r3, r2
 800442a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0c1a      	lsrs	r2, r3, #16
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	3302      	adds	r3, #2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	0e1a      	lsrs	r2, r3, #24
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	3303      	adds	r3, #3
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	4413      	add	r3, r2
 800445e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3304      	adds	r3, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	4413      	add	r3, r2
 8004476:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0a1a      	lsrs	r2, r3, #8
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3305      	adds	r3, #5
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4413      	add	r3, r2
 8004490:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0c1a      	lsrs	r2, r3, #16
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	3306      	adds	r3, #6
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0e1a      	lsrs	r2, r3, #24
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	3307      	adds	r3, #7
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0220 	orr.w	r2, r2, #32
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	e007      	b.n	80044e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0220 	orr.w	r2, r2, #32
 80044e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e006      	b.n	80044f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004510:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d002      	beq.n	800451e <HAL_CAN_ActivateNotification+0x1e>
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d109      	bne.n	8004532 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6959      	ldr	r1, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e006      	b.n	8004540 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d07c      	beq.n	800468c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f983 	bl	80048ba <HAL_CAN_TxMailbox0CompleteCallback>
 80045b4:	e016      	b.n	80045e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e00c      	b.n	80045e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	e002      	b.n	80045e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f989 	bl	80048f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d024      	beq.n	8004638 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f963 	bl	80048ce <HAL_CAN_TxMailbox1CompleteCallback>
 8004608:	e016      	b.n	8004638 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e00c      	b.n	8004638 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e002      	b.n	8004638 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f969 	bl	800490a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d024      	beq.n	800468c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800464a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f943 	bl	80048e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800465c:	e016      	b.n	800468c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e00c      	b.n	800468c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
 8004684:	e002      	b.n	800468c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f949 	bl	800491e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2210      	movs	r2, #16
 80046ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2208      	movs	r2, #8
 80046ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f930 	bl	8004932 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc ff58 	bl	80015a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800470a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f912 	bl	800495a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8f9 	bl	8004946 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f8fc 	bl	800496e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2208      	movs	r2, #8
 8004790:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8f5 	bl	8004982 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d07b      	beq.n	800489a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d072      	beq.n	8004892 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	2b00      	cmp	r3, #0
 8004808:	d043      	beq.n	8004892 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	d03e      	beq.n	8004892 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800481a:	2b60      	cmp	r3, #96	; 0x60
 800481c:	d02b      	beq.n	8004876 <HAL_CAN_IRQHandler+0x32a>
 800481e:	2b60      	cmp	r3, #96	; 0x60
 8004820:	d82e      	bhi.n	8004880 <HAL_CAN_IRQHandler+0x334>
 8004822:	2b50      	cmp	r3, #80	; 0x50
 8004824:	d022      	beq.n	800486c <HAL_CAN_IRQHandler+0x320>
 8004826:	2b50      	cmp	r3, #80	; 0x50
 8004828:	d82a      	bhi.n	8004880 <HAL_CAN_IRQHandler+0x334>
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d019      	beq.n	8004862 <HAL_CAN_IRQHandler+0x316>
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d826      	bhi.n	8004880 <HAL_CAN_IRQHandler+0x334>
 8004832:	2b30      	cmp	r3, #48	; 0x30
 8004834:	d010      	beq.n	8004858 <HAL_CAN_IRQHandler+0x30c>
 8004836:	2b30      	cmp	r3, #48	; 0x30
 8004838:	d822      	bhi.n	8004880 <HAL_CAN_IRQHandler+0x334>
 800483a:	2b10      	cmp	r3, #16
 800483c:	d002      	beq.n	8004844 <HAL_CAN_IRQHandler+0x2f8>
 800483e:	2b20      	cmp	r3, #32
 8004840:	d005      	beq.n	800484e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004842:	e01d      	b.n	8004880 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f043 0308 	orr.w	r3, r3, #8
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800484c:	e019      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f043 0310 	orr.w	r3, r3, #16
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004856:	e014      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f043 0320 	orr.w	r3, r3, #32
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004860:	e00f      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800486a:	e00a      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004874:	e005      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800487e:	e000      	b.n	8004882 <HAL_CAN_IRQHandler+0x336>
            break;
 8004880:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004890:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f872 	bl	8004996 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048b2:	bf00      	nop
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <__NVIC_SetPriorityGrouping+0x44>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c8:	4013      	ands	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049de:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <__NVIC_SetPriorityGrouping+0x44>)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	60d3      	str	r3, [r2, #12]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <__NVIC_GetPriorityGrouping+0x18>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	f003 0307 	and.w	r3, r3, #7
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	db0b      	blt.n	8004a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	f003 021f 	and.w	r2, r3, #31
 8004a28:	4907      	ldr	r1, [pc, #28]	; (8004a48 <__NVIC_EnableIRQ+0x38>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2001      	movs	r0, #1
 8004a32:	fa00 f202 	lsl.w	r2, r0, r2
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e100 	.word	0xe000e100

08004a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	db0a      	blt.n	8004a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	490c      	ldr	r1, [pc, #48]	; (8004a98 <__NVIC_SetPriority+0x4c>)
 8004a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a74:	e00a      	b.n	8004a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4908      	ldr	r1, [pc, #32]	; (8004a9c <__NVIC_SetPriority+0x50>)
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	3b04      	subs	r3, #4
 8004a84:	0112      	lsls	r2, r2, #4
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	440b      	add	r3, r1
 8004a8a:	761a      	strb	r2, [r3, #24]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000e100 	.word	0xe000e100
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f1c3 0307 	rsb	r3, r3, #7
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	bf28      	it	cs
 8004abe:	2304      	movcs	r3, #4
 8004ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d902      	bls.n	8004ad0 <NVIC_EncodePriority+0x30>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3b03      	subs	r3, #3
 8004ace:	e000      	b.n	8004ad2 <NVIC_EncodePriority+0x32>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	43d9      	mvns	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af8:	4313      	orrs	r3, r2
         );
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b18:	d301      	bcc.n	8004b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00f      	b.n	8004b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <SysTick_Config+0x40>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b26:	210f      	movs	r1, #15
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	f7ff ff8e 	bl	8004a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <SysTick_Config+0x40>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <SysTick_Config+0x40>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000e010 	.word	0xe000e010

08004b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ff29 	bl	80049ac <__NVIC_SetPriorityGrouping>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	4603      	mov	r3, r0
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b74:	f7ff ff3e 	bl	80049f4 <__NVIC_GetPriorityGrouping>
 8004b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	6978      	ldr	r0, [r7, #20]
 8004b80:	f7ff ff8e 	bl	8004aa0 <NVIC_EncodePriority>
 8004b84:	4602      	mov	r2, r0
 8004b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff5d 	bl	8004a4c <__NVIC_SetPriority>
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff31 	bl	8004a10 <__NVIC_EnableIRQ>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffa2 	bl	8004b08 <SysTick_Config>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bde:	e14e      	b.n	8004e7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8140 	beq.w	8004e78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x40>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	6939      	ldr	r1, [r7, #16]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 809a 	beq.w	8004e78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b55      	ldr	r3, [pc, #340]	; (8004e9c <HAL_GPIO_Init+0x2cc>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	4a54      	ldr	r2, [pc, #336]	; (8004e9c <HAL_GPIO_Init+0x2cc>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6193      	str	r3, [r2, #24]
 8004d50:	4b52      	ldr	r3, [pc, #328]	; (8004e9c <HAL_GPIO_Init+0x2cc>)
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d5c:	4a50      	ldr	r2, [pc, #320]	; (8004ea0 <HAL_GPIO_Init+0x2d0>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	3302      	adds	r3, #2
 8004d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	220f      	movs	r2, #15
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d86:	d013      	beq.n	8004db0 <HAL_GPIO_Init+0x1e0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <HAL_GPIO_Init+0x2d4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00d      	beq.n	8004dac <HAL_GPIO_Init+0x1dc>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a45      	ldr	r2, [pc, #276]	; (8004ea8 <HAL_GPIO_Init+0x2d8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_Init+0x1d8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a44      	ldr	r2, [pc, #272]	; (8004eac <HAL_GPIO_Init+0x2dc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_GPIO_Init+0x1d4>
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <HAL_GPIO_Init+0x1e2>
 8004da4:	2305      	movs	r3, #5
 8004da6:	e004      	b.n	8004db2 <HAL_GPIO_Init+0x1e2>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e002      	b.n	8004db2 <HAL_GPIO_Init+0x1e2>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_GPIO_Init+0x1e2>
 8004db0:	2300      	movs	r3, #0
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	f002 0203 	and.w	r2, r2, #3
 8004db8:	0092      	lsls	r2, r2, #2
 8004dba:	4093      	lsls	r3, r2
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dc2:	4937      	ldr	r1, [pc, #220]	; (8004ea0 <HAL_GPIO_Init+0x2d0>)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004df4:	4a2e      	ldr	r2, [pc, #184]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e4e:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e72:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <HAL_GPIO_Init+0x2e0>)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f aea9 	bne.w	8004be0 <HAL_GPIO_Init+0x10>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	48000400 	.word	0x48000400
 8004ea8:	48000800 	.word	0x48000800
 8004eac:	48000c00 	.word	0x48000c00
 8004eb0:	40010400 	.word	0x40010400

08004eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e001      	b.n	8004ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	807b      	strh	r3, [r7, #2]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef4:	787b      	ldrb	r3, [r7, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f00:	e002      	b.n	8004f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f000 bef4 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 816a 	beq.w	8005212 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f3e:	4bb3      	ldr	r3, [pc, #716]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d00c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f4a:	4bb0      	ldr	r3, [pc, #704]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d159      	bne.n	800500a <HAL_RCC_OscConfig+0xf6>
 8004f56:	4bad      	ldr	r3, [pc, #692]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f62:	d152      	bne.n	800500a <HAL_RCC_OscConfig+0xf6>
 8004f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCC_OscConfig+0x82>
 8004f90:	4b9e      	ldr	r3, [pc, #632]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0xae>
 8004f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f9a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004fb2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004fbe:	4b93      	ldr	r3, [pc, #588]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fc6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004fca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fce:	fa92 f2a2 	rbit	r2, r2
 8004fd2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fd6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004fda:	fab2 f282 	clz	r2, r2
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	f042 0220 	orr.w	r2, r2, #32
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	f002 021f 	and.w	r2, r2, #31
 8004fea:	2101      	movs	r1, #1
 8004fec:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 810c 	beq.w	8005210 <HAL_RCC_OscConfig+0x2fc>
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 8106 	bne.w	8005210 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f000 be86 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d106      	bne.n	8005024 <HAL_RCC_OscConfig+0x110>
 8005016:	4b7d      	ldr	r3, [pc, #500]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7c      	ldr	r2, [pc, #496]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e030      	b.n	8005086 <HAL_RCC_OscConfig+0x172>
 8005024:	1d3b      	adds	r3, r7, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x134>
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a76      	ldr	r2, [pc, #472]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e01e      	b.n	8005086 <HAL_RCC_OscConfig+0x172>
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x15a>
 8005054:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6c      	ldr	r2, [pc, #432]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 800505a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a69      	ldr	r2, [pc, #420]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e00b      	b.n	8005086 <HAL_RCC_OscConfig+0x172>
 800506e:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a66      	ldr	r2, [pc, #408]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b64      	ldr	r3, [pc, #400]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a63      	ldr	r2, [pc, #396]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005086:	4b61      	ldr	r3, [pc, #388]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	495d      	ldr	r1, [pc, #372]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d059      	beq.n	8005158 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fd fe9c 	bl	8002de0 <HAL_GetTick>
 80050a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ae:	f7fd fe97 	bl	8002de0 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d902      	bls.n	80050c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	f000 be29 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
 80050c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80050d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <HAL_RCC_OscConfig+0x1e2>
 80050f0:	4b46      	ldr	r3, [pc, #280]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	e015      	b.n	8005122 <HAL_RCC_OscConfig+0x20e>
 80050f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800510a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800510e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005112:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800511e:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005126:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800512a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800512e:	fa92 f2a2 	rbit	r2, r2
 8005132:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005136:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800513a:	fab2 f282 	clz	r2, r2
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f042 0220 	orr.w	r2, r2, #32
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	f002 021f 	and.w	r2, r2, #31
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f202 	lsl.w	r2, r1, r2
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0ab      	beq.n	80050ae <HAL_RCC_OscConfig+0x19a>
 8005156:	e05c      	b.n	8005212 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd fe42 	bl	8002de0 <HAL_GetTick>
 800515c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005162:	f7fd fe3d 	bl	8002de0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d902      	bls.n	8005178 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	f000 bdcf 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
 8005178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800517c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800518c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d102      	bne.n	80051aa <HAL_RCC_OscConfig+0x296>
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x2c2>
 80051aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80051be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80051c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051ca:	fa93 f3a3 	rbit	r3, r3
 80051ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80051d2:	4b0e      	ldr	r3, [pc, #56]	; (800520c <HAL_RCC_OscConfig+0x2f8>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80051de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051e2:	fa92 f2a2 	rbit	r2, r2
 80051e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80051ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80051ee:	fab2 f282 	clz	r2, r2
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	f042 0220 	orr.w	r2, r2, #32
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f002 021f 	and.w	r2, r2, #31
 80051fe:	2101      	movs	r1, #1
 8005200:	fa01 f202 	lsl.w	r2, r1, r2
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ab      	bne.n	8005162 <HAL_RCC_OscConfig+0x24e>
 800520a:	e002      	b.n	8005212 <HAL_RCC_OscConfig+0x2fe>
 800520c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 816f 	beq.w	8005500 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005222:	4bd0      	ldr	r3, [pc, #832]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800522e:	4bcd      	ldr	r3, [pc, #820]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d16c      	bne.n	8005314 <HAL_RCC_OscConfig+0x400>
 800523a:	4bca      	ldr	r3, [pc, #808]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d166      	bne.n	8005314 <HAL_RCC_OscConfig+0x400>
 8005246:	2302      	movs	r3, #2
 8005248:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005258:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <HAL_RCC_OscConfig+0x362>
 8005270:	4bbc      	ldr	r3, [pc, #752]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	e013      	b.n	800529e <HAL_RCC_OscConfig+0x38a>
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005288:	2302      	movs	r3, #2
 800528a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800528e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005292:	fa93 f3a3 	rbit	r3, r3
 8005296:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800529a:	4bb2      	ldr	r3, [pc, #712]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2202      	movs	r2, #2
 80052a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80052a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052a8:	fa92 f2a2 	rbit	r2, r2
 80052ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80052b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80052b4:	fab2 f282 	clz	r2, r2
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f002 021f 	and.w	r2, r2, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_OscConfig+0x3cc>
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 bd1b 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	4ba0      	ldr	r3, [pc, #640]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	21f8      	movs	r1, #248	; 0xf8
 80052f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052f8:	fa91 f1a1 	rbit	r1, r1
 80052fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005300:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005304:	fab1 f181 	clz	r1, r1
 8005308:	b2c9      	uxtb	r1, r1
 800530a:	408b      	lsls	r3, r1
 800530c:	4995      	ldr	r1, [pc, #596]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	e0f5      	b.n	8005500 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8085 	beq.w	800542a <HAL_RCC_OscConfig+0x516>
 8005320:	2301      	movs	r3, #1
 8005322:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005332:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	461a      	mov	r2, r3
 8005348:	2301      	movs	r3, #1
 800534a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fd fd48 	bl	8002de0 <HAL_GetTick>
 8005350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005354:	e00a      	b.n	800536c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005356:	f7fd fd43 	bl	8002de0 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	f000 bcd5 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
 800536c:	2302      	movs	r3, #2
 800536e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800537e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_RCC_OscConfig+0x488>
 8005396:	4b73      	ldr	r3, [pc, #460]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e013      	b.n	80053c4 <HAL_RCC_OscConfig+0x4b0>
 800539c:	2302      	movs	r3, #2
 800539e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053ae:	2302      	movs	r3, #2
 80053b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80053c0:	4b68      	ldr	r3, [pc, #416]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2202      	movs	r2, #2
 80053c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80053ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053ce:	fa92 f2a2 	rbit	r2, r2
 80053d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80053d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80053da:	fab2 f282 	clz	r2, r2
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	f002 021f 	and.w	r2, r2, #31
 80053ea:	2101      	movs	r1, #1
 80053ec:	fa01 f202 	lsl.w	r2, r1, r2
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0af      	beq.n	8005356 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b5b      	ldr	r3, [pc, #364]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	21f8      	movs	r1, #248	; 0xf8
 8005406:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800540e:	fa91 f1a1 	rbit	r1, r1
 8005412:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005416:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800541a:	fab1 f181 	clz	r1, r1
 800541e:	b2c9      	uxtb	r1, r1
 8005420:	408b      	lsls	r3, r1
 8005422:	4950      	ldr	r1, [pc, #320]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e06a      	b.n	8005500 <HAL_RCC_OscConfig+0x5ec>
 800542a:	2301      	movs	r3, #1
 800542c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800543c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800544a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fd fcc3 	bl	8002de0 <HAL_GetTick>
 800545a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005460:	f7fd fcbe 	bl	8002de0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d902      	bls.n	8005476 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f000 bc50 	b.w	8005d16 <HAL_RCC_OscConfig+0xe02>
 8005476:	2302      	movs	r3, #2
 8005478:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <HAL_RCC_OscConfig+0x592>
 80054a0:	4b30      	ldr	r3, [pc, #192]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	e013      	b.n	80054ce <HAL_RCC_OscConfig+0x5ba>
 80054a6:	2302      	movs	r3, #2
 80054a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054b0:	fa93 f3a3 	rbit	r3, r3
 80054b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054b8:	2302      	movs	r3, #2
 80054ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054ca:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCC_OscConfig+0x650>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2202      	movs	r2, #2
 80054d0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80054d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054d8:	fa92 f2a2 	rbit	r2, r2
 80054dc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80054e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054e4:	fab2 f282 	clz	r2, r2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f042 0220 	orr.w	r2, r2, #32
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f002 021f 	and.w	r2, r2, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1af      	bne.n	8005460 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80da 	beq.w	80056c4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d069      	beq.n	80055ee <HAL_RCC_OscConfig+0x6da>
 800551a:	2301      	movs	r3, #1
 800551c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800552c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_OscConfig+0x654>)
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	461a      	mov	r2, r3
 8005540:	2301      	movs	r3, #1
 8005542:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005544:	f7fd fc4c 	bl	8002de0 <HAL_GetTick>
 8005548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fd fc47 	bl	8002de0 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d906      	bls.n	800556c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e3d9      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000
 8005568:	10908120 	.word	0x10908120
 800556c:	2302      	movs	r3, #2
 800556e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800557e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005582:	2202      	movs	r2, #2
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	fa93 f2a3 	rbit	r2, r3
 8005590:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800559a:	2202      	movs	r2, #2
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	fa93 f2a3 	rbit	r2, r3
 80055a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ae:	4ba5      	ldr	r3, [pc, #660]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80055b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055b6:	2102      	movs	r1, #2
 80055b8:	6019      	str	r1, [r3, #0]
 80055ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	fa93 f1a3 	rbit	r1, r3
 80055c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055c8:	6019      	str	r1, [r3, #0]
  return result;
 80055ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0b0      	beq.n	800554e <HAL_RCC_OscConfig+0x63a>
 80055ec:	e06a      	b.n	80056c4 <HAL_RCC_OscConfig+0x7b0>
 80055ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	fa93 f2a3 	rbit	r2, r3
 8005600:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005604:	601a      	str	r2, [r3, #0]
  return result;
 8005606:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800560a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	4b8c      	ldr	r3, [pc, #560]	; (8005848 <HAL_RCC_OscConfig+0x934>)
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005620:	f7fd fbde 	bl	8002de0 <HAL_GetTick>
 8005624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	e009      	b.n	800563e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562a:	f7fd fbd9 	bl	8002de0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e36b      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 800563e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005642:	2202      	movs	r2, #2
 8005644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	fa93 f2a3 	rbit	r2, r3
 8005650:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800565a:	2202      	movs	r2, #2
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	fa93 f2a3 	rbit	r2, r3
 8005668:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005672:	2202      	movs	r2, #2
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	fa93 f2a3 	rbit	r2, r3
 8005680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005684:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005686:	4b6f      	ldr	r3, [pc, #444]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 8005688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800568e:	2102      	movs	r1, #2
 8005690:	6019      	str	r1, [r3, #0]
 8005692:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	fa93 f1a3 	rbit	r1, r3
 800569c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80056a0:	6019      	str	r1, [r3, #0]
  return result;
 80056a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2101      	movs	r1, #1
 80056ba:	fa01 f303 	lsl.w	r3, r1, r3
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1b2      	bne.n	800562a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8158 	beq.w	8005984 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056da:	4b5a      	ldr	r3, [pc, #360]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d112      	bne.n	800570c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4b57      	ldr	r3, [pc, #348]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80056ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f0:	61d3      	str	r3, [r2, #28]
 80056f2:	4b54      	ldr	r3, [pc, #336]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	4b4f      	ldr	r3, [pc, #316]	; (800584c <HAL_RCC_OscConfig+0x938>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005718:	4b4c      	ldr	r3, [pc, #304]	; (800584c <HAL_RCC_OscConfig+0x938>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a4b      	ldr	r2, [pc, #300]	; (800584c <HAL_RCC_OscConfig+0x938>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005724:	f7fd fb5c 	bl	8002de0 <HAL_GetTick>
 8005728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	e009      	b.n	8005742 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fd fb57 	bl	8002de0 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e2e9      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x938>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ef      	beq.n	800572e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x852>
 8005758:	4b3a      	ldr	r3, [pc, #232]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	4a39      	ldr	r2, [pc, #228]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6213      	str	r3, [r2, #32]
 8005764:	e02f      	b.n	80057c6 <HAL_RCC_OscConfig+0x8b2>
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10c      	bne.n	800578a <HAL_RCC_OscConfig+0x876>
 8005770:	4b34      	ldr	r3, [pc, #208]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4a33      	ldr	r2, [pc, #204]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	6213      	str	r3, [r2, #32]
 800577c:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	4a30      	ldr	r2, [pc, #192]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 8005782:	f023 0304 	bic.w	r3, r3, #4
 8005786:	6213      	str	r3, [r2, #32]
 8005788:	e01d      	b.n	80057c6 <HAL_RCC_OscConfig+0x8b2>
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b05      	cmp	r3, #5
 8005792:	d10c      	bne.n	80057ae <HAL_RCC_OscConfig+0x89a>
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4a2a      	ldr	r2, [pc, #168]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	6213      	str	r3, [r2, #32]
 80057a0:	4b28      	ldr	r3, [pc, #160]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	4a27      	ldr	r2, [pc, #156]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6213      	str	r3, [r2, #32]
 80057ac:	e00b      	b.n	80057c6 <HAL_RCC_OscConfig+0x8b2>
 80057ae:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4a24      	ldr	r2, [pc, #144]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6213      	str	r3, [r2, #32]
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d06b      	beq.n	80058a8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d0:	f7fd fb06 	bl	8002de0 <HAL_GetTick>
 80057d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	e00b      	b.n	80057f2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fd fb01 	bl	8002de0 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e291      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 80057f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057f6:	2202      	movs	r2, #2
 80057f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	fa93 f2a3 	rbit	r2, r3
 8005804:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800580e:	2202      	movs	r2, #2
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	fa93 f2a3 	rbit	r2, r3
 800581c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005820:	601a      	str	r2, [r3, #0]
  return result;
 8005822:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	fab3 f383 	clz	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f043 0302 	orr.w	r3, r3, #2
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d109      	bne.n	8005850 <HAL_RCC_OscConfig+0x93c>
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <HAL_RCC_OscConfig+0x930>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	e014      	b.n	800586c <HAL_RCC_OscConfig+0x958>
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	10908120 	.word	0x10908120
 800584c:	40007000 	.word	0x40007000
 8005850:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005854:	2202      	movs	r2, #2
 8005856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005858:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	fa93 f2a3 	rbit	r2, r3
 8005862:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	4bbb      	ldr	r3, [pc, #748]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005870:	2102      	movs	r1, #2
 8005872:	6011      	str	r1, [r2, #0]
 8005874:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	fa92 f1a2 	rbit	r1, r2
 800587e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005882:	6011      	str	r1, [r2, #0]
  return result;
 8005884:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	fab2 f282 	clz	r2, r2
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	f002 021f 	and.w	r2, r2, #31
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f202 	lsl.w	r2, r1, r2
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d099      	beq.n	80057da <HAL_RCC_OscConfig+0x8c6>
 80058a6:	e063      	b.n	8005970 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a8:	f7fd fa9a 	bl	8002de0 <HAL_GetTick>
 80058ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b0:	e00b      	b.n	80058ca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fd fa95 	bl	8002de0 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e225      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 80058ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058ce:	2202      	movs	r2, #2
 80058d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	fa93 f2a3 	rbit	r2, r3
 80058dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058e6:	2202      	movs	r2, #2
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fa93 f2a3 	rbit	r2, r3
 80058f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058f8:	601a      	str	r2, [r3, #0]
  return result;
 80058fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005900:	fab3 f383 	clz	r3, r3
 8005904:	b2db      	uxtb	r3, r3
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d102      	bne.n	800591a <HAL_RCC_OscConfig+0xa06>
 8005914:	4b90      	ldr	r3, [pc, #576]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	e00d      	b.n	8005936 <HAL_RCC_OscConfig+0xa22>
 800591a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800591e:	2202      	movs	r2, #2
 8005920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	fa93 f2a3 	rbit	r2, r3
 800592c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	4b89      	ldr	r3, [pc, #548]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800593a:	2102      	movs	r1, #2
 800593c:	6011      	str	r1, [r2, #0]
 800593e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	fa92 f1a2 	rbit	r1, r2
 8005948:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800594c:	6011      	str	r1, [r2, #0]
  return result;
 800594e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	fab2 f282 	clz	r2, r2
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f002 021f 	and.w	r2, r2, #31
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f202 	lsl.w	r2, r1, r2
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1a0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005970:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005978:	4b77      	ldr	r3, [pc, #476]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	4a76      	ldr	r2, [pc, #472]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005982:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 81c2 	beq.w	8005d14 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005990:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b08      	cmp	r3, #8
 800599a:	f000 819c 	beq.w	8005cd6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	f040 8114 	bne.w	8005bd2 <HAL_RCC_OscConfig+0xcbe>
 80059aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80059ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	fa93 f2a3 	rbit	r2, r3
 80059be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059c2:	601a      	str	r2, [r3, #0]
  return result;
 80059c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fd f9fe 	bl	8002de0 <HAL_GetTick>
 80059e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e8:	e009      	b.n	80059fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd f9f9 	bl	8002de0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e18b      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 80059fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	fa93 f2a3 	rbit	r2, r3
 8005a12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a16:	601a      	str	r2, [r3, #0]
  return result;
 8005a18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a1e:	fab3 f383 	clz	r3, r3
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d102      	bne.n	8005a38 <HAL_RCC_OscConfig+0xb24>
 8005a32:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	e01b      	b.n	8005a70 <HAL_RCC_OscConfig+0xb5c>
 8005a38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	fa93 f2a3 	rbit	r2, r3
 8005a4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	fa93 f2a3 	rbit	r2, r3
 8005a66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	fa92 f1a2 	rbit	r1, r2
 8005a84:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a88:	6011      	str	r1, [r2, #0]
  return result;
 8005a8a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	fab2 f282 	clz	r2, r2
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f042 0220 	orr.w	r2, r2, #32
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	f002 021f 	and.w	r2, r2, #31
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d19e      	bne.n	80059ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	4925      	ldr	r1, [pc, #148]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fa93 f2a3 	rbit	r2, r3
 8005adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ae0:	601a      	str	r2, [r3, #0]
  return result;
 8005ae2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ae6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005af2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	461a      	mov	r2, r3
 8005afa:	2301      	movs	r3, #1
 8005afc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afe:	f7fd f96f 	bl	8002de0 <HAL_GetTick>
 8005b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b06:	e009      	b.n	8005b1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fd f96a 	bl	8002de0 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e0fc      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 8005b1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	fa93 f2a3 	rbit	r2, r3
 8005b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b34:	601a      	str	r2, [r3, #0]
  return result;
 8005b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b3c:	fab3 f383 	clz	r3, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <HAL_RCC_OscConfig+0xc48>
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <HAL_RCC_OscConfig+0xc44>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	e01e      	b.n	8005b94 <HAL_RCC_OscConfig+0xc80>
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fa93 f2a3 	rbit	r2, r3
 8005b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	fa93 f2a3 	rbit	r2, r3
 8005b8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	4b63      	ldr	r3, [pc, #396]	; (8005d20 <HAL_RCC_OscConfig+0xe0c>)
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	fa92 f1a2 	rbit	r1, r2
 8005ba8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005bac:	6011      	str	r1, [r2, #0]
  return result;
 8005bae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	fab2 f282 	clz	r2, r2
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	f042 0220 	orr.w	r2, r2, #32
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	f002 021f 	and.w	r2, r2, #31
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d09b      	beq.n	8005b08 <HAL_RCC_OscConfig+0xbf4>
 8005bd0:	e0a0      	b.n	8005d14 <HAL_RCC_OscConfig+0xe00>
 8005bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	fa93 f2a3 	rbit	r2, r3
 8005be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bea:	601a      	str	r2, [r3, #0]
  return result;
 8005bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fd f8ea 	bl	8002de0 <HAL_GetTick>
 8005c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c10:	e009      	b.n	8005c26 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fd f8e5 	bl	8002de0 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e077      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
 8005c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	fa93 f2a3 	rbit	r2, r3
 8005c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3e:	601a      	str	r2, [r3, #0]
  return result;
 8005c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c46:	fab3 f383 	clz	r3, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d102      	bne.n	8005c60 <HAL_RCC_OscConfig+0xd4c>
 8005c5a:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <HAL_RCC_OscConfig+0xe0c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	e01b      	b.n	8005c98 <HAL_RCC_OscConfig+0xd84>
 8005c60:	f107 0320 	add.w	r3, r7, #32
 8005c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	f107 0320 	add.w	r3, r7, #32
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	fa93 f2a3 	rbit	r2, r3
 8005c74:	f107 031c 	add.w	r3, r7, #28
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	f107 0318 	add.w	r3, r7, #24
 8005c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f107 0318 	add.w	r3, r7, #24
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	fa93 f2a3 	rbit	r2, r3
 8005c8e:	f107 0314 	add.w	r3, r7, #20
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <HAL_RCC_OscConfig+0xe0c>)
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f107 0210 	add.w	r2, r7, #16
 8005c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	f107 0210 	add.w	r2, r7, #16
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	fa92 f1a2 	rbit	r1, r2
 8005cac:	f107 020c 	add.w	r2, r7, #12
 8005cb0:	6011      	str	r1, [r2, #0]
  return result;
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	fab2 f282 	clz	r2, r2
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	f042 0220 	orr.w	r2, r2, #32
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	f002 021f 	and.w	r2, r2, #31
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f202 	lsl.w	r2, r1, r2
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d19e      	bne.n	8005c12 <HAL_RCC_OscConfig+0xcfe>
 8005cd4:	e01e      	b.n	8005d14 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e018      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <HAL_RCC_OscConfig+0xe0c>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d108      	bne.n	8005d10 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40021000 	.word	0x40021000

08005d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b09e      	sub	sp, #120	; 0x78
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e162      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b90      	ldr	r3, [pc, #576]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d910      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	498b      	ldr	r1, [pc, #556]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b89      	ldr	r3, [pc, #548]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e14a      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d78:	4b82      	ldr	r3, [pc, #520]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	497f      	ldr	r1, [pc, #508]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80dc 	beq.w	8005f50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d13c      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xf6>
 8005da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005da4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db0:	fab3 f383 	clz	r3, r3
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <HAL_RCC_ClockConfig+0xa6>
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	e00f      	b.n	8005dea <HAL_RCC_ClockConfig+0xc6>
 8005dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de0:	fa93 f3a3 	rbit	r3, r3
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dee:	65ba      	str	r2, [r7, #88]	; 0x58
 8005df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005df2:	fa92 f2a2 	rbit	r2, r2
 8005df6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dfa:	fab2 f282 	clz	r2, r2
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	f042 0220 	orr.w	r2, r2, #32
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	f002 021f 	and.w	r2, r2, #31
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d17b      	bne.n	8005f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0f3      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d13c      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x178>
 8005e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	fa93 f3a3 	rbit	r3, r3
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	fab3 f383 	clz	r3, r3
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x128>
 8005e46:	4b4f      	ldr	r3, [pc, #316]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	e00f      	b.n	8005e6c <HAL_RCC_ClockConfig+0x148>
 8005e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e54:	fa93 f3a3 	rbit	r3, r3
 8005e58:	647b      	str	r3, [r7, #68]	; 0x44
 8005e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	fa93 f3a3 	rbit	r3, r3
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	4b46      	ldr	r3, [pc, #280]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e70:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e74:	fa92 f2a2 	rbit	r2, r2
 8005e78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7c:	fab2 f282 	clz	r2, r2
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	f042 0220 	orr.w	r2, r2, #32
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	f002 021f 	and.w	r2, r2, #31
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d13a      	bne.n	8005f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0b2      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eaa:	fab3 f383 	clz	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x1a0>
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	e00d      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x1bc>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	61ba      	str	r2, [r7, #24]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	fa92 f2a2 	rbit	r2, r2
 8005eea:	617a      	str	r2, [r7, #20]
  return result;
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	fab2 f282 	clz	r2, r2
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	f042 0220 	orr.w	r2, r2, #32
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	f002 021f 	and.w	r2, r2, #31
 8005efe:	2101      	movs	r1, #1
 8005f00:	fa01 f202 	lsl.w	r2, r1, r2
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e079      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f023 0203 	bic.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	491a      	ldr	r1, [pc, #104]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f20:	f7fc ff5e 	bl	8002de0 <HAL_GetTick>
 8005f24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f28:	f7fc ff5a 	bl	8002de0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e061      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <HAL_RCC_ClockConfig+0x260>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 020c 	and.w	r2, r3, #12
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d1eb      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d214      	bcs.n	8005f88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 0207 	bic.w	r2, r3, #7
 8005f66:	4906      	ldr	r1, [pc, #24]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <HAL_RCC_ClockConfig+0x25c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e040      	b.n	8006002 <HAL_RCC_ClockConfig+0x2de>
 8005f80:	40022000 	.word	0x40022000
 8005f84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f94:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_RCC_ClockConfig+0x2e8>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	491a      	ldr	r1, [pc, #104]	; (800600c <HAL_RCC_ClockConfig+0x2e8>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <HAL_RCC_ClockConfig+0x2e8>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4912      	ldr	r1, [pc, #72]	; (800600c <HAL_RCC_ClockConfig+0x2e8>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005fc6:	f000 f829 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005fca:	4601      	mov	r1, r0
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <HAL_RCC_ClockConfig+0x2e8>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd4:	22f0      	movs	r2, #240	; 0xf0
 8005fd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	fa92 f2a2 	rbit	r2, r2
 8005fde:	60fa      	str	r2, [r7, #12]
  return result;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	fab2 f282 	clz	r2, r2
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	40d3      	lsrs	r3, r2
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <HAL_RCC_ClockConfig+0x2ec>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
 8005fee:	fa21 f303 	lsr.w	r3, r1, r3
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <HAL_RCC_ClockConfig+0x2f0>)
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_RCC_ClockConfig+0x2f4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fc feac 	bl	8002d58 <HAL_InitTick>
  
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3778      	adds	r7, #120	; 0x78
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	080081ec 	.word	0x080081ec
 8006014:	20000000 	.word	0x20000000
 8006018:	20000004 	.word	0x20000004

0800601c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800601c:	b480      	push	{r7}
 800601e:	b08b      	sub	sp, #44	; 0x2c
 8006020:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006036:	4b29      	ldr	r3, [pc, #164]	; (80060dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b04      	cmp	r3, #4
 8006044:	d002      	beq.n	800604c <HAL_RCC_GetSysClockFreq+0x30>
 8006046:	2b08      	cmp	r3, #8
 8006048:	d003      	beq.n	8006052 <HAL_RCC_GetSysClockFreq+0x36>
 800604a:	e03c      	b.n	80060c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800604c:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800604e:	623b      	str	r3, [r7, #32]
      break;
 8006050:	e03c      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006058:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800605c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	fa92 f2a2 	rbit	r2, r2
 8006064:	607a      	str	r2, [r7, #4]
  return result;
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	fab2 f282 	clz	r2, r2
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	40d3      	lsrs	r3, r2
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006072:	5cd3      	ldrb	r3, [r2, r3]
 8006074:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006076:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	220f      	movs	r2, #15
 8006080:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	fa92 f2a2 	rbit	r2, r2
 8006088:	60fa      	str	r2, [r7, #12]
  return result;
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	fab2 f282 	clz	r2, r2
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	40d3      	lsrs	r3, r2
 8006094:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006096:	5cd3      	ldrb	r3, [r2, r3]
 8006098:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	e004      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	623b      	str	r3, [r7, #32]
      break;
 80060c4:	e002      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060c8:	623b      	str	r3, [r7, #32]
      break;
 80060ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060cc:	6a3b      	ldr	r3, [r7, #32]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	372c      	adds	r7, #44	; 0x2c
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40021000 	.word	0x40021000
 80060e0:	00b71b00 	.word	0x00b71b00
 80060e4:	08008204 	.word	0x08008204
 80060e8:	08008214 	.word	0x08008214
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	007a1200 	.word	0x007a1200

080060f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_GetHCLKFreq+0x14>)
 80060fa:	681b      	ldr	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000000 	.word	0x20000000

0800610c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006112:	f7ff ffef 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 8006116:	4601      	mov	r1, r0
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006120:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006124:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	fa92 f2a2 	rbit	r2, r2
 800612c:	603a      	str	r2, [r7, #0]
  return result;
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	fab2 f282 	clz	r2, r2
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	40d3      	lsrs	r3, r2
 8006138:	4a04      	ldr	r2, [pc, #16]	; (800614c <HAL_RCC_GetPCLK1Freq+0x40>)
 800613a:	5cd3      	ldrb	r3, [r2, r3]
 800613c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	080081fc 	.word	0x080081fc

08006150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006156:	f7ff ffcd 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 800615a:	4601      	mov	r1, r0
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006164:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006168:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	fa92 f2a2 	rbit	r2, r2
 8006170:	603a      	str	r2, [r7, #0]
  return result;
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	fab2 f282 	clz	r2, r2
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	40d3      	lsrs	r3, r2
 800617c:	4a04      	ldr	r2, [pc, #16]	; (8006190 <HAL_RCC_GetPCLK2Freq+0x40>)
 800617e:	5cd3      	ldrb	r3, [r2, r3]
 8006180:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40021000 	.word	0x40021000
 8006190:	080081fc 	.word	0x080081fc

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b092      	sub	sp, #72	; 0x48
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80cd 	beq.w	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b8:	4b86      	ldr	r3, [pc, #536]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10e      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	4b83      	ldr	r3, [pc, #524]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4a82      	ldr	r2, [pc, #520]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	61d3      	str	r3, [r2, #28]
 80061d0:	4b80      	ldr	r3, [pc, #512]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e2:	4b7d      	ldr	r3, [pc, #500]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d118      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ee:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a79      	ldr	r2, [pc, #484]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fa:	f7fc fdf1 	bl	8002de0 <HAL_GetTick>
 80061fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	e008      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fc fded 	bl	8002de0 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d901      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e0db      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	4b70      	ldr	r3, [pc, #448]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006220:	4b6c      	ldr	r3, [pc, #432]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d07d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800623a:	429a      	cmp	r2, r3
 800623c:	d076      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006258:	fab3 f383 	clz	r3, r3
 800625c:	b2db      	uxtb	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	4b5e      	ldr	r3, [pc, #376]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	461a      	mov	r2, r3
 8006268:	2301      	movs	r3, #1
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800627c:	fab3 f383 	clz	r3, r3
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	4b55      	ldr	r3, [pc, #340]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006290:	4a50      	ldr	r2, [pc, #320]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d045      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fc fd9e 	bl	8002de0 <HAL_GetTick>
 80062a4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fc fd9a 	bl	8002de0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e086      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80062be:	2302      	movs	r3, #2
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	fa93 f3a3 	rbit	r3, r3
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	2302      	movs	r3, #2
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	fa93 f3a3 	rbit	r3, r3
 80062d4:	61fb      	str	r3, [r7, #28]
  return result;
 80062d6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	fab3 f383 	clz	r3, r3
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d102      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062ec:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	e007      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80062f2:	2302      	movs	r3, #2
 80062f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2202      	movs	r2, #2
 8006304:	613a      	str	r2, [r7, #16]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	fa92 f2a2 	rbit	r2, r2
 800630c:	60fa      	str	r2, [r7, #12]
  return result;
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	fab2 f282 	clz	r2, r2
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	f002 021f 	and.w	r2, r2, #31
 8006320:	2101      	movs	r1, #1
 8006322:	fa01 f202 	lsl.w	r2, r1, r2
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0bd      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800632c:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4926      	ldr	r1, [pc, #152]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800633a:	4313      	orrs	r3, r2
 800633c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800633e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006342:	2b01      	cmp	r3, #1
 8006344:	d105      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4a22      	ldr	r2, [pc, #136]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006350:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	491a      	ldr	r1, [pc, #104]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800636c:	4313      	orrs	r3, r2
 800636e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	f023 0210 	bic.w	r2, r3, #16
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4912      	ldr	r1, [pc, #72]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800638a:	4313      	orrs	r3, r2
 800638c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	490b      	ldr	r1, [pc, #44]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4903      	ldr	r1, [pc, #12]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3748      	adds	r7, #72	; 0x48
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	10908100 	.word	0x10908100

080063e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e049      	b.n	8006486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fb16 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f000 ff0e 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e040      	b.n	800652a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <HAL_TIM_Base_Start_IT+0xa8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x58>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d009      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x58>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_TIM_Base_Start_IT+0xac>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x58>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <HAL_TIM_Base_Start_IT+0xb0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d115      	bne.n	8006514 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_TIM_Base_Start_IT+0xb4>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d015      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0x96>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d011      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	e008      	b.n	8006526 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e000      	b.n	8006528 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40014000 	.word	0x40014000
 8006544:	00010007 	.word	0x00010007

08006548 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f241 1311 	movw	r3, #4369	; 0x1111
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10f      	bne.n	8006590 <HAL_TIM_Base_Stop_IT+0x48>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6a1a      	ldr	r2, [r3, #32]
 8006576:	f240 4344 	movw	r3, #1092	; 0x444
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d107      	bne.n	8006590 <HAL_TIM_Base_Stop_IT+0x48>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e049      	b.n	800664c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f841 	bl	8006654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f000 fe2b 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <HAL_TIM_PWM_Start+0x24>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e03c      	b.n	8006706 <HAL_TIM_PWM_Start+0x9e>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b04      	cmp	r3, #4
 8006690:	d109      	bne.n	80066a6 <HAL_TIM_PWM_Start+0x3e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e02f      	b.n	8006706 <HAL_TIM_PWM_Start+0x9e>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d109      	bne.n	80066c0 <HAL_TIM_PWM_Start+0x58>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e022      	b.n	8006706 <HAL_TIM_PWM_Start+0x9e>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b0c      	cmp	r3, #12
 80066c4:	d109      	bne.n	80066da <HAL_TIM_PWM_Start+0x72>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	bf14      	ite	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	2300      	moveq	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	e015      	b.n	8006706 <HAL_TIM_PWM_Start+0x9e>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d109      	bne.n	80066f4 <HAL_TIM_PWM_Start+0x8c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e008      	b.n	8006706 <HAL_TIM_PWM_Start+0x9e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e088      	b.n	8006820 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_TIM_PWM_Start+0xb6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800671c:	e023      	b.n	8006766 <HAL_TIM_PWM_Start+0xfe>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0xc6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	e01b      	b.n	8006766 <HAL_TIM_PWM_Start+0xfe>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0xd6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	e013      	b.n	8006766 <HAL_TIM_PWM_Start+0xfe>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xe6>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800674c:	e00b      	b.n	8006766 <HAL_TIM_PWM_Start+0xfe>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b10      	cmp	r3, #16
 8006752:	d104      	bne.n	800675e <HAL_TIM_PWM_Start+0xf6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675c:	e003      	b.n	8006766 <HAL_TIM_PWM_Start+0xfe>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f001 f91e 	bl	80079b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <HAL_TIM_PWM_Start+0x1c0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00e      	beq.n	800679c <HAL_TIM_PWM_Start+0x134>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_TIM_PWM_Start+0x1c4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_TIM_PWM_Start+0x134>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <HAL_TIM_PWM_Start+0x1c8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIM_PWM_Start+0x134>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a27      	ldr	r2, [pc, #156]	; (8006834 <HAL_TIM_PWM_Start+0x1cc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_PWM_Start+0x138>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_TIM_PWM_Start+0x13a>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <HAL_TIM_PWM_Start+0x1c0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_TIM_PWM_Start+0x176>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d009      	beq.n	80067de <HAL_TIM_PWM_Start+0x176>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <HAL_TIM_PWM_Start+0x1d0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_TIM_PWM_Start+0x176>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_TIM_PWM_Start+0x1c4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d115      	bne.n	800680a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	4b15      	ldr	r3, [pc, #84]	; (800683c <HAL_TIM_PWM_Start+0x1d4>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b06      	cmp	r3, #6
 80067ee:	d015      	beq.n	800681c <HAL_TIM_PWM_Start+0x1b4>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f6:	d011      	beq.n	800681c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	e008      	b.n	800681c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e000      	b.n	800681e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800
 8006838:	40000400 	.word	0x40000400
 800683c:	00010007 	.word	0x00010007

08006840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e097      	b.n	8006984 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fc f91f 	bl	8002aac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f000 fcd3 	bl	8007240 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	4313      	orrs	r3, r2
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068e0:	f023 030c 	bic.w	r3, r3, #12
 80068e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4313      	orrs	r3, r2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	031b      	lsls	r3, r3, #12
 8006910:	4313      	orrs	r3, r2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	4313      	orrs	r3, r2
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800699c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d110      	bne.n	80069de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d102      	bne.n	80069c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069c2:	7b7b      	ldrb	r3, [r7, #13]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d001      	beq.n	80069cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e069      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069dc:	e031      	b.n	8006a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d110      	bne.n	8006a06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d102      	bne.n	80069f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ea:	7b3b      	ldrb	r3, [r7, #12]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d001      	beq.n	80069f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e055      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a04:	e01d      	b.n	8006a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d108      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d105      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a12:	7b7b      	ldrb	r3, [r7, #13]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d102      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a18:	7b3b      	ldrb	r3, [r7, #12]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e03e      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_TIM_Encoder_Start+0xc4>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d008      	beq.n	8006a60 <HAL_TIM_Encoder_Start+0xd4>
 8006a4e:	e00f      	b.n	8006a70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ffa9 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006a5e:	e016      	b.n	8006a8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	2104      	movs	r1, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 ffa1 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006a6e:	e00e      	b.n	8006a8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 ff99 	bl	80079b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	2104      	movs	r1, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 ff92 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006a8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_TIM_Encoder_Stop+0x18>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d008      	beq.n	8006ad0 <HAL_TIM_Encoder_Stop+0x28>
 8006abe:	e00f      	b.n	8006ae0 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ff71 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006ace:	e016      	b.n	8006afe <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ff69 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006ade:	e00e      	b.n	8006afe <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 ff61 	bl	80079b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	2104      	movs	r1, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 ff5a 	bl	80079b0 <TIM_CCxChannelCmd>
      break;
 8006afc:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10f      	bne.n	8006b2e <HAL_TIM_Encoder_Stop+0x86>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	f240 4344 	movw	r3, #1092	; 0x444
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_TIM_Encoder_Stop+0x86>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_TIM_Encoder_Stop+0x92>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d148      	bne.n	8006bcc <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_Encoder_Stop+0xa2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b48:	e023      	b.n	8006b92 <HAL_TIM_Encoder_Stop+0xea>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_Encoder_Stop+0xb2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	e01b      	b.n	8006b92 <HAL_TIM_Encoder_Stop+0xea>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_Encoder_Stop+0xc2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b68:	e013      	b.n	8006b92 <HAL_TIM_Encoder_Stop+0xea>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_Encoder_Stop+0xd2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b78:	e00b      	b.n	8006b92 <HAL_TIM_Encoder_Stop+0xea>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_Encoder_Stop+0xe2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b88:	e003      	b.n	8006b92 <HAL_TIM_Encoder_Stop+0xea>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_Encoder_Stop+0xfa>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba0:	e024      	b.n	8006bec <HAL_TIM_Encoder_Stop+0x144>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_Encoder_Stop+0x10a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb0:	e01c      	b.n	8006bec <HAL_TIM_Encoder_Stop+0x144>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_Encoder_Stop+0x11a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bc0:	e014      	b.n	8006bec <HAL_TIM_Encoder_Stop+0x144>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006bca:	e00f      	b.n	8006bec <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d122      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d11b      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0202 	mvn.w	r2, #2
 8006c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fae2 	bl	8007202 <HAL_TIM_IC_CaptureCallback>
 8006c3e:	e005      	b.n	8006c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fad4 	bl	80071ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fae5 	bl	8007216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d122      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d11b      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f06f 0204 	mvn.w	r2, #4
 8006c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fab8 	bl	8007202 <HAL_TIM_IC_CaptureCallback>
 8006c92:	e005      	b.n	8006ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 faaa 	bl	80071ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fabb 	bl	8007216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d122      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f06f 0208 	mvn.w	r2, #8
 8006cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa8e 	bl	8007202 <HAL_TIM_IC_CaptureCallback>
 8006ce6:	e005      	b.n	8006cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa80 	bl	80071ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa91 	bl	8007216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d122      	bne.n	8006d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d11b      	bne.n	8006d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f06f 0210 	mvn.w	r2, #16
 8006d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2208      	movs	r2, #8
 8006d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa64 	bl	8007202 <HAL_TIM_IC_CaptureCallback>
 8006d3a:	e005      	b.n	8006d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa56 	bl	80071ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa67 	bl	8007216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d10e      	bne.n	8006d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d107      	bne.n	8006d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f06f 0201 	mvn.w	r2, #1
 8006d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fa ff87 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d10e      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d107      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fea3 	bl	8007aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fe96 	bl	8007b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa15 	bl	800722a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d10e      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0220 	mvn.w	r2, #32
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fe56 	bl	8007ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e0ff      	b.n	8007052 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b14      	cmp	r3, #20
 8006e5e:	f200 80f0 	bhi.w	8007042 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08007043 	.word	0x08007043
 8006e70:	08007043 	.word	0x08007043
 8006e74:	08007043 	.word	0x08007043
 8006e78:	08006efd 	.word	0x08006efd
 8006e7c:	08007043 	.word	0x08007043
 8006e80:	08007043 	.word	0x08007043
 8006e84:	08007043 	.word	0x08007043
 8006e88:	08006f3f 	.word	0x08006f3f
 8006e8c:	08007043 	.word	0x08007043
 8006e90:	08007043 	.word	0x08007043
 8006e94:	08007043 	.word	0x08007043
 8006e98:	08006f7f 	.word	0x08006f7f
 8006e9c:	08007043 	.word	0x08007043
 8006ea0:	08007043 	.word	0x08007043
 8006ea4:	08007043 	.word	0x08007043
 8006ea8:	08006fc1 	.word	0x08006fc1
 8006eac:	08007043 	.word	0x08007043
 8006eb0:	08007043 	.word	0x08007043
 8006eb4:	08007043 	.word	0x08007043
 8006eb8:	08007001 	.word	0x08007001
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fa34 	bl	8007330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0208 	orr.w	r2, r2, #8
 8006ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0204 	bic.w	r2, r2, #4
 8006ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6999      	ldr	r1, [r3, #24]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	619a      	str	r2, [r3, #24]
      break;
 8006efa:	e0a5      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fa9a 	bl	800743c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6999      	ldr	r1, [r3, #24]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	021a      	lsls	r2, r3, #8
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	619a      	str	r2, [r3, #24]
      break;
 8006f3c:	e084      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 faf9 	bl	800753c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0208 	orr.w	r2, r2, #8
 8006f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0204 	bic.w	r2, r2, #4
 8006f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69d9      	ldr	r1, [r3, #28]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	61da      	str	r2, [r3, #28]
      break;
 8006f7c:	e064      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fb57 	bl	8007638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69d9      	ldr	r1, [r3, #28]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	021a      	lsls	r2, r3, #8
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	61da      	str	r2, [r3, #28]
      break;
 8006fbe:	e043      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb9a 	bl	8007700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0208 	orr.w	r2, r2, #8
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0204 	bic.w	r2, r2, #4
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ffe:	e023      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fbd8 	bl	80077bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800701a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	021a      	lsls	r2, r3, #8
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007040:	e002      	b.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
      break;
 8007046:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop

0800705c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIM_ConfigClockSource+0x1c>
 8007074:	2302      	movs	r3, #2
 8007076:	e0b6      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x18a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800709a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b4:	d03e      	beq.n	8007134 <HAL_TIM_ConfigClockSource+0xd8>
 80070b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ba:	f200 8087 	bhi.w	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	f000 8086 	beq.w	80071d2 <HAL_TIM_ConfigClockSource+0x176>
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ca:	d87f      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070cc:	2b70      	cmp	r3, #112	; 0x70
 80070ce:	d01a      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0xaa>
 80070d0:	2b70      	cmp	r3, #112	; 0x70
 80070d2:	d87b      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070d4:	2b60      	cmp	r3, #96	; 0x60
 80070d6:	d050      	beq.n	800717a <HAL_TIM_ConfigClockSource+0x11e>
 80070d8:	2b60      	cmp	r3, #96	; 0x60
 80070da:	d877      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070dc:	2b50      	cmp	r3, #80	; 0x50
 80070de:	d03c      	beq.n	800715a <HAL_TIM_ConfigClockSource+0xfe>
 80070e0:	2b50      	cmp	r3, #80	; 0x50
 80070e2:	d873      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d058      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x13e>
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d86f      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070ec:	2b30      	cmp	r3, #48	; 0x30
 80070ee:	d064      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x15e>
 80070f0:	2b30      	cmp	r3, #48	; 0x30
 80070f2:	d86b      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d060      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x15e>
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	d867      	bhi.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05c      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x15e>
 8007100:	2b10      	cmp	r3, #16
 8007102:	d05a      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x15e>
 8007104:	e062      	b.n	80071cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6899      	ldr	r1, [r3, #8]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f000 fc2b 	bl	8007970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	609a      	str	r2, [r3, #8]
      break;
 8007132:	e04f      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f000 fc14 	bl	8007970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007156:	609a      	str	r2, [r3, #8]
      break;
 8007158:	e03c      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6859      	ldr	r1, [r3, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	461a      	mov	r2, r3
 8007168:	f000 fb88 	bl	800787c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2150      	movs	r1, #80	; 0x50
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fbe1 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007178:	e02c      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6859      	ldr	r1, [r3, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	461a      	mov	r2, r3
 8007188:	f000 fba7 	bl	80078da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2160      	movs	r1, #96	; 0x60
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fbd1 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 8007198:	e01c      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6859      	ldr	r1, [r3, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f000 fb68 	bl	800787c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2140      	movs	r1, #64	; 0x40
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbc1 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 80071b8:	e00c      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f000 fbb8 	bl	800793a <TIM_ITRx_SetConfig>
      break;
 80071ca:	e003      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
      break;
 80071d0:	e000      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a32      	ldr	r2, [pc, #200]	; (800731c <TIM_Base_SetConfig+0xdc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0x28>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0x28>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <TIM_Base_SetConfig+0xe0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d108      	bne.n	800727a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a27      	ldr	r2, [pc, #156]	; (800731c <TIM_Base_SetConfig+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <TIM_Base_SetConfig+0x6a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d00f      	beq.n	80072aa <TIM_Base_SetConfig+0x6a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a24      	ldr	r2, [pc, #144]	; (8007320 <TIM_Base_SetConfig+0xe0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00b      	beq.n	80072aa <TIM_Base_SetConfig+0x6a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a23      	ldr	r2, [pc, #140]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <TIM_Base_SetConfig+0x6a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a22      	ldr	r2, [pc, #136]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_Base_SetConfig+0x6a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a21      	ldr	r2, [pc, #132]	; (800732c <TIM_Base_SetConfig+0xec>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d108      	bne.n	80072bc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a0e      	ldr	r2, [pc, #56]	; (800731c <TIM_Base_SetConfig+0xdc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00b      	beq.n	8007300 <TIM_Base_SetConfig+0xc0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0e      	ldr	r2, [pc, #56]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d007      	beq.n	8007300 <TIM_Base_SetConfig+0xc0>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_Base_SetConfig+0xc0>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a0c      	ldr	r2, [pc, #48]	; (800732c <TIM_Base_SetConfig+0xec>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d103      	bne.n	8007308 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	615a      	str	r2, [r3, #20]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40000400 	.word	0x40000400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800

08007330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 0302 	bic.w	r3, r3, #2
 800737c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a28      	ldr	r2, [pc, #160]	; (800742c <TIM_OC1_SetConfig+0xfc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_OC1_SetConfig+0x78>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a27      	ldr	r2, [pc, #156]	; (8007430 <TIM_OC1_SetConfig+0x100>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_OC1_SetConfig+0x78>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a26      	ldr	r2, [pc, #152]	; (8007434 <TIM_OC1_SetConfig+0x104>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_OC1_SetConfig+0x78>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a25      	ldr	r2, [pc, #148]	; (8007438 <TIM_OC1_SetConfig+0x108>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d10c      	bne.n	80073c2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0308 	bic.w	r3, r3, #8
 80073ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a19      	ldr	r2, [pc, #100]	; (800742c <TIM_OC1_SetConfig+0xfc>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00b      	beq.n	80073e2 <TIM_OC1_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a18      	ldr	r2, [pc, #96]	; (8007430 <TIM_OC1_SetConfig+0x100>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d007      	beq.n	80073e2 <TIM_OC1_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a17      	ldr	r2, [pc, #92]	; (8007434 <TIM_OC1_SetConfig+0x104>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d003      	beq.n	80073e2 <TIM_OC1_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <TIM_OC1_SetConfig+0x108>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d111      	bne.n	8007406 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	621a      	str	r2, [r3, #32]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40014000 	.word	0x40014000
 8007434:	40014400 	.word	0x40014400
 8007438:	40014800 	.word	0x40014800

0800743c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0210 	bic.w	r2, r3, #16
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0320 	bic.w	r3, r3, #32
 800748a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a24      	ldr	r2, [pc, #144]	; (800752c <TIM_OC2_SetConfig+0xf0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10d      	bne.n	80074bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1b      	ldr	r2, [pc, #108]	; (800752c <TIM_OC2_SetConfig+0xf0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00b      	beq.n	80074dc <TIM_OC2_SetConfig+0xa0>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a1a      	ldr	r2, [pc, #104]	; (8007530 <TIM_OC2_SetConfig+0xf4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_OC2_SetConfig+0xa0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a19      	ldr	r2, [pc, #100]	; (8007534 <TIM_OC2_SetConfig+0xf8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC2_SetConfig+0xa0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a18      	ldr	r2, [pc, #96]	; (8007538 <TIM_OC2_SetConfig+0xfc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d113      	bne.n	8007504 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074ea:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800

0800753c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a23      	ldr	r2, [pc, #140]	; (8007628 <TIM_OC3_SetConfig+0xec>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d10d      	bne.n	80075ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <TIM_OC3_SetConfig+0xec>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_OC3_SetConfig+0x9e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a19      	ldr	r2, [pc, #100]	; (800762c <TIM_OC3_SetConfig+0xf0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC3_SetConfig+0x9e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <TIM_OC3_SetConfig+0xf4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC3_SetConfig+0x9e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a17      	ldr	r2, [pc, #92]	; (8007634 <TIM_OC3_SetConfig+0xf8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d113      	bne.n	8007602 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400
 8007634:	40014800 	.word	0x40014800

08007638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <TIM_OC4_SetConfig+0xb8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_OC4_SetConfig+0x7c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <TIM_OC4_SetConfig+0xbc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_OC4_SetConfig+0x7c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <TIM_OC4_SetConfig+0xc0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_OC4_SetConfig+0x7c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a13      	ldr	r2, [pc, #76]	; (80076fc <TIM_OC4_SetConfig+0xc4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d109      	bne.n	80076c8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	019b      	lsls	r3, r3, #6
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <TIM_OC5_SetConfig+0xac>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <TIM_OC5_SetConfig+0x72>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <TIM_OC5_SetConfig+0xb0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d007      	beq.n	8007772 <TIM_OC5_SetConfig+0x72>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <TIM_OC5_SetConfig+0xb4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_OC5_SetConfig+0x72>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <TIM_OC5_SetConfig+0xb8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d109      	bne.n	8007786 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007778:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	621a      	str	r2, [r3, #32]
}
 80077a0:	bf00      	nop
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800

080077bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	051b      	lsls	r3, r3, #20
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a16      	ldr	r2, [pc, #88]	; (800786c <TIM_OC6_SetConfig+0xb0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00b      	beq.n	8007830 <TIM_OC6_SetConfig+0x74>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a15      	ldr	r2, [pc, #84]	; (8007870 <TIM_OC6_SetConfig+0xb4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d007      	beq.n	8007830 <TIM_OC6_SetConfig+0x74>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a14      	ldr	r2, [pc, #80]	; (8007874 <TIM_OC6_SetConfig+0xb8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_OC6_SetConfig+0x74>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a13      	ldr	r2, [pc, #76]	; (8007878 <TIM_OC6_SetConfig+0xbc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d109      	bne.n	8007844 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	029b      	lsls	r3, r3, #10
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800

0800787c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 030a 	bic.w	r3, r3, #10
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078da:	b480      	push	{r7}
 80078dc:	b087      	sub	sp, #28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0210 	bic.w	r2, r3, #16
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	f043 0307 	orr.w	r3, r3, #7
 800795c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800798a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	431a      	orrs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2201      	movs	r2, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e054      	b.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a24      	ldr	r2, [pc, #144]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d108      	bne.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00e      	beq.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7c:	d009      	beq.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d004      	beq.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a11      	ldr	r2, [pc, #68]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10c      	bne.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40014000 	.word	0x40014000

08007ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e040      	b.n	8007ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fb f830 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	; 0x24
 8007b40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0201 	bic.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f82c 	bl	8007bb0 <UART_SetConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e022      	b.n	8007ba8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f956 	bl	8007e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f9dd 	bl	8007f60 <UART_CheckIdleState>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b8a      	ldr	r3, [pc, #552]	; (8007e04 <UART_SetConfig+0x254>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	6979      	ldr	r1, [r7, #20]
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a78      	ldr	r2, [pc, #480]	; (8007e08 <UART_SetConfig+0x258>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d120      	bne.n	8007c6e <UART_SetConfig+0xbe>
 8007c2c:	4b77      	ldr	r3, [pc, #476]	; (8007e0c <UART_SetConfig+0x25c>)
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d817      	bhi.n	8007c68 <UART_SetConfig+0xb8>
 8007c38:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <UART_SetConfig+0x90>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c5d 	.word	0x08007c5d
 8007c48:	08007c63 	.word	0x08007c63
 8007c4c:	08007c57 	.word	0x08007c57
 8007c50:	2300      	movs	r3, #0
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e01d      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c56:	2302      	movs	r3, #2
 8007c58:	77fb      	strb	r3, [r7, #31]
 8007c5a:	e01a      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e017      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c62:	2308      	movs	r3, #8
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e014      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e011      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a67      	ldr	r2, [pc, #412]	; (8007e10 <UART_SetConfig+0x260>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d102      	bne.n	8007c7e <UART_SetConfig+0xce>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e009      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a64      	ldr	r2, [pc, #400]	; (8007e14 <UART_SetConfig+0x264>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d102      	bne.n	8007c8e <UART_SetConfig+0xde>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e001      	b.n	8007c92 <UART_SetConfig+0xe2>
 8007c8e:	2310      	movs	r3, #16
 8007c90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c9a:	d15b      	bne.n	8007d54 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007c9c:	7ffb      	ldrb	r3, [r7, #31]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d827      	bhi.n	8007cf2 <UART_SetConfig+0x142>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0xf8>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe fa1e 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 8007cd0:	61b8      	str	r0, [r7, #24]
        break;
 8007cd2:	e013      	b.n	8007cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fe fa3c 	bl	8006150 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	61b8      	str	r0, [r7, #24]
        break;
 8007cda:	e00f      	b.n	8007cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b4e      	ldr	r3, [pc, #312]	; (8007e18 <UART_SetConfig+0x268>)
 8007cde:	61bb      	str	r3, [r7, #24]
        break;
 8007ce0:	e00c      	b.n	8007cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fe f99b 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8007ce6:	61b8      	str	r0, [r7, #24]
        break;
 8007ce8:	e008      	b.n	8007cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	61bb      	str	r3, [r7, #24]
        break;
 8007cf0:	e004      	b.n	8007cfc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d074      	beq.n	8007dec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	005a      	lsls	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	441a      	add	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d916      	bls.n	8007d4e <UART_SetConfig+0x19e>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d212      	bcs.n	8007d4e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f023 030f 	bic.w	r3, r3, #15
 8007d30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	89fb      	ldrh	r3, [r7, #14]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	89fa      	ldrh	r2, [r7, #14]
 8007d4a:	60da      	str	r2, [r3, #12]
 8007d4c:	e04e      	b.n	8007dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	77bb      	strb	r3, [r7, #30]
 8007d52:	e04b      	b.n	8007dec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d54:	7ffb      	ldrb	r3, [r7, #31]
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d827      	bhi.n	8007daa <UART_SetConfig+0x1fa>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <UART_SetConfig+0x1b0>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	08007dab 	.word	0x08007dab
 8007d70:	08007d9b 	.word	0x08007d9b
 8007d74:	08007dab 	.word	0x08007dab
 8007d78:	08007dab 	.word	0x08007dab
 8007d7c:	08007dab 	.word	0x08007dab
 8007d80:	08007da3 	.word	0x08007da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d84:	f7fe f9c2 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 8007d88:	61b8      	str	r0, [r7, #24]
        break;
 8007d8a:	e013      	b.n	8007db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d8c:	f7fe f9e0 	bl	8006150 <HAL_RCC_GetPCLK2Freq>
 8007d90:	61b8      	str	r0, [r7, #24]
        break;
 8007d92:	e00f      	b.n	8007db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <UART_SetConfig+0x268>)
 8007d96:	61bb      	str	r3, [r7, #24]
        break;
 8007d98:	e00c      	b.n	8007db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9a:	f7fe f93f 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8007d9e:	61b8      	str	r0, [r7, #24]
        break;
 8007da0:	e008      	b.n	8007db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da6:	61bb      	str	r3, [r7, #24]
        break;
 8007da8:	e004      	b.n	8007db4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	77bb      	strb	r3, [r7, #30]
        break;
 8007db2:	bf00      	nop
    }

    if (pclk != 0U)
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	085a      	lsrs	r2, r3, #1
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	441a      	add	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d908      	bls.n	8007de8 <UART_SetConfig+0x238>
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ddc:	d204      	bcs.n	8007de8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	e001      	b.n	8007dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	efff69f3 	.word	0xefff69f3
 8007e08:	40013800 	.word	0x40013800
 8007e0c:	40021000 	.word	0x40021000
 8007e10:	40004400 	.word	0x40004400
 8007e14:	40004800 	.word	0x40004800
 8007e18:	007a1200 	.word	0x007a1200

08007e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1a:	d10a      	bne.n	8007f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f70:	f7fa ff36 	bl	8002de0 <HAL_GetTick>
 8007f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d10e      	bne.n	8007fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f82d 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e023      	b.n	8007fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d10e      	bne.n	8007fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f817 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e00d      	b.n	8007fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b09c      	sub	sp, #112	; 0x70
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008002:	e0a5      	b.n	8008150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	f000 80a1 	beq.w	8008150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800e:	f7fa fee7 	bl	8002de0 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <UART_WaitOnFlagUntilTimeout+0x32>
 800801e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008020:	2b00      	cmp	r3, #0
 8008022:	d13e      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008038:	667b      	str	r3, [r7, #100]	; 0x64
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008044:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e6      	bne.n	8008024 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3308      	adds	r3, #8
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	663b      	str	r3, [r7, #96]	; 0x60
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3308      	adds	r3, #8
 8008074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008076:	64ba      	str	r2, [r7, #72]	; 0x48
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800807c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e5      	bne.n	8008056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e067      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d04f      	beq.n	8008150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080be:	d147      	bne.n	8008150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	613b      	str	r3, [r7, #16]
   return(result);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	66bb      	str	r3, [r7, #104]	; 0x68
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3308      	adds	r3, #8
 800811a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800811c:	623a      	str	r2, [r7, #32]
 800811e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	61bb      	str	r3, [r7, #24]
   return(result);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e010      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69da      	ldr	r2, [r3, #28]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4013      	ands	r3, r2
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	429a      	cmp	r2, r3
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	429a      	cmp	r2, r3
 800816c:	f43f af4a 	beq.w	8008004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3770      	adds	r7, #112	; 0x70
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <__libc_init_array>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	4d0d      	ldr	r5, [pc, #52]	; (80081b4 <__libc_init_array+0x38>)
 8008180:	4c0d      	ldr	r4, [pc, #52]	; (80081b8 <__libc_init_array+0x3c>)
 8008182:	1b64      	subs	r4, r4, r5
 8008184:	10a4      	asrs	r4, r4, #2
 8008186:	2600      	movs	r6, #0
 8008188:	42a6      	cmp	r6, r4
 800818a:	d109      	bne.n	80081a0 <__libc_init_array+0x24>
 800818c:	4d0b      	ldr	r5, [pc, #44]	; (80081bc <__libc_init_array+0x40>)
 800818e:	4c0c      	ldr	r4, [pc, #48]	; (80081c0 <__libc_init_array+0x44>)
 8008190:	f000 f820 	bl	80081d4 <_init>
 8008194:	1b64      	subs	r4, r4, r5
 8008196:	10a4      	asrs	r4, r4, #2
 8008198:	2600      	movs	r6, #0
 800819a:	42a6      	cmp	r6, r4
 800819c:	d105      	bne.n	80081aa <__libc_init_array+0x2e>
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a4:	4798      	blx	r3
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7ee      	b.n	8008188 <__libc_init_array+0xc>
 80081aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ae:	4798      	blx	r3
 80081b0:	3601      	adds	r6, #1
 80081b2:	e7f2      	b.n	800819a <__libc_init_array+0x1e>
 80081b4:	08008224 	.word	0x08008224
 80081b8:	08008224 	.word	0x08008224
 80081bc:	08008224 	.word	0x08008224
 80081c0:	08008228 	.word	0x08008228

080081c4 <memset>:
 80081c4:	4402      	add	r2, r0
 80081c6:	4603      	mov	r3, r0
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d100      	bne.n	80081ce <memset+0xa>
 80081cc:	4770      	bx	lr
 80081ce:	f803 1b01 	strb.w	r1, [r3], #1
 80081d2:	e7f9      	b.n	80081c8 <memset+0x4>

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
