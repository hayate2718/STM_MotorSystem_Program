
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002826  00000000  00000000  00037c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e48  00000000  00000000  0003b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eadf  00000000  00000000  0003c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130dc  00000000  00000000  0005acb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af206  00000000  00000000  0006dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011cf99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004004  00000000  00000000  0011cfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053a0 	.word	0x080053a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080053a0 	.word	0x080053a0

080001c8 <_ZN3PID9PID_set_pEf>:
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
{
	return;
}

inline void PID::PID_set_p(float p){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	683a      	ldr	r2, [r7, #0]
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <_ZN15STM_MotorSystem12set_velocityEf>:
	float volt; //電源電圧

public:
	STM_MotorSystem(); //コンストラクタ

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
 80001ee:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_tar = velocity_tar;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	605a      	str	r2, [r3, #4]

	}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <_ZN8USER_CANC1Ev>:
	SYSTEM_INIT = 0x0310,
	SYSTEM_START = 0x0320

}cmd;

USER_CAN::USER_CAN(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b092      	sub	sp, #72	; 0x48
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef filter;
	_filter = &filter;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f107 0208 	add.w	r2, r7, #8
 8000212:	601a      	str	r2, [r3, #0]

	CAN_TxHeaderTypeDef TxHeader;
	_TxHeader = &TxHeader;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800021a:	605a      	str	r2, [r3, #4]

	filter.FilterActivation = 0; //filter enable
 800021c:	2300      	movs	r3, #0
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterBank = 0; //used filterbank 0
 8000220:	2300      	movs	r3, #0
 8000222:	61fb      	str	r3, [r7, #28]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
	filter.FilterMode = 0; //filter mode is mask mode
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
	filter.FilterScale = 0; //filterscale is dual 16bits
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterIdHigh = set_id_CAN();
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 f81b 	bl	800026c <_ZN8USER_CAN10set_id_CANEv>
 8000236:	4603      	mov	r3, r0
 8000238:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdHigh = 15;
 800023a:	230f      	movs	r3, #15
 800023c:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(_use_hcan, _filter);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4619      	mov	r1, r3
 8000248:	4610      	mov	r0, r2
 800024a:	f001 fcc2 	bl	8001bd2 <HAL_CAN_ConfigFilter>

	TxHeader.DLC = 4; //データ長（4byte）
 800024e:	2304      	movs	r3, #4
 8000250:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = 0; //標準識別子
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.RTR = 0; //データフレーム (現状モータシステムからホストにデータ要求はしないと思うから)
 8000256:	2300      	movs	r3, #0
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 800025a:	2300      	movs	r3, #0
 800025c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

}
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4618      	mov	r0, r3
 8000264:	3748      	adds	r7, #72	; 0x48
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <_ZN8USER_CAN10set_id_CANEv>:
	TxHeader->StdId = cmd+set_id_CAN();

	HAL_CAN_AddTxMessage(_use_hcan,TxHeader, tx.low_data_raw,&mailbox);
}

uint8_t USER_CAN::set_id_CAN(){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	id_set id;
	id.bit0 = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 8000274:	2102      	movs	r1, #2
 8000276:	481e      	ldr	r0, [pc, #120]	; (80002f0 <_ZN8USER_CAN10set_id_CANEv+0x84>)
 8000278:	f002 fb3a 	bl	80028f0 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	b2da      	uxtb	r2, r3
 8000284:	7b3b      	ldrb	r3, [r7, #12]
 8000286:	f362 0300 	bfi	r3, r2, #0, #1
 800028a:	733b      	strb	r3, [r7, #12]
	id.bit1 = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8);
 800028c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000290:	4817      	ldr	r0, [pc, #92]	; (80002f0 <_ZN8USER_CAN10set_id_CANEv+0x84>)
 8000292:	f002 fb2d 	bl	80028f0 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	7b3b      	ldrb	r3, [r7, #12]
 80002a0:	f362 0341 	bfi	r3, r2, #1, #1
 80002a4:	733b      	strb	r3, [r7, #12]
	id.bit2 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9);
 80002a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f002 fb1f 	bl	80028f0 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	7b3b      	ldrb	r3, [r7, #12]
 80002bc:	f362 0382 	bfi	r3, r2, #2, #1
 80002c0:	733b      	strb	r3, [r7, #12]
	id.bit3 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10);
 80002c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f002 fb11 	bl	80028f0 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	7b3b      	ldrb	r3, [r7, #12]
 80002d8:	f362 03c3 	bfi	r3, r2, #3, #1
 80002dc:	733b      	strb	r3, [r7, #12]
	return id.all_data;
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80002e4:	b2db      	uxtb	r3, r3
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	48000400 	.word	0x48000400

080002f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08e      	sub	sp, #56	; 0x38
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;
	uint32_t cmd;
	STM_MotorSystem *ms = _ms;
 80002fc:	4b80      	ldr	r3, [pc, #512]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	f107 0214 	add.w	r2, r7, #20
 800030a:	2100      	movs	r1, #0
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f001 fd2a 	bl	8001d66 <HAL_CAN_GetRxMessage>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	bf0c      	ite	eq
 8000318:	2301      	moveq	r3, #1
 800031a:	2300      	movne	r3, #0
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	f000 80ea 	beq.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
		cmd = RxHeader.StdId & 0xfff0;
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800032a:	4013      	ands	r3, r2
 800032c:	633b      	str	r3, [r7, #48]	; 0x30
		switch(cmd){
 800032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000330:	f24f 1240 	movw	r2, #61760	; 0xf140
 8000334:	4293      	cmp	r3, r2
 8000336:	f000 80c2 	beq.w	80004be <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 800033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800033c:	f24f 1240 	movw	r2, #61760	; 0xf140
 8000340:	4293      	cmp	r3, r2
 8000342:	f200 80d9 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000348:	f24f 1230 	movw	r2, #61744	; 0xf130
 800034c:	4293      	cmp	r3, r2
 800034e:	f000 80b8 	beq.w	80004c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
 8000352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000354:	f24f 1230 	movw	r2, #61744	; 0xf130
 8000358:	4293      	cmp	r3, r2
 800035a:	f200 80cd 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 800035e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000360:	f24f 1220 	movw	r2, #61728	; 0xf120
 8000364:	4293      	cmp	r3, r2
 8000366:	f000 80ae 	beq.w	80004c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
 800036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800036c:	f24f 1220 	movw	r2, #61728	; 0xf120
 8000370:	4293      	cmp	r3, r2
 8000372:	f200 80c1 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000378:	f24f 1210 	movw	r2, #61712	; 0xf110
 800037c:	4293      	cmp	r3, r2
 800037e:	f000 80a4 	beq.w	80004ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 8000382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000384:	f24f 1210 	movw	r2, #61712	; 0xf110
 8000388:	4293      	cmp	r3, r2
 800038a:	f200 80b5 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 800038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000390:	f24f 0240 	movw	r2, #61504	; 0xf040
 8000394:	4293      	cmp	r3, r2
 8000396:	f000 809a 	beq.w	80004ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
 800039a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800039c:	f24f 0240 	movw	r2, #61504	; 0xf040
 80003a0:	4293      	cmp	r3, r2
 80003a2:	f200 80a9 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80003a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003a8:	f24f 0230 	movw	r2, #61488	; 0xf030
 80003ac:	4293      	cmp	r3, r2
 80003ae:	f000 8090 	beq.w	80004d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
 80003b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003b4:	f24f 0230 	movw	r2, #61488	; 0xf030
 80003b8:	4293      	cmp	r3, r2
 80003ba:	f200 809d 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80003be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c0:	f24f 0220 	movw	r2, #61472	; 0xf020
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d070      	beq.n	80004aa <HAL_CAN_RxFifo0MsgPendingCallback+0x1b6>
 80003c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ca:	f24f 0220 	movw	r2, #61472	; 0xf020
 80003ce:	4293      	cmp	r3, r2
 80003d0:	f200 8092 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80003d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003d6:	f24f 0210 	movw	r2, #61456	; 0xf010
 80003da:	4293      	cmp	r3, r2
 80003dc:	d05d      	beq.n	800049a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a6>
 80003de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e0:	f24f 0210 	movw	r2, #61456	; 0xf010
 80003e4:	4293      	cmp	r3, r2
 80003e6:	f200 8087 	bhi.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80003ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ec:	f24e 2210 	movw	r2, #57872	; 0xe210
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d070      	beq.n	80004d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
 80003f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f6:	f24e 2210 	movw	r2, #57872	; 0xe210
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d87c      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80003fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000400:	f24e 1230 	movw	r2, #57648	; 0xe130
 8000404:	4293      	cmp	r3, r2
 8000406:	d068      	beq.n	80004da <HAL_CAN_RxFifo0MsgPendingCallback+0x1e6>
 8000408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040a:	f24e 1230 	movw	r2, #57648	; 0xe130
 800040e:	4293      	cmp	r3, r2
 8000410:	d872      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000414:	f24e 1220 	movw	r2, #57632	; 0xe120
 8000418:	4293      	cmp	r3, r2
 800041a:	d060      	beq.n	80004de <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	f24e 1220 	movw	r2, #57632	; 0xe120
 8000422:	4293      	cmp	r3, r2
 8000424:	d868      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000428:	f24e 1210 	movw	r2, #57616	; 0xe110
 800042c:	4293      	cmp	r3, r2
 800042e:	d058      	beq.n	80004e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ee>
 8000430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000432:	f24e 1210 	movw	r2, #57616	; 0xe110
 8000436:	4293      	cmp	r3, r2
 8000438:	d85e      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 800043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800043c:	f24e 0240 	movw	r2, #57408	; 0xe040
 8000440:	4293      	cmp	r3, r2
 8000442:	d050      	beq.n	80004e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
 8000444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000446:	f24e 0240 	movw	r2, #57408	; 0xe040
 800044a:	4293      	cmp	r3, r2
 800044c:	d854      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 800044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000450:	f24e 0230 	movw	r2, #57392	; 0xe030
 8000454:	4293      	cmp	r3, r2
 8000456:	d048      	beq.n	80004ea <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8000458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045a:	f24e 0230 	movw	r2, #57392	; 0xe030
 800045e:	4293      	cmp	r3, r2
 8000460:	d84a      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000464:	f24e 0220 	movw	r2, #57376	; 0xe020
 8000468:	4293      	cmp	r3, r2
 800046a:	d040      	beq.n	80004ee <HAL_CAN_RxFifo0MsgPendingCallback+0x1fa>
 800046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046e:	f24e 0220 	movw	r2, #57376	; 0xe020
 8000472:	4293      	cmp	r3, r2
 8000474:	d840      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000478:	f24e 0210 	movw	r2, #57360	; 0xe010
 800047c:	4293      	cmp	r3, r2
 800047e:	d038      	beq.n	80004f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fe>
 8000480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000482:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000486:	4293      	cmp	r3, r2
 8000488:	d836      	bhi.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 800048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8000490:	d031      	beq.n	80004f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x202>
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	f5b3 7f48 	cmp.w	r3, #800	; 0x320

			case SYSTEM_INIT:
				break;

			case SYSTEM_START:
				break;
 8000498:	e02e      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				ms->set_velocity(rx.low_data);
 800049a:	edd7 7a03 	vldr	s15, [r7, #12]
 800049e:	eeb0 0a67 	vmov.f32	s0, s15
 80004a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004a4:	f7ff fe9f 	bl	80001e6 <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 80004a8:	e026      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				ms->pid_velocity.PID_set_p(rx.low_data);
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	3310      	adds	r3, #16
 80004ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80004b2:	eeb0 0a67 	vmov.f32	s0, s15
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fe86 	bl	80001c8 <_ZN3PID9PID_set_pEf>
				break;
 80004bc:	e01c      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004be:	bf00      	nop
 80004c0:	e01a      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004c2:	bf00      	nop
 80004c4:	e018      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004c6:	bf00      	nop
 80004c8:	e016      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004ca:	bf00      	nop
 80004cc:	e014      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004ce:	bf00      	nop
 80004d0:	e012      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004d2:	bf00      	nop
 80004d4:	e010      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004d6:	bf00      	nop
 80004d8:	e00e      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004da:	bf00      	nop
 80004dc:	e00c      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004de:	bf00      	nop
 80004e0:	e00a      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004e2:	bf00      	nop
 80004e4:	e008      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004e6:	bf00      	nop
 80004e8:	e006      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004ea:	bf00      	nop
 80004ec:	e004      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004ee:	bf00      	nop
 80004f0:	e002      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004f2:	bf00      	nop
 80004f4:	e000      	b.n	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				break;
 80004f6:	bf00      	nop
			}

		}
}
 80004f8:	bf00      	nop
 80004fa:	3738      	adds	r7, #56	; 0x38
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200001bc 	.word	0x200001bc

08000504 <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6178      	str	r0, [r7, #20]
 800050c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000510:	edc7 0a03 	vstr	s1, [r7, #12]
 8000514:	ed87 1a02 	vstr	s2, [r7, #8]
 8000518:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	f04f 0200 	mov.w	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	f04f 0200 	mov.w	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
}
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4618      	mov	r0, r3
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <_ZN15STM_MotorSystemC1Ev>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem():
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
pid_velocity(0,0,0,0.0001),
pid_torque(0,0,0,0.0001),
velocity_ref(0),
velocity_tar(0),
current_ref(0),
volt(0)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f04f 0200 	mov.w	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f04f 0200 	mov.w	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3310      	adds	r3, #16
 8000588:	eddf 1a12 	vldr	s3, [pc, #72]	; 80005d4 <_ZN15STM_MotorSystemC1Ev+0x78>
 800058c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 8000590:	eddf 0a11 	vldr	s1, [pc, #68]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 8000594:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffb3 	bl	8000504 <_ZN3PIDC1Effff>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	332c      	adds	r3, #44	; 0x2c
 80005a2:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80005d4 <_ZN15STM_MotorSystemC1Ev+0x78>
 80005a6:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 80005aa:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 80005ae:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80005d8 <_ZN15STM_MotorSystemC1Ev+0x7c>
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffa6 	bl	8000504 <_ZN3PIDC1Effff>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3348      	adds	r3, #72	; 0x48
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe21 	bl	8000204 <_ZN8USER_CANC1Ev>
{
	use_can._use_hcan = &hcan;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <_ZN15STM_MotorSystemC1Ev+0x80>)
 80005c6:	651a      	str	r2, [r3, #80]	; 0x50


}
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	38d1b717 	.word	0x38d1b717
 80005d8:	00000000 	.word	0x00000000
 80005dc:	20000078 	.word	0x20000078

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fcd9 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f817 	bl	800061c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fa49 	bl	8000a84 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 80005f2:	f000 f881 	bl	80006f8 <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 80005f6:	f000 f8e7 	bl	80007c8 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 80005fa:	f000 f921 	bl	8000840 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80005fe:	f000 f97d 	bl	80008fc <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000602:	f000 fa0b 	bl	8000a1c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffa7 	bl	800055c <_ZN15STM_MotorSystemC1Ev>
  _ms = &use_ms;
 800060e:	4a02      	ldr	r2, [pc, #8]	; (8000618 <main+0x38>)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x34>
 8000616:	bf00      	nop
 8000618:	200001bc 	.word	0x200001bc

0800061c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 feb0 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800066c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f96a 	bl	8002950 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800068c:	f000 fa74 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 f857 	bl	8003760 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fa59 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80006c6:	2381      	movs	r3, #129	; 0x81
 80006c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fa7a 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80006ec:	f000 fa44 	bl	8000b78 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3758      	adds	r7, #88	; 0x58
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <_ZL12MX_ADC2_Initv+0xcc>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000728:	2200      	movs	r2, #0
 800072a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800073c:	2201      	movs	r2, #1
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000756:	2204      	movs	r2, #4
 8000758:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000768:	f000 fc7e 	bl	8001068 <HAL_ADC_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 800077c:	f000 f9fc 	bl	8000b78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000780:	2302      	movs	r3, #2
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000788:	2301      	movs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800079e:	f000 fdf5 	bl	800138c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 80007b2:	f000 f9e1 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	50000100 	.word	0x50000100

080007c8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <_ZL11MX_CAN_Initv+0x74>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 8000802:	2201      	movs	r2, #1
 8000804:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 8000808:	2201      	movs	r2, #1
 800080a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 800080e:	2200      	movs	r2, #0
 8000810:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 8000814:	2200      	movs	r2, #0
 8000816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <_ZL11MX_CAN_Initv+0x70>)
 800081a:	f001 f8df 	bl	80019dc <HAL_CAN_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 800082e:	f000 f9a3 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000078 	.word	0x20000078
 800083c:	40006400 	.word	0x40006400

08000840 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2224      	movs	r2, #36	; 0x24
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fd9e 	bl	8005390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000886:	2301      	movs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800089e:	2301      	movs	r3, #1
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80008b2:	f003 fb6b 	bl	8003f8c <HAL_TIM_Encoder_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80008c6:	f000 f957 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <_ZL12MX_TIM2_Initv+0xb8>)
 80008d8:	f004 f994 	bl	8004c04 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80008ec:	f000 f944 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a0 	.word	0x200000a0

080008fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <_ZL12MX_TIM3_Initv+0x11c>)
 8000932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000954:	482f      	ldr	r0, [pc, #188]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000956:	f003 fa61 	bl	8003e1c <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 800096a:	f000 f905 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000978:	4619      	mov	r1, r3
 800097a:	4826      	ldr	r0, [pc, #152]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 800097c:	f003 fcc0 	bl	8004300 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf14      	ite	ne
 8000986:	2301      	movne	r3, #1
 8000988:	2300      	moveq	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8000990:	f000 f8f2 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000996:	f003 fa98 	bl	8003eca <HAL_TIM_PWM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80009aa:	f000 f8e5 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 80009be:	f004 f921 	bl	8004c04 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf14      	ite	ne
 80009c8:	2301      	movne	r3, #1
 80009ca:	2300      	moveq	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80009d2:	f000 f8d1 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2360      	movs	r3, #96	; 0x60
 80009d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2208      	movs	r2, #8
 80009ea:	4619      	mov	r1, r3
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 80009ee:	f003 fb73 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf14      	ite	ne
 80009f8:	2301      	movne	r3, #1
 80009fa:	2300      	moveq	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000a02:	f000 f8b9 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <_ZL12MX_TIM3_Initv+0x118>)
 8000a08:	f000 f9d2 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000a0c:	bf00      	nop
 8000a0e:	3738      	adds	r7, #56	; 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000ec 	.word	0x200000ec
 8000a18:	40000400 	.word	0x40000400

08000a1c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a60:	f004 f93e 	bl	8004ce0 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f880 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000138 	.word	0x20000138
 8000a80:	40013800 	.word	0x40013800

08000a84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a34      	ldr	r2, [pc, #208]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <_ZL12MX_GPIO_Initv+0xec>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f001 ff19 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2130      	movs	r1, #48	; 0x30
 8000af2:	4820      	ldr	r0, [pc, #128]	; (8000b74 <_ZL12MX_GPIO_Initv+0xf0>)
 8000af4:	f001 ff14 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000af8:	f240 730c 	movw	r3, #1804	; 0x70c
 8000afc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 fd7c 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f001 fd6d 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <_ZL12MX_GPIO_Initv+0xf0>)
 8000b46:	f001 fd61 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b4a:	2330      	movs	r3, #48	; 0x30
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <_ZL12MX_GPIO_Initv+0xf0>)
 8000b62:	f001 fd53 	bl	800260c <HAL_GPIO_Init>

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0x74>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d124      	bne.n	8000c38 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_ADC_MspInit+0x78>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c1e:	2360      	movs	r3, #96	; 0x60
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f001 fcea 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	50000100 	.word	0x50000100
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_CAN_MspInit+0xa0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d139      	bne.n	8000cde <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_CAN_MspInit+0xa4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000cac:	2309      	movs	r3, #9
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f001 fca7 	bl	800260c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2014      	movs	r0, #20
 8000cc4:	f001 fc6b 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000cc8:	2014      	movs	r0, #20
 8000cca:	f001 fc84 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2015      	movs	r0, #21
 8000cd4:	f001 fc63 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000cd8:	2015      	movs	r0, #21
 8000cda:	f001 fc7c 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40006400 	.word	0x40006400
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d128      	bne.n	8000d64 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d42:	2303      	movs	r3, #3
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d52:	2301      	movs	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f001 fc54 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40000400 	.word	0x40000400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_TIM_MspPostInit+0x64>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11b      	bne.n	8000e0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	2301      	movs	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000e06:	f001 fc01 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0x7c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d127      	bne.n	8000e92 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e72:	23c0      	movs	r3, #192	; 0xc0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e8e:	f001 fbbd 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f898 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <CAN_RX0_IRQHandler+0x10>)
 8000f02:	f001 f842 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000078 	.word	0x20000078

08000f10 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <CAN_RX1_IRQHandler+0x10>)
 8000f16:	f001 f838 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000078 	.word	0x20000078

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffd7 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 f9e7 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fb31 	bl	80005e0 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f80:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f8c:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8000f90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f94:	200001c4 	.word	0x200001c4

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x28>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f001 faeb 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fde4 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fb03 	bl	80025f2 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f001 facb 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	200001c0 	.word	0x200001c0

08001050 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;  
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200001c0 	.word	0x200001c0

08001068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09a      	sub	sp, #104	; 0x68
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e172      	b.n	800136e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	d176      	bne.n	8001188 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d152      	bne.n	8001148 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fd85 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d13b      	bne.n	8001148 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fc1d 	bl	8001910 <ADC_Disable>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d12f      	bne.n	8001148 <HAL_ADC_Init+0xe0>
 80010e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d12b      	bne.n	8001148 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	f043 0202 	orr.w	r2, r3, #2
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001112:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001122:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001124:	4b94      	ldr	r3, [pc, #592]	; (8001378 <HAL_ADC_Init+0x310>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a94      	ldr	r2, [pc, #592]	; (800137c <HAL_ADC_Init+0x314>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9a      	lsrs	r2, r3, #18
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800113a:	e002      	b.n	8001142 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3b01      	subs	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f9      	bne.n	800113c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001164:	d110      	bne.n	8001188 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f023 0312 	bic.w	r3, r3, #18
 800116e:	f043 0210 	orr.w	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	f040 80df 	bne.w	8001354 <HAL_ADC_Init+0x2ec>
 8001196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 80da 	bne.w	8001354 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 80d2 	bne.w	8001354 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011b8:	f043 0202 	orr.w	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <HAL_ADC_Init+0x318>)
 80011c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011cc:	d102      	bne.n	80011d4 <HAL_ADC_Init+0x16c>
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_ADC_Init+0x31c>)
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e002      	b.n	80011da <HAL_ADC_Init+0x172>
 80011d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_ADC_Init+0x192>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x192>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_ADC_Init+0x194>
 80011fa:	2300      	movs	r3, #0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11c      	bne.n	800123a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001200:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d010      	beq.n	8001228 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_ADC_Init+0x1ba>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x1ba>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_ADC_Init+0x1bc>
 8001222:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001224:	2b00      	cmp	r3, #0
 8001226:	d108      	bne.n	800123a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	431a      	orrs	r2, r3
 8001236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001238:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7e5b      	ldrb	r3, [r3, #25]
 800123e:	035b      	lsls	r3, r3, #13
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001244:	2a01      	cmp	r2, #1
 8001246:	d002      	beq.n	800124e <HAL_ADC_Init+0x1e6>
 8001248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124c:	e000      	b.n	8001250 <HAL_ADC_Init+0x1e8>
 800124e:	2200      	movs	r2, #0
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4313      	orrs	r3, r2
 800125e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001260:	4313      	orrs	r3, r2
 8001262:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d11b      	bne.n	80012a6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	3b01      	subs	r3, #1
 800127c:	045a      	lsls	r2, r3, #17
 800127e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001280:	4313      	orrs	r3, r2
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	663b      	str	r3, [r7, #96]	; 0x60
 8001288:	e00d      	b.n	80012a6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d007      	beq.n	80012be <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	4313      	orrs	r3, r2
 80012b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ba:	4313      	orrs	r3, r2
 80012bc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d114      	bne.n	80012f6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012da:	f023 0302 	bic.w	r3, r3, #2
 80012de:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e1b      	ldrb	r3, [r3, #24]
 80012e4:	039a      	lsls	r2, r3, #14
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4313      	orrs	r3, r2
 80012f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012f2:	4313      	orrs	r3, r2
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_ADC_Init+0x320>)
 80012fe:	4013      	ands	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001306:	430b      	orrs	r3, r1
 8001308:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10c      	bne.n	800132c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f023 010f 	bic.w	r1, r3, #15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
 800132a:	e007      	b.n	800133c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020f 	bic.w	r2, r2, #15
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
 8001352:	e00a      	b.n	800136a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f023 0312 	bic.w	r3, r3, #18
 800135c:	f043 0210 	orr.w	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001364:	2301      	movs	r3, #1
 8001366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800136e:	4618      	mov	r0, r3
 8001370:	3768      	adds	r7, #104	; 0x68
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83
 8001380:	50000300 	.word	0x50000300
 8001384:	50000100 	.word	0x50000100
 8001388:	fff0c007 	.word	0xfff0c007

0800138c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800138c:	b480      	push	{r7}
 800138e:	b09b      	sub	sp, #108	; 0x6c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x22>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e2a5      	b.n	80018fa <HAL_ADC_ConfigChannel+0x56e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f040 8289 	bne.w	80018d8 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d81c      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	461a      	mov	r2, r3
 80013e2:	231f      	movs	r3, #31
 80013e4:	4093      	lsls	r3, r2
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4019      	ands	r1, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
 8001406:	e063      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d81e      	bhi.n	800144e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	3b1e      	subs	r3, #30
 8001424:	221f      	movs	r2, #31
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	4019      	ands	r1, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	3b1e      	subs	r3, #30
 8001440:	fa00 f203 	lsl.w	r2, r0, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
 800144c:	e040      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b0e      	cmp	r3, #14
 8001454:	d81e      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	3b3c      	subs	r3, #60	; 0x3c
 800146a:	221f      	movs	r2, #31
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	3b3c      	subs	r3, #60	; 0x3c
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
 8001492:	e01d      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3b5a      	subs	r3, #90	; 0x5a
 80014a8:	221f      	movs	r2, #31
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4019      	ands	r1, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	3b5a      	subs	r3, #90	; 0x5a
 80014c4:	fa00 f203 	lsl.w	r2, r0, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 80e5 	bne.w	80016aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d91c      	bls.n	8001522 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6999      	ldr	r1, [r3, #24]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	3b1e      	subs	r3, #30
 80014fa:	2207      	movs	r2, #7
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	4019      	ands	r1, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6898      	ldr	r0, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	3b1e      	subs	r3, #30
 8001514:	fa00 f203 	lsl.w	r2, r0, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	e019      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6959      	ldr	r1, [r3, #20]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	2207      	movs	r2, #7
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4019      	ands	r1, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	fa00 f203 	lsl.w	r2, r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	3b01      	subs	r3, #1
 8001574:	2b03      	cmp	r3, #3
 8001576:	d84f      	bhi.n	8001618 <HAL_ADC_ConfigChannel+0x28c>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <HAL_ADC_ConfigChannel+0x1f4>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	08001591 	.word	0x08001591
 8001584:	080015b3 	.word	0x080015b3
 8001588:	080015d5 	.word	0x080015d5
 800158c:	080015f7 	.word	0x080015f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001596:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_ADC_ConfigChannel+0x484>)
 8001598:	4013      	ands	r3, r2
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	0691      	lsls	r1, r2, #26
 80015a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a2:	430a      	orrs	r2, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b0:	e07e      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b8:	4b95      	ldr	r3, [pc, #596]	; (8001810 <HAL_ADC_ConfigChannel+0x484>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	0691      	lsls	r1, r2, #26
 80015c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c4:	430a      	orrs	r2, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d2:	e06d      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015da:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <HAL_ADC_ConfigChannel+0x484>)
 80015dc:	4013      	ands	r3, r2
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	0691      	lsls	r1, r2, #26
 80015e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015e6:	430a      	orrs	r2, r1
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015f4:	e05c      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_ADC_ConfigChannel+0x484>)
 80015fe:	4013      	ands	r3, r2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	0691      	lsls	r1, r2, #26
 8001606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001608:	430a      	orrs	r2, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001614:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001616:	e04b      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	069b      	lsls	r3, r3, #26
 8001628:	429a      	cmp	r2, r3
 800162a:	d107      	bne.n	800163c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800163a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	069b      	lsls	r3, r3, #26
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800165e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	069b      	lsls	r3, r3, #26
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001682:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	069b      	lsls	r3, r3, #26
 8001694:	429a      	cmp	r2, r3
 8001696:	d10a      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016a8:	e001      	b.n	80016ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80016ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x344>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x344>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x346>
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 810b 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d00f      	beq.n	8001700 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016fe:	e049      	b.n	8001794 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d91c      	bls.n	800175c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6999      	ldr	r1, [r3, #24]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1b      	subs	r3, #27
 8001734:	2207      	movs	r2, #7
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6898      	ldr	r0, [r3, #8]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	3b1b      	subs	r3, #27
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	e01b      	b.n	8001794 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6959      	ldr	r1, [r3, #20]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6898      	ldr	r0, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_ADC_ConfigChannel+0x488>)
 8001796:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b10      	cmp	r3, #16
 800179e:	d105      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d015      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	f040 8092 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 808b 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e0:	d102      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x45c>
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_ADC_ConfigChannel+0x48c>)
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e002      	b.n	80017ee <HAL_ADC_ConfigChannel+0x462>
 80017e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10f      	bne.n	800181c <HAL_ADC_ConfigChannel+0x490>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_ADC_ConfigChannel+0x490>
 800180a:	2301      	movs	r3, #1
 800180c:	e007      	b.n	800181e <HAL_ADC_ConfigChannel+0x492>
 800180e:	bf00      	nop
 8001810:	83fff000 	.word	0x83fff000
 8001814:	50000300 	.word	0x50000300
 8001818:	50000100 	.word	0x50000100
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d150      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001822:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001824:	2b00      	cmp	r3, #0
 8001826:	d010      	beq.n	800184a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x4b8>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x4b8>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_ADC_ConfigChannel+0x4ba>
 8001844:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13c      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d11d      	bne.n	800188e <HAL_ADC_ConfigChannel+0x502>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185a:	d118      	bne.n	800188e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_ADC_ConfigChannel+0x57c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_ADC_ConfigChannel+0x580>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9a      	lsrs	r2, r3, #18
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800187e:	e002      	b.n	8001886 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f9      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800188c:	e02e      	b.n	80018ec <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b11      	cmp	r3, #17
 8001894:	d10b      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x522>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189e:	d106      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ac:	e01e      	b.n	80018ec <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d11a      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018c2:	e013      	b.n	80018ec <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0220 	orr.w	r2, r3, #32
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018d6:	e00a      	b.n	80018ee <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018ea:	e000      	b.n	80018ee <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	376c      	adds	r7, #108	; 0x6c
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <ADC_Disable+0x2c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <ADC_Disable+0x2c>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <ADC_Disable+0x2e>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d047      	beq.n	80019d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030d 	and.w	r3, r3, #13
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10f      	bne.n	8001970 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0202 	orr.w	r2, r2, #2
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2203      	movs	r2, #3
 8001966:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001968:	f7ff fb72 	bl	8001050 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800196e:	e029      	b.n	80019c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e023      	b.n	80019d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800198c:	f7ff fb60 	bl	8001050 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d914      	bls.n	80019c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10d      	bne.n	80019c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f043 0210 	orr.w	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e007      	b.n	80019d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d0dc      	beq.n	800198c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0ed      	b.n	8001bca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f924 	bl	8000c48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff fb1e 	bl	8001050 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a16:	e012      	b.n	8001a3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a18:	f7ff fb1a 	bl	8001050 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d90b      	bls.n	8001a3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2205      	movs	r2, #5
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0c5      	b.n	8001bca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0e5      	beq.n	8001a18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0202 	bic.w	r2, r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7ff faf8 	bl	8001050 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a62:	e012      	b.n	8001a8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a64:	f7ff faf4 	bl	8001050 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d90b      	bls.n	8001a8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2205      	movs	r2, #5
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e09f      	b.n	8001bca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e5      	bne.n	8001a64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7e5b      	ldrb	r3, [r3, #25]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e007      	b.n	8001aec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7e9b      	ldrb	r3, [r3, #26]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0220 	bic.w	r2, r2, #32
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7edb      	ldrb	r3, [r3, #27]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0210 	bic.w	r2, r2, #16
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e007      	b.n	8001b40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0210 	orr.w	r2, r2, #16
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7f1b      	ldrb	r3, [r3, #28]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0208 	bic.w	r2, r2, #8
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7f5b      	ldrb	r3, [r3, #29]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0204 	orr.w	r2, r2, #4
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e007      	b.n	8001b94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	ea42 0103 	orr.w	r1, r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b087      	sub	sp, #28
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bea:	7cfb      	ldrb	r3, [r7, #19]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d003      	beq.n	8001bf8 <HAL_CAN_ConfigFilter+0x26>
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	f040 80aa 	bne.w	8001d4c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2201      	movs	r2, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d123      	bne.n	8001c7a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3248      	adds	r2, #72	; 0x48
 8001c5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c70:	6979      	ldr	r1, [r7, #20]
 8001c72:	3348      	adds	r3, #72	; 0x48
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d122      	bne.n	8001cc8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3248      	adds	r2, #72	; 0x48
 8001ca8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cbe:	6979      	ldr	r1, [r7, #20]
 8001cc0:	3348      	adds	r3, #72	; 0x48
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ce2:	e007      	b.n	8001cf4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d0e:	e007      	b.n	8001d20 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d3e:	f023 0201 	bic.w	r2, r3, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e006      	b.n	8001d5a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d66:	b480      	push	{r7}
 8001d68:	b087      	sub	sp, #28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d003      	beq.n	8001d8a <HAL_CAN_GetRxMessage+0x24>
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f040 80f3 	bne.w	8001f70 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0e7      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d8      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	331b      	adds	r3, #27
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0204 	and.w	r2, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	331b      	adds	r3, #27
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0d5b      	lsrs	r3, r3, #21
 8001dfa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	331b      	adds	r3, #27
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	331b      	adds	r3, #27
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0202 	and.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	331b      	adds	r3, #27
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	331b      	adds	r3, #27
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	331b      	adds	r3, #27
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0a1a      	lsrs	r2, r3, #8
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0c1a      	lsrs	r2, r3, #16
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e1a      	lsrs	r2, r3, #24
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0a1a      	lsrs	r2, r3, #8
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0c1a      	lsrs	r2, r3, #16
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	3306      	adds	r3, #6
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e1a      	lsrs	r2, r3, #24
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	3307      	adds	r3, #7
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	e007      	b.n	8001f6c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e006      	b.n	8001f7e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b08a      	sub	sp, #40	; 0x28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d07c      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d023      	beq.n	8002022 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f983 	bl	80022f8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ff2:	e016      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e00c      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	e002      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f989 	bl	8002334 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d024      	beq.n	8002076 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f963 	bl	800230c <HAL_CAN_TxMailbox1CompleteCallback>
 8002046:	e016      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e00c      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e002      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f969 	bl	8002348 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d024      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002088:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f943 	bl	8002320 <HAL_CAN_TxMailbox2CompleteCallback>
 800209a:	e016      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e00c      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e002      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f949 	bl	800235c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f930 	bl	8002370 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe f8e3 	bl	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2210      	movs	r2, #16
 8002150:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f912 	bl	8002398 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8f9 	bl	8002384 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2210      	movs	r2, #16
 80021ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8fc 	bl	80023ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8f5 	bl	80023c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d07b      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d072      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d043      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03e      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d02b      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x32a>
 800225c:	2b60      	cmp	r3, #96	; 0x60
 800225e:	d82e      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d022      	beq.n	80022aa <HAL_CAN_IRQHandler+0x320>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d82a      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d019      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x316>
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d826      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d010      	beq.n	8002296 <HAL_CAN_IRQHandler+0x30c>
 8002274:	2b30      	cmp	r3, #48	; 0x30
 8002276:	d822      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002278:	2b10      	cmp	r3, #16
 800227a:	d002      	beq.n	8002282 <HAL_CAN_IRQHandler+0x2f8>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d005      	beq.n	800228c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002280:	e01d      	b.n	80022be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800228a:	e019      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002294:	e014      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229e:	e00f      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a8:	e00a      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b2:	e005      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022bc:	e000      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80022be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f872 	bl	80023d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e14e      	b.n	80028ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8140 	beq.w	80028b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0201 	and.w	r2, r3, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 809a 	beq.w	80028b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002798:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_GPIO_Init+0x2d0>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1e0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2d4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x2d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1d8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <HAL_GPIO_Init+0x2dc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1d4>
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e0:	2305      	movs	r3, #5
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027ec:	2300      	movs	r3, #0
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <HAL_GPIO_Init+0x2d0>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028ae:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f aea9 	bne.w	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	48000400 	.word	0x48000400
 80028e4:	48000800 	.word	0x48000800
 80028e8:	48000c00 	.word	0x48000c00
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800293c:	e002      	b.n	8002944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002956:	af00      	add	r7, sp, #0
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f000 bef4 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 816a 	beq.w	8002c4e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800297a:	4bb3      	ldr	r3, [pc, #716]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002986:	4bb0      	ldr	r3, [pc, #704]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d159      	bne.n	8002a46 <HAL_RCC_OscConfig+0xf6>
 8002992:	4bad      	ldr	r3, [pc, #692]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d152      	bne.n	8002a46 <HAL_RCC_OscConfig+0xf6>
 80029a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_OscConfig+0x82>
 80029cc:	4b9e      	ldr	r3, [pc, #632]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0xae>
 80029d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029fa:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 810c 	beq.w	8002c4c <HAL_RCC_OscConfig+0x2fc>
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 8106 	bne.w	8002c4c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f000 be86 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x110>
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e030      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x134>
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x15a>
 8002a90:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x172>
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a66      	ldr	r2, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a63      	ldr	r2, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f023 020f 	bic.w	r2, r3, #15
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495d      	ldr	r1, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d059      	beq.n	8002b94 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fab6 	bl	8001050 <HAL_GetTick>
 8002ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aea:	f7fe fab1 	bl	8001050 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d902      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	f000 be29 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0x1e2>
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x20e>
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b4e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b72:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ab      	beq.n	8002aea <HAL_RCC_OscConfig+0x19a>
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fa5c 	bl	8001050 <HAL_GetTick>
 8002b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fa57 	bl	8001050 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d902      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	f000 bdcf 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x296>
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x2c2>
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCC_OscConfig+0x2f8>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c26:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ab      	bne.n	8002b9e <HAL_RCC_OscConfig+0x24e>
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_OscConfig+0x2fe>
 8002c48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 816f 	beq.w	8002f3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c5e:	4bd0      	ldr	r3, [pc, #832]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c6a:	4bcd      	ldr	r3, [pc, #820]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d16c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x400>
 8002c76:	4bca      	ldr	r3, [pc, #808]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d166      	bne.n	8002d50 <HAL_RCC_OscConfig+0x400>
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x362>
 8002cac:	4bbc      	ldr	r3, [pc, #752]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0x38a>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cd6:	4bb2      	ldr	r3, [pc, #712]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ce0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f042 0220 	orr.w	r2, r2, #32
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f002 021f 	and.w	r2, r2, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f000 bd1b 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4ba0      	ldr	r3, [pc, #640]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	21f8      	movs	r1, #248	; 0xf8
 8002d2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d34:	fa91 f1a1 	rbit	r1, r1
 8002d38:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d40:	fab1 f181 	clz	r1, r1
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	408b      	lsls	r3, r1
 8002d48:	4995      	ldr	r1, [pc, #596]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e0f5      	b.n	8002f3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8085 	beq.w	8002e66 <HAL_RCC_OscConfig+0x516>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2301      	movs	r3, #1
 8002d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f962 	bl	8001050 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe f95d 	bl	8001050 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	f000 bcd5 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x488>
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0x4b0>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002df0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2202      	movs	r2, #2
 8002e02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0af      	beq.n	8002d92 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	21f8      	movs	r1, #248	; 0xf8
 8002e42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e4a:	fa91 f1a1 	rbit	r1, r1
 8002e4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e56:	fab1 f181 	clz	r1, r1
 8002e5a:	b2c9      	uxtb	r1, r1
 8002e5c:	408b      	lsls	r3, r1
 8002e5e:	4950      	ldr	r1, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e06a      	b.n	8002f3c <HAL_RCC_OscConfig+0x5ec>
 8002e66:	2301      	movs	r3, #1
 8002e68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe f8dd 	bl	8001050 <HAL_GetTick>
 8002e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7fe f8d8 	bl	8001050 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f000 bc50 	b.w	8003752 <HAL_RCC_OscConfig+0xe02>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x592>
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e013      	b.n	8002f0a <HAL_RCC_OscConfig+0x5ba>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002efa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCC_OscConfig+0x650>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f20:	fab2 f282 	clz	r2, r2
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f042 0220 	orr.w	r2, r2, #32
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f002 021f 	and.w	r2, r2, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f202 	lsl.w	r2, r1, r2
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1af      	bne.n	8002e9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80da 	beq.w	8003100 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d069      	beq.n	800302a <HAL_RCC_OscConfig+0x6da>
 8002f56:	2301      	movs	r3, #1
 8002f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x654>)
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7fe f866 	bl	8001050 <HAL_GetTick>
 8002f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f861 	bl	8001050 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d906      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e3d9      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	10908120 	.word	0x10908120
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f1a3 	rbit	r1, r3
 8003000:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003004:	6019      	str	r1, [r3, #0]
  return result;
 8003006:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0b0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x63a>
 8003028:	e06a      	b.n	8003100 <HAL_RCC_OscConfig+0x7b0>
 800302a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003040:	601a      	str	r2, [r3, #0]
  return result;
 8003042:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003046:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <HAL_RCC_OscConfig+0x934>)
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	461a      	mov	r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fd fff8 	bl	8001050 <HAL_GetTick>
 8003060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e009      	b.n	800307a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003066:	f7fd fff3 	bl	8001050 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e36b      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800307a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030ca:	2102      	movs	r1, #2
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f1a3 	rbit	r1, r3
 80030d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030dc:	6019      	str	r1, [r3, #0]
  return result;
 80030de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1b2      	bne.n	8003066 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8158 	beq.w	80033c0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b57      	ldr	r3, [pc, #348]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11a      	bne.n	800318a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003160:	f7fd ff76 	bl	8001050 <HAL_GetTick>
 8003164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e009      	b.n	800317e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fd ff71 	bl	8001050 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e2e9      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_RCC_OscConfig+0x938>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ef      	beq.n	800316a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x852>
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a39      	ldr	r2, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	e02f      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x876>
 80031ac:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a33      	ldr	r2, [pc, #204]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e01d      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d10c      	bne.n	80031ea <HAL_RCC_OscConfig+0x89a>
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0x8b2>
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d06b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fd ff20 	bl	8001050 <HAL_GetTick>
 8003210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fd ff1b 	bl	8001050 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e291      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800322e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800324a:	2202      	movs	r2, #2
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800325c:	601a      	str	r2, [r3, #0]
  return result;
 800325e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d109      	bne.n	800328c <HAL_RCC_OscConfig+0x93c>
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <HAL_RCC_OscConfig+0x930>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	e014      	b.n	80032a8 <HAL_RCC_OscConfig+0x958>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	10908120 	.word	0x10908120
 8003288:	40007000 	.word	0x40007000
 800328c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003290:	2202      	movs	r2, #2
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4bbb      	ldr	r3, [pc, #748]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032ac:	2102      	movs	r1, #2
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	fa92 f1a2 	rbit	r1, r2
 80032ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032be:	6011      	str	r1, [r2, #0]
  return result;
 80032c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d099      	beq.n	8003216 <HAL_RCC_OscConfig+0x8c6>
 80032e2:	e063      	b.n	80033ac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fd feb4 	bl	8001050 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd feaf 	bl	8001050 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e225      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003334:	601a      	str	r2, [r3, #0]
  return result;
 8003336:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800333a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d102      	bne.n	8003356 <HAL_RCC_OscConfig+0xa06>
 8003350:	4b90      	ldr	r3, [pc, #576]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	e00d      	b.n	8003372 <HAL_RCC_OscConfig+0xa22>
 8003356:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4b89      	ldr	r3, [pc, #548]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003376:	2102      	movs	r1, #2
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fa92 f1a2 	rbit	r1, r2
 8003384:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003388:	6011      	str	r1, [r2, #0]
  return result;
 800338a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f002 021f 	and.w	r2, r2, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1a0      	bne.n	80032ee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a76      	ldr	r2, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 81c2 	beq.w	8003750 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	4b71      	ldr	r3, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	f000 819c 	beq.w	8003712 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f040 8114 	bne.w	800360e <HAL_RCC_OscConfig+0xcbe>
 80033e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033fe:	601a      	str	r2, [r3, #0]
  return result;
 8003400:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003404:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003410:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fd fe18 	bl	8001050 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003424:	e009      	b.n	800343a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fd fe13 	bl	8001050 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e18b      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 800343a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800343e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003452:	601a      	str	r2, [r3, #0]
  return result;
 8003454:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003458:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_RCC_OscConfig+0xb24>
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	e01b      	b.n	80034ac <HAL_RCC_OscConfig+0xb5c>
 8003474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	fa92 f1a2 	rbit	r1, r2
 80034c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034c4:	6011      	str	r1, [r2, #0]
  return result;
 80034c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	fab2 f282 	clz	r2, r2
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f042 0220 	orr.w	r2, r2, #32
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f002 021f 	and.w	r2, r2, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d19e      	bne.n	8003426 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	4925      	ldr	r1, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
 8003504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800351c:	601a      	str	r2, [r3, #0]
  return result;
 800351e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003522:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800352e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	461a      	mov	r2, r3
 8003536:	2301      	movs	r3, #1
 8003538:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fd89 	bl	8001050 <HAL_GetTick>
 800353e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003542:	e009      	b.n	8003558 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fd84 	bl	8001050 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0fc      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800355c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003570:	601a      	str	r2, [r3, #0]
  return result;
 8003572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003576:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0xc48>
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0xc44>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	e01e      	b.n	80035d0 <HAL_RCC_OscConfig+0xc80>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	fa92 f1a2 	rbit	r1, r2
 80035e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035e8:	6011      	str	r1, [r2, #0]
  return result;
 80035ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d09b      	beq.n	8003544 <HAL_RCC_OscConfig+0xbf4>
 800360c:	e0a0      	b.n	8003750 <HAL_RCC_OscConfig+0xe00>
 800360e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fd04 	bl	8001050 <HAL_GetTick>
 8003648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e009      	b.n	8003662 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fd fcff 	bl	8001050 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e077      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
 8003662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003680:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_RCC_OscConfig+0xd4c>
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e01b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd84>
 800369c:	f107 0320 	add.w	r3, r7, #32
 80036a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f107 0320 	add.w	r3, r7, #32
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f107 031c 	add.w	r3, r7, #28
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f107 0318 	add.w	r3, r7, #24
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f107 0210 	add.w	r2, r7, #16
 80036d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	f107 0210 	add.w	r2, r7, #16
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fa92 f1a2 	rbit	r1, r2
 80036e8:	f107 020c 	add.w	r2, r7, #12
 80036ec:	6011      	str	r1, [r2, #0]
  return result;
 80036ee:	f107 020c 	add.w	r2, r7, #12
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d19e      	bne.n	800364e <HAL_RCC_OscConfig+0xcfe>
 8003710:	e01e      	b.n	8003750 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e018      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0xe0c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003728:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800372c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	429a      	cmp	r2, r3
 8003738:	d108      	bne.n	800374c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800373a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800373e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09e      	sub	sp, #120	; 0x78
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e162      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	498b      	ldr	r1, [pc, #556]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e14a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	497f      	ldr	r1, [pc, #508]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80dc 	beq.w	800398c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d13c      	bne.n	8003856 <HAL_RCC_ClockConfig+0xf6>
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_ClockConfig+0xa6>
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	e00f      	b.n	8003826 <HAL_RCC_ClockConfig+0xc6>
 8003806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	667b      	str	r3, [r7, #100]	; 0x64
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	663b      	str	r3, [r7, #96]	; 0x60
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382a:	65ba      	str	r2, [r7, #88]	; 0x58
 800382c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d17b      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0f3      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d13c      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x178>
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_ClockConfig+0x128>
 8003882:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_ClockConfig+0x148>
 8003888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d13a      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b2      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80038d8:	2302      	movs	r3, #2
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1a0>
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e00d      	b.n	800391c <HAL_RCC_ClockConfig+0x1bc>
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	2302      	movs	r3, #2
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2202      	movs	r2, #2
 800391e:	61ba      	str	r2, [r7, #24]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	fa92 f2a2 	rbit	r2, r2
 8003926:	617a      	str	r2, [r7, #20]
  return result;
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e079      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	491a      	ldr	r1, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395c:	f7fd fb78 	bl	8001050 <HAL_GetTick>
 8003960:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fd fb74 	bl	8001050 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e061      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d214      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	491a      	ldr	r1, [pc, #104]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4912      	ldr	r1, [pc, #72]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a02:	f000 f829 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	22f0      	movs	r2, #240	; 0xf0
 8003a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	40d3      	lsrs	r3, r2
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x2ec>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_RCC_ClockConfig+0x2f0>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_ClockConfig+0x2f4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fac6 	bl	8000fc8 <HAL_InitTick>
  
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3778      	adds	r7, #120	; 0x78
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	080053b8 	.word	0x080053b8
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000004 	.word	0x20000004

08003a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b08b      	sub	sp, #44	; 0x2c
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x30>
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x36>
 8003a86:	e03c      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a8a:	623b      	str	r3, [r7, #32]
      break;
 8003a8c:	e03c      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	607a      	str	r2, [r7, #4]
  return result;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	40d3      	lsrs	r3, r2
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	220f      	movs	r2, #15
 8003abc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	fa92 f2a2 	rbit	r2, r2
 8003ac4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	40d3      	lsrs	r3, r2
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	e004      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b04:	623b      	str	r3, [r7, #32]
      break;
 8003b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	372c      	adds	r7, #44	; 0x2c
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	00b71b00 	.word	0x00b71b00
 8003b20:	080053d0 	.word	0x080053d0
 8003b24:	080053e0 	.word	0x080053e0
 8003b28:	003d0900 	.word	0x003d0900
 8003b2c:	007a1200 	.word	0x007a1200

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000000 	.word	0x20000000

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b4e:	f7ff ffef 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b52:	4601      	mov	r1, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	fa92 f2a2 	rbit	r2, r2
 8003b68:	603a      	str	r2, [r7, #0]
  return result;
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	fab2 f282 	clz	r2, r2
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	40d3      	lsrs	r3, r2
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	080053c8 	.word	0x080053c8

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b92:	f7ff ffcd 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b96:	4601      	mov	r1, r0
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ba0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ba4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	fa92 f2a2 	rbit	r2, r2
 8003bac:	603a      	str	r2, [r7, #0]
  return result;
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	fab2 f282 	clz	r2, r2
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	40d3      	lsrs	r3, r2
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	080053c8 	.word	0x080053c8

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b092      	sub	sp, #72	; 0x48
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80cd 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf4:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10e      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	4b83      	ldr	r3, [pc, #524]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	4a82      	ldr	r2, [pc, #520]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	61d3      	str	r3, [r2, #28]
 8003c0c:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d118      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a79      	ldr	r2, [pc, #484]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c36:	f7fd fa0b 	bl	8001050 <HAL_GetTick>
 8003c3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	e008      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3e:	f7fd fa07 	bl	8001050 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	; 0x64
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0db      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	4b70      	ldr	r3, [pc, #448]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d07d      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d076      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ccc:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d045      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fd f9b8 	bl	8001050 <HAL_GetTick>
 8003ce0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd f9b4 	bl	8001050 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e086      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	2302      	movs	r3, #2
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	61fb      	str	r3, [r7, #28]
  return result;
 8003d12:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f043 0302 	orr.w	r3, r3, #2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d102      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	e007      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2202      	movs	r2, #2
 8003d40:	613a      	str	r2, [r7, #16]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	fa92 f2a2 	rbit	r2, r2
 8003d48:	60fa      	str	r2, [r7, #12]
  return result;
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f002 021f 	and.w	r2, r2, #31
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0bd      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d68:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4926      	ldr	r1, [pc, #152]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	491a      	ldr	r1, [pc, #104]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f023 0210 	bic.w	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4912      	ldr	r1, [pc, #72]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	490b      	ldr	r1, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3748      	adds	r7, #72	; 0x48
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	10908100 	.word	0x10908100

08003e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e049      	b.n	8003ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fc ff94 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fb1a 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e049      	b.n	8003f70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f841 	bl	8003f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f000 fac3 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e097      	b.n	80040d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fe9b 	bl	8000cf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003fd0:	f023 0307 	bic.w	r3, r3, #7
 8003fd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fa57 	bl	8004494 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	4313      	orrs	r3, r2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800402c:	f023 030c 	bic.w	r3, r3, #12
 8004030:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	4313      	orrs	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	031b      	lsls	r3, r3, #12
 800405c:	4313      	orrs	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4313      	orrs	r3, r2
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0ff      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b14      	cmp	r3, #20
 8004102:	f200 80f0 	bhi.w	80042e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004161 	.word	0x08004161
 8004110:	080042e7 	.word	0x080042e7
 8004114:	080042e7 	.word	0x080042e7
 8004118:	080042e7 	.word	0x080042e7
 800411c:	080041a1 	.word	0x080041a1
 8004120:	080042e7 	.word	0x080042e7
 8004124:	080042e7 	.word	0x080042e7
 8004128:	080042e7 	.word	0x080042e7
 800412c:	080041e3 	.word	0x080041e3
 8004130:	080042e7 	.word	0x080042e7
 8004134:	080042e7 	.word	0x080042e7
 8004138:	080042e7 	.word	0x080042e7
 800413c:	08004223 	.word	0x08004223
 8004140:	080042e7 	.word	0x080042e7
 8004144:	080042e7 	.word	0x080042e7
 8004148:	080042e7 	.word	0x080042e7
 800414c:	08004265 	.word	0x08004265
 8004150:	080042e7 	.word	0x080042e7
 8004154:	080042e7 	.word	0x080042e7
 8004158:	080042e7 	.word	0x080042e7
 800415c:	080042a5 	.word	0x080042a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fa0c 	bl	8004584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0204 	bic.w	r2, r2, #4
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
      break;
 800419e:	e0a5      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa72 	bl	8004690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	619a      	str	r2, [r3, #24]
      break;
 80041e0:	e084      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fad1 	bl	8004790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0208 	orr.w	r2, r2, #8
 80041fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0204 	bic.w	r2, r2, #4
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	61da      	str	r2, [r3, #28]
      break;
 8004220:	e064      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb2f 	bl	800488c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	61da      	str	r2, [r3, #28]
      break;
 8004262:	e043      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb72 	bl	8004954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0208 	orr.w	r2, r2, #8
 800427e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0204 	bic.w	r2, r2, #4
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042a2:	e023      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fbb0 	bl	8004a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042e4:	e002      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop

08004300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e0b6      	b.n	800448a <HAL_TIM_ConfigClockSource+0x18a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800433e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d03e      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0xd8>
 800435a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435e:	f200 8087 	bhi.w	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	f000 8086 	beq.w	8004476 <HAL_TIM_ConfigClockSource+0x176>
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d87f      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b70      	cmp	r3, #112	; 0x70
 8004372:	d01a      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xaa>
 8004374:	2b70      	cmp	r3, #112	; 0x70
 8004376:	d87b      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004378:	2b60      	cmp	r3, #96	; 0x60
 800437a:	d050      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x11e>
 800437c:	2b60      	cmp	r3, #96	; 0x60
 800437e:	d877      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d03c      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xfe>
 8004384:	2b50      	cmp	r3, #80	; 0x50
 8004386:	d873      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d058      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x13e>
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d86f      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d064      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x15e>
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d86b      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 8004398:	2b20      	cmp	r3, #32
 800439a:	d060      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x15e>
 800439c:	2b20      	cmp	r3, #32
 800439e:	d867      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05c      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x15e>
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d05a      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x15e>
 80043a8:	e062      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6899      	ldr	r1, [r3, #8]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f000 fc03 	bl	8004bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	609a      	str	r2, [r3, #8]
      break;
 80043d6:	e04f      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f000 fbec 	bl	8004bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043fa:	609a      	str	r2, [r3, #8]
      break;
 80043fc:	e03c      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 fb60 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2150      	movs	r1, #80	; 0x50
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fbb9 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800441c:	e02c      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fb7f 	bl	8004b2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2160      	movs	r1, #96	; 0x60
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fba9 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800443c:	e01c      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fb40 	bl	8004ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2140      	movs	r1, #64	; 0x40
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb99 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800445c:	e00c      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 fb90 	bl	8004b8e <TIM_ITRx_SetConfig>
      break;
 800446e:	e003      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      break;
 8004474:	e000      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <TIM_Base_SetConfig+0xdc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x28>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x28>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <TIM_Base_SetConfig+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <TIM_Base_SetConfig+0xdc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0x6a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0x6a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <TIM_Base_SetConfig+0xe0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x6a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x6a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <TIM_Base_SetConfig+0xe8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x6a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <TIM_Base_SetConfig+0xec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <TIM_Base_SetConfig+0xdc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0xc0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0xc0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a0d      	ldr	r2, [pc, #52]	; (800457c <TIM_Base_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0xc0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <TIM_Base_SetConfig+0xec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d103      	bne.n	800455c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 0302 	bic.w	r3, r3, #2
 80045d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a28      	ldr	r2, [pc, #160]	; (8004680 <TIM_OC1_SetConfig+0xfc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00b      	beq.n	80045fc <TIM_OC1_SetConfig+0x78>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a27      	ldr	r2, [pc, #156]	; (8004684 <TIM_OC1_SetConfig+0x100>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_OC1_SetConfig+0x78>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a26      	ldr	r2, [pc, #152]	; (8004688 <TIM_OC1_SetConfig+0x104>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC1_SetConfig+0x78>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a25      	ldr	r2, [pc, #148]	; (800468c <TIM_OC1_SetConfig+0x108>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10c      	bne.n	8004616 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0308 	bic.w	r3, r3, #8
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_OC1_SetConfig+0xfc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_OC1_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_OC1_SetConfig+0x100>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_OC1_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a17      	ldr	r2, [pc, #92]	; (8004688 <TIM_OC1_SetConfig+0x104>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC1_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a16      	ldr	r2, [pc, #88]	; (800468c <TIM_OC1_SetConfig+0x108>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0210 	bic.w	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0320 	bic.w	r3, r3, #32
 80046de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a24      	ldr	r2, [pc, #144]	; (8004780 <TIM_OC2_SetConfig+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10d      	bne.n	8004710 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <TIM_OC2_SetConfig+0xf0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_OC2_SetConfig+0xa0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <TIM_OC2_SetConfig+0xf4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC2_SetConfig+0xa0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a19      	ldr	r2, [pc, #100]	; (8004788 <TIM_OC2_SetConfig+0xf8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC2_SetConfig+0xa0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <TIM_OC2_SetConfig+0xfc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d113      	bne.n	8004758 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004736:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <TIM_OC3_SetConfig+0xec>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10d      	bne.n	800480e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800480c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1a      	ldr	r2, [pc, #104]	; (800487c <TIM_OC3_SetConfig+0xec>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_OC3_SetConfig+0x9e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <TIM_OC3_SetConfig+0xf0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_OC3_SetConfig+0x9e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <TIM_OC3_SetConfig+0xf4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC3_SetConfig+0x9e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a17      	ldr	r2, [pc, #92]	; (8004888 <TIM_OC3_SetConfig+0xf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d113      	bne.n	8004856 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <TIM_OC4_SetConfig+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_OC4_SetConfig+0x7c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <TIM_OC4_SetConfig+0xbc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC4_SetConfig+0x7c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a14      	ldr	r2, [pc, #80]	; (800494c <TIM_OC4_SetConfig+0xc0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC4_SetConfig+0x7c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <TIM_OC4_SetConfig+0xc4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <TIM_OC5_SetConfig+0xac>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_OC5_SetConfig+0x72>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC5_SetConfig+0xb0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_OC5_SetConfig+0x72>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <TIM_OC5_SetConfig+0xb4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC5_SetConfig+0x72>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_OC5_SetConfig+0xb8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d109      	bne.n	80049da <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	051b      	lsls	r3, r3, #20
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <TIM_OC6_SetConfig+0xb0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_OC6_SetConfig+0x74>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <TIM_OC6_SetConfig+0xb4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_OC6_SetConfig+0x74>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <TIM_OC6_SetConfig+0xb8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC6_SetConfig+0x74>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <TIM_OC6_SetConfig+0xbc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	029b      	lsls	r3, r3, #10
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0201 	bic.w	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0210 	bic.w	r2, r3, #16
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	031b      	lsls	r3, r3, #12
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f043 0307 	orr.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e054      	b.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d009      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10c      	bne.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40014000 	.word	0x40014000

08004ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e040      	b.n	8004d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc f88c 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f82c 	bl	8004d7c <UART_SetConfig>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f956 	bl	8004fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9dd 	bl	800512c <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b8a      	ldr	r3, [pc, #552]	; (8004fd0 <UART_SetConfig+0x254>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a78      	ldr	r2, [pc, #480]	; (8004fd4 <UART_SetConfig+0x258>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d120      	bne.n	8004e3a <UART_SetConfig+0xbe>
 8004df8:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <UART_SetConfig+0x25c>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d817      	bhi.n	8004e34 <UART_SetConfig+0xb8>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <UART_SetConfig+0x90>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e29 	.word	0x08004e29
 8004e14:	08004e2f 	.word	0x08004e2f
 8004e18:	08004e23 	.word	0x08004e23
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e01d      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e01a      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e017      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e014      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e011      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a67      	ldr	r2, [pc, #412]	; (8004fdc <UART_SetConfig+0x260>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d102      	bne.n	8004e4a <UART_SetConfig+0xce>
 8004e44:	2300      	movs	r3, #0
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e009      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a64      	ldr	r2, [pc, #400]	; (8004fe0 <UART_SetConfig+0x264>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d102      	bne.n	8004e5a <UART_SetConfig+0xde>
 8004e54:	2300      	movs	r3, #0
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e001      	b.n	8004e5e <UART_SetConfig+0xe2>
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	d15b      	bne.n	8004f20 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d827      	bhi.n	8004ebe <UART_SetConfig+0x142>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0xf8>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e98:	f7fe fe56 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e013      	b.n	8004ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe fe74 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61b8      	str	r0, [r7, #24]
        break;
 8004ea6:	e00f      	b.n	8004ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <UART_SetConfig+0x268>)
 8004eaa:	61bb      	str	r3, [r7, #24]
        break;
 8004eac:	e00c      	b.n	8004ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fdd3 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004eb2:	61b8      	str	r0, [r7, #24]
        break;
 8004eb4:	e008      	b.n	8004ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	61bb      	str	r3, [r7, #24]
        break;
 8004ebc:	e004      	b.n	8004ec8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d074      	beq.n	8004fb8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	005a      	lsls	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d916      	bls.n	8004f1a <UART_SetConfig+0x19e>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d212      	bcs.n	8004f1a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f023 030f 	bic.w	r3, r3, #15
 8004efc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	89fb      	ldrh	r3, [r7, #14]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	89fa      	ldrh	r2, [r7, #14]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e04e      	b.n	8004fb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	77bb      	strb	r3, [r7, #30]
 8004f1e:	e04b      	b.n	8004fb8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d827      	bhi.n	8004f76 <UART_SetConfig+0x1fa>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x1b0>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f77 	.word	0x08004f77
 8004f3c:	08004f67 	.word	0x08004f67
 8004f40:	08004f77 	.word	0x08004f77
 8004f44:	08004f77 	.word	0x08004f77
 8004f48:	08004f77 	.word	0x08004f77
 8004f4c:	08004f6f 	.word	0x08004f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fdfa 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e013      	b.n	8004f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7fe fe18 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004f5c:	61b8      	str	r0, [r7, #24]
        break;
 8004f5e:	e00f      	b.n	8004f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <UART_SetConfig+0x268>)
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e00c      	b.n	8004f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f66:	f7fe fd77 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004f6a:	61b8      	str	r0, [r7, #24]
        break;
 8004f6c:	e008      	b.n	8004f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e004      	b.n	8004f80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d018      	beq.n	8004fb8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085a      	lsrs	r2, r3, #1
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d908      	bls.n	8004fb4 <UART_SetConfig+0x238>
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d204      	bcs.n	8004fb4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e001      	b.n	8004fb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	efff69f3 	.word	0xefff69f3
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40004400 	.word	0x40004400
 8004fe0:	40004800 	.word	0x40004800
 8004fe4:	007a1200 	.word	0x007a1200

08004fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01a      	beq.n	80050fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e6:	d10a      	bne.n	80050fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800513c:	f7fb ff88 	bl	8001050 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d10e      	bne.n	800516e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f82d 	bl	80051be <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e023      	b.n	80051b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b04      	cmp	r3, #4
 800517a:	d10e      	bne.n	800519a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f817 	bl	80051be <UART_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00d      	b.n	80051b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b09c      	sub	sp, #112	; 0x70
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	e0a5      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	f000 80a1 	beq.w	800531c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fb ff39 	bl	8001050 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80051ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d13e      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005204:	667b      	str	r3, [r7, #100]	; 0x64
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005210:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800521c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005242:	64ba      	str	r2, [r7, #72]	; 0x48
 8005244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e067      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d04f      	beq.n	800531c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528a:	d147      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005294:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	613b      	str	r3, [r7, #16]
   return(result);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052e8:	623a      	str	r2, [r7, #32]
 80052ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e010      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	429a      	cmp	r2, r3
 8005338:	f43f af4a 	beq.w	80051d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3770      	adds	r7, #112	; 0x70
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f000 f820 	bl	80053a0 <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	080053f0 	.word	0x080053f0
 8005384:	080053f0 	.word	0x080053f0
 8005388:	080053f0 	.word	0x080053f0
 800538c:	080053f4 	.word	0x080053f4

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
