
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008214  08008214  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008214  08008214  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008214  08008214  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800821c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000204  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026f23  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be9  00000000  00000000  00046f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0004ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  0004bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209b5  00000000  00000000  0004cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169e5  00000000  00000000  0006d5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2cac  00000000  00000000  00083fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136c86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  00136cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081c4 	.word	0x080081c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080081c4 	.word	0x080081c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <_ZN3ADC9ADC_startEv>:
		this->ADC_sens_gain = ADC_sens_gain;
	}

};

inline void ADC::ADC_start(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	_cr->bit28 = 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000c2e:	78d3      	ldrb	r3, [r2, #3]
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	70d3      	strb	r3, [r2, #3]
	HAL_ADC_Start(_hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fa65 	bl	800310c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(_hadc,1));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fb4a 	bl	80032e4 <HAL_ADC_PollForConversion>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d000      	beq.n	8000c62 <_ZN3ADC9ADC_startEv+0x42>
 8000c60:	e7ef      	b.n	8000c42 <_ZN3ADC9ADC_startEv+0x22>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN3ADC8ADC_stopEv>:

inline void ADC::ADC_stop(){
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(_hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fafd 	bl	8003278 <HAL_ADC_Stop>
	_cr->bit1=1;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000c84:	7813      	ldrb	r3, [r2, #0]
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	7013      	strb	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>:
 *      Author: 0_hayate
 */

#include <ADC.hpp>

ADC::ADC(ADC_HandleTypeDef *_hadc, float ADC_supply_voltage) :
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	ed87 0a01 	vstr	s0, [r7, #4]
		current(0),
		ADC_supply_voltage(ADC_supply_voltage),
		ADC_sens_gain(0.33),
		configrable_const_num(0),
		_hadc(_hadc),
        before_current(0)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4a3f      	ldr	r2, [pc, #252]	; (8000dbc <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x128>)
 8000cbe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{
	_hadc->Init.Resolution = ADC_RESOLUTION_12B;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
	switch (_hadc->Init.Resolution) {
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	2b18      	cmp	r3, #24
 8000cea:	d84c      	bhi.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x60>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d59 	.word	0x08000d59
 8000cf8:	08000d87 	.word	0x08000d87
 8000cfc:	08000d87 	.word	0x08000d87
 8000d00:	08000d87 	.word	0x08000d87
 8000d04:	08000d87 	.word	0x08000d87
 8000d08:	08000d87 	.word	0x08000d87
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000d87 	.word	0x08000d87
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d87 	.word	0x08000d87
 8000d1c:	08000d87 	.word	0x08000d87
 8000d20:	08000d87 	.word	0x08000d87
 8000d24:	08000d87 	.word	0x08000d87
 8000d28:	08000d87 	.word	0x08000d87
 8000d2c:	08000d87 	.word	0x08000d87
 8000d30:	08000d87 	.word	0x08000d87
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d87 	.word	0x08000d87
 8000d3c:	08000d87 	.word	0x08000d87
 8000d40:	08000d87 	.word	0x08000d87
 8000d44:	08000d87 	.word	0x08000d87
 8000d48:	08000d87 	.word	0x08000d87
 8000d4c:	08000d87 	.word	0x08000d87
 8000d50:	08000d87 	.word	0x08000d87
 8000d54:	08000d7d 	.word	0x08000d7d
	case ADC_RESOLUTION_12B:
		ADC_resolution = 1<<12;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d62:	e010      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_10B:
		ADC_resolution = 1<<10;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d6e:	e00a      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_8B:
		ADC_resolution = 1<<8;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d76:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d7a:	e004      	b.n	8000d86 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xf2>

	case ADC_RESOLUTION_6B:
		ADC_resolution = 1<<6;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d84:	bf00      	nop
	}

	__IO uint32_t *_isr_buf = &_hadc->Instance->ISR;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	617b      	str	r3, [r7, #20]
	_isr = (use_register*) _isr_buf;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	__IO uint32_t *_cr_buf = &_hadc->Instance->CR;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3308      	adds	r3, #8
 8000d9a:	613b      	str	r3, [r7, #16]
	_cr = (use_register*) _cr_buf;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	calibration_current[100] = { 0 };
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	return;
}
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	3ea8f5c3 	.word	0x3ea8f5c3

08000dc0 <_ZN3ADC15ADC_calibrationEv>:

void ADC::ADC_calibration() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	configrable_const_num = ADC_supply_voltage / ADC_resolution / ADC_sens_gain;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ddc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8000de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	ADC_start();
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff15 	bl	8000c20 <_ZN3ADC9ADC_startEv>
	_isr->bit2 = 1; //EOCbitクリア
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 100; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b63      	cmp	r3, #99	; 0x63
 8000e0c:	dc17      	bgt.n	8000e3e <_ZN3ADC15ADC_calibrationEv+0x7e>
		while (!_isr->bit2); //EOCbitが再セットされるのをまつ
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d100      	bne.n	8000e22 <_ZN3ADC15ADC_calibrationEv+0x62>
 8000e20:	e7f5      	b.n	8000e0e <_ZN3ADC15ADC_calibrationEv+0x4e>
		calibration_current[i] = _hadc->Instance->DR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 100; i++) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e7e4      	b.n	8000e08 <_ZN3ADC15ADC_calibrationEv+0x48>
	}
	for (int j = 0; j < 100; j++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b63      	cmp	r3, #99	; 0x63
 8000e46:	dc0e      	bgt.n	8000e66 <_ZN3ADC15ADC_calibrationEv+0xa6>
		ofset_current += calibration_current[j];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000e56:	441a      	add	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for (int j = 0; j < 100; j++) {
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e7ed      	b.n	8000e42 <_ZN3ADC15ADC_calibrationEv+0x82>
	}
	ofset_current /= 100;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <_ZN3ADC15ADC_calibrationEv+0xe8>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	095a      	lsrs	r2, r3, #5
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ADC_stop();
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fef5 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
	before_current = ofset_current * configrable_const_num;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	51eb851f 	.word	0x51eb851f

08000eac <_ZN3ADC15ADC_get_currentEv>:

float ADC::ADC_get_current() { //電流センサ出力から現在の電流を計算して返す
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	_isr->bit2 = 1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000eba:	7813      	ldrb	r3, [r2, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	7013      	strb	r3, [r2, #0]
	while (!_isr->bit2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <_ZN3ADC15ADC_get_currentEv+0x2a>
 8000ed4:	e7f5      	b.n	8000ec2 <_ZN3ADC15ADC_get_currentEv+0x16>
	current = _hadc->Instance->DR - ofset_current;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	current = current * configrable_const_num;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0c:	ee17 2a90 	vmov	r2, s15
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//ADC_current_fillter();

	return current;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8000f24:	eeb0 0a67 	vmov.f32	s0, s15
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_ZN15STM_MotorSystem12set_velocityEf>:

	void STM_MotorSystem_start();

	void STM_MotorSystem_stop();

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_buf = velocity_tar;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	609a      	str	r2, [r3, #8]
		this->MotorSystem_mode_buf = VELOCITY_CONTROL;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZN15STM_MotorSystem10set_torqueEf>:

	void set_torque(float torque_tar){
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	ed87 0a00 	vstr	s0, [r7]
		torque_tar *=1/kt;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f72:	ed97 7a00 	vldr	s14, [r7]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc7 7a00 	vstr	s15, [r7]
		this->current_buf = torque_tar;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	619a      	str	r2, [r3, #24]
		this->MotorSystem_mode_buf = TORQUE_CONTROL;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f8a:	65da      	str	r2, [r3, #92]	; 0x5c
	}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN15STM_MotorSystem16com_get_velocityEv>:

	float com_get_velocity(){//通信系に現在の速度を返す
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
		return this->velocity_buf;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	ee07 3a90 	vmov	s15, r3
	}
 8000fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZN15STM_MotorSystem15com_get_currentEv>:

	float get_velocity(); //エンコダ出力から現在の速度を計算して返す



	float com_get_current(){//通信系に現在の電流を返す
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
		return current_ref;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	ee07 3a90 	vmov	s15, r3
	}
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN15STM_MotorSystem8set_voltEf>:
	void motor_control();

	void set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir); //dir用のピンを設定
	void set_dir(GPIO_PinState dir); //dirを設定

	void set_volt(float volt){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	ed87 0a00 	vstr	s0, [r7]
		this->volt = volt;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	621a      	str	r2, [r3, #32]
	}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN15STM_MotorSystem6set_ktEf>:

	void set_kt(float kt){
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	ed87 0a00 	vstr	s0, [r7]
		this->kt = kt;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZN15STM_MotorSystem7set_pprEf>:

	void set_ppr(float ppr){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
		this->ppr = ppr;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZN15STM_MotorSystem17set_current_limitEf>:

	void set_current_limit(float current_limit){
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	ed87 0a00 	vstr	s0, [r7]
		this->current_limit = current_limit;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	61da      	str	r2, [r3, #28]
	}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN15STM_MotorSystem14set_velocity_pEf>:
		this->GPIO_PIN_coast = GPIO_PIN_coast;
		this->GPIO_coast = GPIO_coast;
	}


	void set_velocity_p(float velocity_p_buf){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_p_buf = velocity_p_buf;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_ZN15STM_MotorSystem14set_velocity_iEf>:

	void set_velocity_i(float velocity_i_buf){
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_i_buf = velocity_i_buf;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
	}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_ZN15STM_MotorSystem14set_velocity_dEf>:

	void set_velocity_d(float velocity_d_buf){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_d_buf = velocity_d_buf;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_ZN15STM_MotorSystem12set_torque_pEf>:

	void set_torque_p(float torque_p_buf){
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	ed87 0a00 	vstr	s0, [r7]
		this->torque_p_buf = torque_p_buf;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN15STM_MotorSystem12set_torque_iEf>:

	void set_torque_i(float torque_i_buf){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	ed87 0a00 	vstr	s0, [r7]
		this->torque_i_buf = torque_i_buf;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN15STM_MotorSystem12set_torque_dEf>:

	void set_torque_d(float torque_d_buf){
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	ed87 0a00 	vstr	s0, [r7]
		this->torque_d_buf = torque_d_buf;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
	}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>:

#include <CAN.hpp>
#include <STM_MotorSystem.hpp>


USER_CAN::USER_CAN(CAN_HandleTypeDef * _use_hcan){
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]

	this->_use_hcan = _use_hcan;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	609a      	str	r2, [r3, #8]

	CAN_FilterTypeDef filter;
	_filter = &filter;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f107 0208 	add.w	r2, r7, #8
 8001116:	601a      	str	r2, [r3, #0]

	CAN_TxHeaderTypeDef TxHeader;
	_TxHeader = &TxHeader;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800111e:	605a      	str	r2, [r3, #4]

	filter.FilterActivation = 0; //filter enable
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterBank = 0; //used filterbank 0
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
	filter.FilterMode = 0; //filter mode is mask mode
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	filter.FilterScale = 0; //filterscale is dual 16bits
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterIdHigh = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdHigh = 15;
 8001138:	230f      	movs	r3, #15
 800113a:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(this->_use_hcan, _filter);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f002 fed7 	bl	8003efa <HAL_CAN_ConfigFilter>

	TxHeader.DLC = 4; //データ長（4byte）
 800114c:	2304      	movs	r3, #4
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = 0; //標準識別子
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.RTR = 0; //データフレーム (現状モータシステムからホストにデータ要求はしないと思うから)
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	HAL_CAN_Start(this->_use_hcan);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff93 	bl	800408e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(this->_use_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f9be 	bl	80044f0 <HAL_CAN_ActivateNotification>

}
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3748      	adds	r7, #72	; 0x48
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZN8USER_CAN10use_tx_CANEmf>:

void USER_CAN::use_tx_CAN(uint32_t cmd,float data){
 800117e:	b580      	push	{r7, lr}
 8001180:	b088      	sub	sp, #32
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	ed87 0a01 	vstr	s0, [r7, #4]
	can_data tx;

	uint32_t mailbox;

	tx.low_data = data;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	61bb      	str	r3, [r7, #24]
	_TxHeader->StdId = cmd+get_id_CAN();
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f815 	bl	80011c0 <_ZN8USER_CAN10get_id_CANEv>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	440a      	add	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

	HAL_CAN_AddTxMessage(_use_hcan,_TxHeader, tx.low_data_raw,&mailbox);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	f107 0218 	add.w	r2, r7, #24
 80011b4:	f002 ffaf 	bl	8004116 <HAL_CAN_AddTxMessage>
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN8USER_CAN10get_id_CANEv>:

uint8_t USER_CAN::get_id_CAN(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	id_set id;
	id.bit0 = HAL_GPIO_ReadPin(GPIO_idbit0,GPIO_PIN_idbit0);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8a1b      	ldrh	r3, [r3, #16]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f003 fe66 	bl	8004ea4 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	f362 0300 	bfi	r3, r2, #0, #1
 80011e6:	733b      	strb	r3, [r7, #12]
	id.bit1 = HAL_GPIO_ReadPin(GPIO_idbit1,GPIO_PIN_idbit1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8b1b      	ldrh	r3, [r3, #24]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f003 fe56 	bl	8004ea4 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	f362 0341 	bfi	r3, r2, #1, #1
 8001206:	733b      	strb	r3, [r7, #12]
	id.bit2 = HAL_GPIO_ReadPin(GPIO_idbit2,GPIO_PIN_idbit2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	8c1b      	ldrh	r3, [r3, #32]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f003 fe46 	bl	8004ea4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	7b3b      	ldrb	r3, [r7, #12]
 8001222:	f362 0382 	bfi	r3, r2, #2, #1
 8001226:	733b      	strb	r3, [r7, #12]
	id.bit3 = HAL_GPIO_ReadPin(GPIO_idbit3,GPIO_PIN_idbit3);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f003 fe36 	bl	8004ea4 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	f362 03c3 	bfi	r3, r2, #3, #1
 8001246:	733b      	strb	r3, [r7, #12]
	return id.all_data;
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800124e:	b2db      	uxtb	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN8USER_CAN10filter_setEv>:
	this->GPIO_PIN_idbit1 = GPIO_PIN_idbit1;
	this->GPIO_PIN_idbit2 = GPIO_PIN_idbit2;
	this->GPIO_PIN_idbit3 = GPIO_PIN_idbit3;
}

void USER_CAN::filter_set(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	_filter->FilterIdHigh = this->get_id_CAN();
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffad 	bl	80011c0 <_ZN8USER_CAN10get_id_CANEv>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	601a      	str	r2, [r3, #0]
	HAL_CAN_ConfigFilter(this->_use_hcan, _filter);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f002 fe3d 	bl	8003efa <HAL_CAN_ConfigFilter>

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>:

void USER_CAN::use_rx_CAN(CAN_HandleTypeDef *_hcan){
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08d      	sub	sp, #52	; 0x34
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	if(_hcan != _use_hcan){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 816f 	bne.w	800157c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2f4>
		return;
	}

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 800129e:	4bbf      	ldr	r3, [pc, #764]	; (800159c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x314>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;

	if(HAL_CAN_GetRxMessage(_use_hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6898      	ldr	r0, [r3, #8]
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	f107 0210 	add.w	r2, r7, #16
 80012b0:	2100      	movs	r1, #0
 80012b2:	f003 f80b 	bl	80042cc <HAL_CAN_GetRxMessage>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8167 	beq.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
		switch(RxHeader.StdId & 0xfff0){
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80012ce:	4013      	ands	r3, r2
 80012d0:	f24f 2240 	movw	r2, #62016	; 0xf240
 80012d4:	4293      	cmp	r3, r2
 80012d6:	f000 8121 	beq.w	800151c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x294>
 80012da:	f24f 2240 	movw	r2, #62016	; 0xf240
 80012de:	4293      	cmp	r3, r2
 80012e0:	f200 8159 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80012e4:	f24f 2230 	movw	r2, #62000	; 0xf230
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f000 810f 	beq.w	800150c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x284>
 80012ee:	f24f 2230 	movw	r2, #62000	; 0xf230
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f200 814f 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80012f8:	f24f 2220 	movw	r2, #61984	; 0xf220
 80012fc:	4293      	cmp	r3, r2
 80012fe:	f000 80fd 	beq.w	80014fc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x274>
 8001302:	f24f 2220 	movw	r2, #61984	; 0xf220
 8001306:	4293      	cmp	r3, r2
 8001308:	f200 8145 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800130c:	f24f 2210 	movw	r2, #61968	; 0xf210
 8001310:	4293      	cmp	r3, r2
 8001312:	f000 80eb 	beq.w	80014ec <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x264>
 8001316:	f24f 2210 	movw	r2, #61968	; 0xf210
 800131a:	4293      	cmp	r3, r2
 800131c:	f200 813b 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001320:	f24f 1240 	movw	r2, #61760	; 0xf140
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80d9 	beq.w	80014dc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x254>
 800132a:	f24f 1240 	movw	r2, #61760	; 0xf140
 800132e:	4293      	cmp	r3, r2
 8001330:	f200 8131 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001334:	f24f 1230 	movw	r2, #61744	; 0xf130
 8001338:	4293      	cmp	r3, r2
 800133a:	f000 80c7 	beq.w	80014cc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x244>
 800133e:	f24f 1230 	movw	r2, #61744	; 0xf130
 8001342:	4293      	cmp	r3, r2
 8001344:	f200 8127 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001348:	f24f 1220 	movw	r2, #61728	; 0xf120
 800134c:	4293      	cmp	r3, r2
 800134e:	f000 80b5 	beq.w	80014bc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x234>
 8001352:	f24f 1220 	movw	r2, #61728	; 0xf120
 8001356:	4293      	cmp	r3, r2
 8001358:	f200 811d 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800135c:	f24f 1210 	movw	r2, #61712	; 0xf110
 8001360:	4293      	cmp	r3, r2
 8001362:	f000 80a3 	beq.w	80014ac <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x224>
 8001366:	f24f 1210 	movw	r2, #61712	; 0xf110
 800136a:	4293      	cmp	r3, r2
 800136c:	f200 8113 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001370:	f24f 0240 	movw	r2, #61504	; 0xf040
 8001374:	4293      	cmp	r3, r2
 8001376:	f000 8091 	beq.w	800149c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x214>
 800137a:	f24f 0240 	movw	r2, #61504	; 0xf040
 800137e:	4293      	cmp	r3, r2
 8001380:	f200 8109 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001384:	f24f 0230 	movw	r2, #61488	; 0xf030
 8001388:	4293      	cmp	r3, r2
 800138a:	d07f      	beq.n	800148c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x204>
 800138c:	f24f 0230 	movw	r2, #61488	; 0xf030
 8001390:	4293      	cmp	r3, r2
 8001392:	f200 8100 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001396:	f24f 0220 	movw	r2, #61472	; 0xf020
 800139a:	4293      	cmp	r3, r2
 800139c:	d06e      	beq.n	800147c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x1f4>
 800139e:	f24f 0220 	movw	r2, #61472	; 0xf020
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f200 80f7 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013a8:	f24f 0210 	movw	r2, #61456	; 0xf010
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d05d      	beq.n	800146c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x1e4>
 80013b0:	f24f 0210 	movw	r2, #61456	; 0xf010
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f200 80ee 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013ba:	f24e 2210 	movw	r2, #57872	; 0xe210
 80013be:	4293      	cmp	r3, r2
 80013c0:	f000 80c4 	beq.w	800154c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2c4>
 80013c4:	f24e 2210 	movw	r2, #57872	; 0xe210
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f200 80e4 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013ce:	f24e 1230 	movw	r2, #57648	; 0xe130
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f000 80d4 	beq.w	8001580 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2f8>
 80013d8:	f24e 1230 	movw	r2, #57648	; 0xe130
 80013dc:	4293      	cmp	r3, r2
 80013de:	f200 80da 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013e2:	f24e 1220 	movw	r2, #57632	; 0xe120
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f000 80cc 	beq.w	8001584 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2fc>
 80013ec:	f24e 1220 	movw	r2, #57632	; 0xe120
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f200 80d0 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 80013f6:	f24e 1210 	movw	r2, #57616	; 0xe110
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f000 80c4 	beq.w	8001588 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x300>
 8001400:	f24e 1210 	movw	r2, #57616	; 0xe110
 8001404:	4293      	cmp	r3, r2
 8001406:	f200 80c6 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800140a:	f24e 0240 	movw	r2, #57408	; 0xe040
 800140e:	4293      	cmp	r3, r2
 8001410:	f000 80bc 	beq.w	800158c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x304>
 8001414:	f24e 0240 	movw	r2, #57408	; 0xe040
 8001418:	4293      	cmp	r3, r2
 800141a:	f200 80bc 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 800141e:	f24e 0230 	movw	r2, #57392	; 0xe030
 8001422:	4293      	cmp	r3, r2
 8001424:	f000 80b4 	beq.w	8001590 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x308>
 8001428:	f24e 0230 	movw	r2, #57392	; 0xe030
 800142c:	4293      	cmp	r3, r2
 800142e:	f200 80b2 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001432:	f24e 0220 	movw	r2, #57376	; 0xe020
 8001436:	4293      	cmp	r3, r2
 8001438:	f000 80ac 	beq.w	8001594 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30c>
 800143c:	f24e 0220 	movw	r2, #57376	; 0xe020
 8001440:	4293      	cmp	r3, r2
 8001442:	f200 80a8 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001446:	f24e 0210 	movw	r2, #57360	; 0xe010
 800144a:	4293      	cmp	r3, r2
 800144c:	d06e      	beq.n	800152c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2a4>
 800144e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001452:	4293      	cmp	r3, r2
 8001454:	f200 809f 	bhi.w	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
 8001458:	f241 0210 	movw	r2, #4112	; 0x1010
 800145c:	4293      	cmp	r3, r2
 800145e:	f000 8085 	beq.w	800156c <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2e4>
 8001462:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020
 8001466:	f000 8085 	beq.w	8001574 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2ec>
 800146a:	e094      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
			case SET_VELOCITY:
				ms->set_velocity(rx.low_data);
 800146c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001476:	f7ff fd5c 	bl	8000f32 <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 800147a:	e08c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_P:
				ms->set_velocity_p(rx.low_data);
 800147c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001486:	f7ff fde1 	bl	800104c <_ZN15STM_MotorSystem14set_velocity_pEf>
				break;
 800148a:	e084      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_I:
				ms->set_velocity_i(rx.low_data);
 800148c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001496:	f7ff fde8 	bl	800106a <_ZN15STM_MotorSystem14set_velocity_iEf>
				break;
 800149a:	e07c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VELOCITY_D:
				ms->set_velocity_d(rx.low_data);
 800149c:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014a6:	f7ff fdef 	bl	8001088 <_ZN15STM_MotorSystem14set_velocity_dEf>
				break;
 80014aa:	e074      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE:
				ms->set_torque(rx.low_data);
 80014ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014b6:	f7ff fd4f 	bl	8000f58 <_ZN15STM_MotorSystem10set_torqueEf>
				break;
 80014ba:	e06c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_P:
				ms->set_torque_p(rx.low_data);
 80014bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014c6:	f7ff fdee 	bl	80010a6 <_ZN15STM_MotorSystem12set_torque_pEf>
				break;
 80014ca:	e064      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_I:
				ms->set_torque_i(rx.low_data);
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014d6:	f7ff fdf5 	bl	80010c4 <_ZN15STM_MotorSystem12set_torque_iEf>
				break;
 80014da:	e05c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_TORQUE_D:
				ms->set_torque_d(rx.low_data);
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014e6:	f7ff fdfc 	bl	80010e2 <_ZN15STM_MotorSystem12set_torque_dEf>
				break;
 80014ea:	e054      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_VOLTAGE:
				ms->set_volt(rx.low_data);
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014f6:	f7ff fd6d 	bl	8000fd4 <_ZN15STM_MotorSystem8set_voltEf>
				break;
 80014fa:	e04c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_PPR:
				ms->set_ppr(rx.low_data);
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001506:	f7ff fd83 	bl	8001010 <_ZN15STM_MotorSystem7set_pprEf>
				break;
 800150a:	e044      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_KT:
				ms->set_kt(rx.low_data);
 800150c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001516:	f7ff fd6c 	bl	8000ff2 <_ZN15STM_MotorSystem6set_ktEf>
				break;
 800151a:	e03c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SET_CURRENT_LIMIT:
				ms->set_current_limit(rx.low_data);
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001526:	f7ff fd82 	bl	800102e <_ZN15STM_MotorSystem17set_current_limitEf>
				break;
 800152a:	e034      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case GET_VELOCITY:
				ms->use_can.use_tx_CAN(GET_VELOCITY,ms->com_get_velocity());
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8001532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001534:	f7ff fd30 	bl	8000f98 <_ZN15STM_MotorSystem16com_get_velocityEv>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	f24e 0110 	movw	r1, #57360	; 0xe010
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fe1a 	bl	800117e <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 800154a:	e024      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case GET_TORQUE_D:
				break;

			case GET_CURRENT:
				ms->use_can.use_tx_CAN(GET_CURRENT,ms->com_get_current());
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8001552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001554:	f7ff fd2f 	bl	8000fb6 <_ZN15STM_MotorSystem15com_get_currentEv>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f24e 2110 	movw	r1, #57872	; 0xe210
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff fe0a 	bl	800117e <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 800156a:	e014      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SYSTEM_INIT:
				ms->STM_MotorSystem_init();
 800156c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800156e:	f000 fd37 	bl	8001fe0 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>
				break;
 8001572:	e010      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>

			case SYSTEM_START:
				ms->STM_MotorSystem_start();
 8001574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001576:	f000 fd65 	bl	8002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
				break;
 800157a:	e00c      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
		return;
 800157c:	bf00      	nop
 800157e:	e00a      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001580:	bf00      	nop
 8001582:	e008      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001584:	bf00      	nop
 8001586:	e006      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001588:	bf00      	nop
 800158a:	e004      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 800158c:	bf00      	nop
 800158e:	e002      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x30e>
				break;
 8001594:	bf00      	nop
			}

		}
}
 8001596:	3734      	adds	r7, #52	; 0x34
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20000028 	.word	0x20000028

080015a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

#ifndef debug

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //受信割り込みコールバック
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	STM_MotorSystem *ms = STM_MotorSystem::_ms;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
	ms->use_can.use_rx_CAN(hcan);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	33bc      	adds	r3, #188	; 0xbc
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe67 	bl	8001288 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000028 	.word	0x20000028

080015c8 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>:
 *      Author: 0_hayate
 */

#include <ENCODER.hpp>

ENCODER::ENCODER(TIM_HandleTypeDef *_encoder_timer)
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
{
	this->_encoder_timer = _encoder_timer;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	609a      	str	r2, [r3, #8]
	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	085a      	lsrs	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
	ofset_count = arr/2;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	085a      	lsrs	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	213c      	movs	r1, #60	; 0x3c
 8001604:	4618      	mov	r0, r3
 8001606:	f005 f9b9 	bl	800697c <HAL_TIM_Encoder_Start>

	return;
}
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN7ENCODER9get_ofsetEv>:


uint32_t ENCODER::get_ofset(){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return this->ofset_count;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZN7ENCODER12init_ENCODEREv>:

void ENCODER::init_ENCODER(){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Stop(this->_encoder_timer,TIM_CHANNEL_ALL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	213c      	movs	r1, #60	; 0x3c
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fa2c 	bl	8006a98 <HAL_TIM_Encoder_Stop>

	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	0852      	lsrs	r2, r2, #1
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	085a      	lsrs	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]

	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	213c      	movs	r1, #60	; 0x3c
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f989 	bl	800697c <HAL_TIM_Encoder_Start>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZN3PWMC1EP17TIM_HandleTypeDefm>:
 */


#include <PWM.hpp>

PWM::PWM(TIM_HandleTypeDef *_pwm_timer,uint32_t TIM_CHANNEL_n ){ //TIMxCHn n=1,2,3...
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	this->_pwm_timer = _pwm_timer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	605a      	str	r2, [r3, #4]
	this->supply_voltage = 12;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xd8>)
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d84c      	bhi.n	800172c <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xb8>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x24>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016cd 	.word	0x080016cd
 800169c:	0800172d 	.word	0x0800172d
 80016a0:	0800172d 	.word	0x0800172d
 80016a4:	0800172d 	.word	0x0800172d
 80016a8:	080016e5 	.word	0x080016e5
 80016ac:	0800172d 	.word	0x0800172d
 80016b0:	0800172d 	.word	0x0800172d
 80016b4:	0800172d 	.word	0x0800172d
 80016b8:	080016fd 	.word	0x080016fd
 80016bc:	0800172d 	.word	0x0800172d
 80016c0:	0800172d 	.word	0x0800172d
 80016c4:	0800172d 	.word	0x0800172d
 80016c8:	08001715 	.word	0x08001715

	switch(TIM_CHANNEL_n){
	case TIM_CHANNEL_1:
		CCRn = & this->_pwm_timer->Instance->CCR1;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
		break;
 80016e2:	e024      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_2:
		CCRn = & this->_pwm_timer->Instance->CCR2;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
		break;
 80016fa:	e018      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_3:
		CCRn = & this->_pwm_timer->Instance->CCR3;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
		break;
 8001712:	e00c      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_4:
		CCRn = & this->_pwm_timer->Instance->CCR4;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
		break;
 800172a:	e000      	b.n	800172e <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	default:
		break;
 800172c:	bf00      	nop

	}

	HAL_TIM_PWM_Start(_pwm_timer, TIM_CHANNEL_n);
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f004 ff91 	bl	8006658 <HAL_TIM_PWM_Start>

	this->arr = this->_pwm_timer->Instance->ARR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	60da      	str	r2, [r3, #12]

}
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	41400000 	.word	0x41400000

08001750 <_ZN3PWM7PWM_outEf>:

void PWM::PWM_out(float voltage){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	ed87 0a00 	vstr	s0, [r7]

	uint32_t buf;

	buf = arr / supply_voltage * voltage;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 3a90 	vmov	r3, s15
 8001782:	60fb      	str	r3, [r7, #12]

	if(buf > arr){ //pwmdutyリミット
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d902      	bls.n	8001794 <_ZN3PWM7PWM_outEf+0x44>
		buf = arr;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	60fb      	str	r3, [r7, #12]
	}

	*CCRn = buf;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZN3PWM8PWM_stopEv>:

void PWM::PWM_stop(){ //pwmタイマ自体は動作している。dutyを0にしているだけ
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	*CCRn = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_ZN3PID14PID_controllerEf>:
	float d;
	d = this->d;
	return d;
}

inline float PID::PID_controller(float error){
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
	float MV = 0; //PIDコントローラ操作量
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

	i_sum = i_sum + dt*(error+error_before)/2; //微小時間の間線形に動いていたとして
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edd3 6a03 	vldr	s13, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 6a06 	vldr	s12, [r3, #24]
 80017e8:	edd7 7a00 	vldr	s15, [r7]
 80017ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 80017f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80017f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edc3 7a05 	vstr	s15, [r3, #20]

	p_mv = this->p*error;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	edd7 7a00 	vldr	s15, [r7]
 8001810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edc3 7a07 	vstr	s15, [r3, #28]
	i_mv = this->i*i_sum;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a05 	vldr	s15, [r3, #20]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edc3 7a08 	vstr	s15, [r3, #32]
	d_mv = this->d*(error-error_before)/dt;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a02 	vldr	s14, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a06 	vldr	s15, [r3, #24]
 800183c:	edd7 6a00 	vldr	s13, [r7]
 8001840:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001844:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a03 	vldr	s14, [r3, #12]
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	MV = p_mv+i_mv+d_mv;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	ed93 7a07 	vldr	s14, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 7a08 	vldr	s15, [r3, #32]
 8001864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	edc7 7a03 	vstr	s15, [r7, #12]
	error_before = error;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	619a      	str	r2, [r3, #24]

	return MV;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	ee07 3a90 	vmov	s15, r3
}
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_ZN7ENCODER9get_countEv>:

	void init_ENCODER();

};

inline uint32_t ENCODER::get_count(){
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	ENCODER_count = _encoder_timer->Instance->CNT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
	return ENCODER_count;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>:
inline void STM_MotorSystem::set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir){
	this->GPIO_PIN_dir = GPIO_PIN_dir;
	this->GPIO_dir = GPIO_dir;
}

inline void STM_MotorSystem::set_dir(GPIO_PinState dir){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin (this->GPIO_dir,this->GPIO_PIN_dir,dir);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f003 fb01 	bl	8004ed4 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN15STM_MotorSystem13motor_controlEv>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

void STM_MotorSystem::motor_control(){
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	 * 機能追加の際はMotorSystem_start()内に初期化文を書き、タイマー割り込み周期ごとの処理をここに書く。
	 * 割り込み周期ごとの処理書く際、重複する処理はフォースルーで収束させる。
	 * 制御周期を長期に変化させたい場合は各caseにbreakを記述し、特定のcaseに達したら処理を行わせcontrol_switchを初期化する。
	 * 重複する処理や、制御周期を長期にしたい場合defaultに処理をおくか、breakさせるのがラクだが例外判定ができないため必ずdefaultには例外処理をおく(システム停止でなくてもよい)。
	 */
	control_switch++;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	switch(this->MotorSystem_mode){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d009      	beq.n	8001912 <_ZN15STM_MotorSystem13motor_controlEv+0x38>
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d249      	bcs.n	8001998 <_ZN15STM_MotorSystem13motor_controlEv+0xbe>
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d040      	beq.n	800198a <_ZN15STM_MotorSystem13motor_controlEv+0xb0>
 8001908:	f640 72ff 	movw	r2, #4095	; 0xfff
 800190c:	4293      	cmp	r3, r2
 800190e:	d023      	beq.n	8001958 <_ZN15STM_MotorSystem13motor_controlEv+0x7e>
 8001910:	e042      	b.n	8001998 <_ZN15STM_MotorSystem13motor_controlEv+0xbe>
	case VELOCITY_CONTROL:
		{switch(control_switch){
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d010      	beq.n	800193e <_ZN15STM_MotorSystem13motor_controlEv+0x64>
 800191c:	2b0a      	cmp	r3, #10
 800191e:	dc13      	bgt.n	8001948 <_ZN15STM_MotorSystem13motor_controlEv+0x6e>
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <_ZN15STM_MotorSystem13motor_controlEv+0x56>
 8001924:	2b00      	cmp	r3, #0
 8001926:	dd0f      	ble.n	8001948 <_ZN15STM_MotorSystem13motor_controlEv+0x6e>
 8001928:	3b02      	subs	r3, #2
 800192a:	2b07      	cmp	r3, #7
 800192c:	d80c      	bhi.n	8001948 <_ZN15STM_MotorSystem13motor_controlEv+0x6e>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			break;
 800192e:	e012      	b.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>
			this->controller_velocity();
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f83c 	bl	80019ae <_ZN15STM_MotorSystem19controller_velocityEv>
			this->controller_torque();
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f885 	bl	8001a46 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 800193c:	e00b      	b.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>

		case 10:
			control_switch = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			break;
 8001946:	e006      	b.n	8001956 <_ZN15STM_MotorSystem13motor_controlEv+0x7c>

		default :
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	65da      	str	r2, [r3, #92]	; 0x5c
			this->STM_MotorSystem_start();
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fb78 	bl	8002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001954:	bf00      	nop

		}}break;
 8001956:	e026      	b.n	80019a6 <_ZN15STM_MotorSystem13motor_controlEv+0xcc>

	case TORQUE_CONTROL:
		this->current_tar = this->current_buf;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	615a      	str	r2, [r3, #20]
		{switch(control_switch){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <_ZN15STM_MotorSystem13motor_controlEv+0xa0>
		case 1:
			this->controller_torque();
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f86b 	bl	8001a46 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			break;
 8001978:	e006      	b.n	8001988 <_ZN15STM_MotorSystem13motor_controlEv+0xae>

		default:
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	65da      	str	r2, [r3, #92]	; 0x5c
			this->STM_MotorSystem_start();
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fb5f 	bl	8002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001986:	bf00      	nop

		}}break;
 8001988:	e00d      	b.n	80019a6 <_ZN15STM_MotorSystem13motor_controlEv+0xcc>

	case COAST_CONTROL:
		this->MotorSystem_mode_buf = COAST_CONTROL;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	22ff      	movs	r2, #255	; 0xff
 800198e:	65da      	str	r2, [r3, #92]	; 0x5c
		this->STM_MotorSystem_start();
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fb57 	bl	8002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
		break;
 8001996:	e006      	b.n	80019a6 <_ZN15STM_MotorSystem13motor_controlEv+0xcc>

	default:
		this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
		this->STM_MotorSystem_start();
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb50 	bl	8002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
		break;
 80019a4:	bf00      	nop

	}
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_ZN15STM_MotorSystem19controller_velocityEv>:




void STM_MotorSystem::controller_velocity(){
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	this->velocity_ref = this->get_velocity();
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f8c2 	bl	8001b40 <_ZN15STM_MotorSystem12get_velocityEv>
 80019bc:	eef0 7a40 	vmov.f32	s15, s0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	edc3 7a00 	vstr	s15, [r3]
	float e_velocity;
	this->velocity_tar = this->velocity_buf;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]

	if(fabsf(velocity_tar) > velocity_limit){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a03 	vldr	s15, [r3, #12]
 80019de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	dd14      	ble.n	8001a12 <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			if(velocity_tar > 0){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	dd04      	ble.n	8001a02 <_ZN15STM_MotorSystem19controller_velocityEv+0x54>
				velocity_tar = velocity_limit;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	e007      	b.n	8001a12 <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			}else{
				velocity_tar = -1*velocity_limit;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a08:	eef1 7a67 	vneg.f32	s15, s15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		}

	e_velocity = this->velocity_tar - this->velocity_ref;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	edc7 7a03 	vstr	s15, [r7, #12]

	current_tar = this->pid_velocity.PID_controller(e_velocity);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	336c      	adds	r3, #108	; 0x6c
 8001a2a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fec8 	bl	80017c4 <_ZN3PID14PID_controllerEf>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	edc3 7a05 	vstr	s15, [r3, #20]

	return;
 8001a3e:	bf00      	nop
}
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZN15STM_MotorSystem17controller_torqueEv>:



void STM_MotorSystem::controller_torque(){
 8001a46:	b580      	push	{r7, lr}
 8001a48:	ed2d 8b02 	vpush	{d8}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	float e_current;
	float volt_tar;

	if(fabsf(current_tar) > current_limit){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a58:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd14      	ble.n	8001a96 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				if(current_tar > 0){
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	dd04      	ble.n	8001a86 <_ZN15STM_MotorSystem17controller_torqueEv+0x40>
					current_tar = current_limit;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	e007      	b.n	8001a96 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				}else{
					current_tar = -1*current_limit;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a8c:	eef1 7a67 	vneg.f32	s15, s15
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edc3 7a05 	vstr	s15, [r3, #20]
				}
			}

	e_current = current_tar - this->get_current();
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	ed93 8a05 	vldr	s16, [r3, #20]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8d3 	bl	8001c48 <_ZN15STM_MotorSystem11get_currentEv>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001aaa:	edc7 7a03 	vstr	s15, [r7, #12]

	volt_tar = this->pid_torque.PID_controller(e_current);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3394      	adds	r3, #148	; 0x94
 8001ab2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fe84 	bl	80017c4 <_ZN3PID14PID_controllerEf>
 8001abc:	ed87 0a02 	vstr	s0, [r7, #8]
	volt_tar += velocity_tar*kt + this->velocity_ref*kt; //フィードフォワードとフィードバックをたす
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	edd3 6a00 	vldr	s13, [r3]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	edc7 7a02 	vstr	s15, [r7, #8]

	if(volt_tar >= 0){ //モータの回転方向を決める
 8001af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	db04      	blt.n	8001b08 <_ZN15STM_MotorSystem17controller_torqueEv+0xc2>
			dir_f = GPIO_PIN_RESET;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001b06:	e003      	b.n	8001b10 <_ZN15STM_MotorSystem17controller_torqueEv+0xca>
		}else{
			dir_f = GPIO_PIN_SET;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}

	this->use_pwm.PWM_out(fabsf(volt_tar));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	33e8      	adds	r3, #232	; 0xe8
 8001b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b18:	eef0 7ae7 	vabs.f32	s15, s15
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fe15 	bl	8001750 <_ZN3PWM7PWM_outEf>
	set_dir(dir_f);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fec0 	bl	80018b4 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>

	return;
 8001b34:	bf00      	nop
}
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	ecbd 8b02 	vpop	{d8}
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN15STM_MotorSystem12get_velocityEv>:



float STM_MotorSystem::get_velocity(){
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	int64_t buf;
	float velocity;

	buf = this->use_encoder.get_count();
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	33f8      	adds	r3, #248	; 0xf8
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe9f 	bl	8001890 <_ZN7ENCODER9get_countEv>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	buf -= before_encoder_cnt;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6c:	1a84      	subs	r4, r0, r2
 8001b6e:	eb61 0503 	sbc.w	r5, r1, r3
 8001b72:	e9c7 4504 	strd	r4, r5, [r7, #16]
	before_encoder_cnt += buf;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	441a      	add	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	659a      	str	r2, [r3, #88]	; 0x58
	velocity = buf;
 8001b82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b86:	f7ff f80d 	bl	8000ba4 <__aeabi_l2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]
	velocity *=1570.796/ppr;
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7fe fc7e 	bl	8000490 <__aeabi_f2d>
 8001b94:	4604      	mov	r4, r0
 8001b96:	460d      	mov	r5, r1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc77 	bl	8000490 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	a122      	add	r1, pc, #136	; (adr r1, 8001c30 <_ZN15STM_MotorSystem12get_velocityEv+0xf0>)
 8001ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bac:	f7fe fdf2 	bl	8000794 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fcc2 	bl	8000540 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe fece 	bl	8000964 <__aeabi_d2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]

	velocity = velocity*0.7+0.3*before_vel;
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7fe fc5f 	bl	8000490 <__aeabi_f2d>
 8001bd2:	a319      	add	r3, pc, #100	; (adr r3, 8001c38 <_ZN15STM_MotorSystem12get_velocityEv+0xf8>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fcb2 	bl	8000540 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc51 	bl	8000490 <__aeabi_f2d>
 8001bee:	a314      	add	r3, pc, #80	; (adr r3, 8001c40 <_ZN15STM_MotorSystem12get_velocityEv+0x100>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fca4 	bl	8000540 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fae8 	bl	80001d4 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe feaa 	bl	8000964 <__aeabi_d2f>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]
	before_vel = velocity;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44

	return velocity;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	ee07 3a90 	vmov	s15, r3
}
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	1a9fbe77 	.word	0x1a9fbe77
 8001c34:	40988b2f 	.word	0x40988b2f
 8001c38:	66666666 	.word	0x66666666
 8001c3c:	3fe66666 	.word	0x3fe66666
 8001c40:	33333333 	.word	0x33333333
 8001c44:	3fd33333 	.word	0x3fd33333

08001c48 <_ZN15STM_MotorSystem11get_currentEv>:


float STM_MotorSystem::get_current(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	this->current_ref = use_adc.ADC_get_current();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f928 	bl	8000eac <_ZN3ADC15ADC_get_currentEv>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	edc3 7a04 	vstr	s15, [r3, #16]
	return current_ref;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	ee07 3a90 	vmov	s15, r3
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){ //tim1割り込みコールバック
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
	ms->motor_control();
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fe27 	bl	80018da <_ZN15STM_MotorSystem13motor_controlEv>
	return;
 8001c8c:	bf00      	nop
}
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000028 	.word	0x20000028

08001c98 <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6178      	str	r0, [r7, #20]
 8001ca0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ca4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ca8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001cac:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0),p_mv(0),i_mv(0),d_mv(0)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_ZN3PID9PID_set_pEf>:
inline void PID::PID_set_p(float p){
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_ZN3PID9PID_set_iEf>:
inline void PID::PID_set_i(float i){
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	ed87 0a00 	vstr	s0, [r7]
	this->i = i;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_ZN3PID9PID_set_dEf>:
inline void PID::PID_set_d(float d){
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	ed87 0a00 	vstr	s0, [r7]
	this->d = d;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZN3PID10PID_set_dtEf>:
inline void PID::PID_set_dt(float dt){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	ed87 0a00 	vstr	s0, [r7]
	this->dt = dt;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	60da      	str	r2, [r3, #12]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN3ADC12ADC_set_gainEf>:
	void ADC_set_gain(float ADC_sens_gain){
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	ed87 0a00 	vstr	s0, [r7]
		this->ADC_sens_gain = ADC_sens_gain;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>:
	void set_coast_pin(GPIO_TypeDef *GPIO_coast,uint16_t GPIO_PIN_coast){
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	4613      	mov	r3, r2
 8001daa:	80fb      	strh	r3, [r7, #6]
		this->GPIO_PIN_coast = GPIO_PIN_coast;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	88fa      	ldrh	r2, [r7, #6]
 8001db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		this->GPIO_coast = GPIO_coast;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	651a      	str	r2, [r3, #80]	; 0x50
	}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>:
inline void STM_MotorSystem::set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir){
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	80fb      	strh	r3, [r7, #6]
	this->GPIO_PIN_dir = GPIO_PIN_dir;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	this->GPIO_dir = GPIO_dir;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem(
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
pid_velocity(0,0,0,0.0001),
pid_torque(0,0,0,0.0001),
use_can(_hcan),
use_pwm(_pwm_timer,TIM_CHANNEL_n),
use_encoder(_encoder_timer),
use_adc(_hadc,3.3)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a65      	ldr	r2, [pc, #404]	; (8001fb8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1c8>)
 8001e22:	621a      	str	r2, [r3, #32]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	336c      	adds	r3, #108	; 0x6c
 8001e48:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8001fbc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001e4c:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e50:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e54:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff1d 	bl	8001c98 <_ZN3PIDC1Effff>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3394      	adds	r3, #148	; 0x94
 8001e62:	eddf 1a56 	vldr	s3, [pc, #344]	; 8001fbc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001e66:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e6a:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e6e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001fc0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d0>
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff10 	bl	8001c98 <_ZN3PIDC1Effff>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	33bc      	adds	r3, #188	; 0xbc
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f93e 	bl	8001100 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	33e8      	adds	r3, #232	; 0xe8
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbf1 	bl	8001674 <_ZN3PWMC1EP17TIM_HandleTypeDefm>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	33f8      	adds	r3, #248	; 0xf8
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fb95 	bl	80015c8 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001ea4:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001fc4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d4>
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fef2 	bl	8000c94 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>

{

	_ms = this;
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1d8>)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6013      	str	r3, [r2, #0]

	this->_control_timer = _control_timer;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	665a      	str	r2, [r3, #100]	; 0x64

#ifndef debug
	//can id set
	use_can.GPIO_idbit0 = GPIOB;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a43      	ldr	r2, [pc, #268]	; (8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001ec0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	use_can.GPIO_idbit1 = GPIOB;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001ec8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	use_can.GPIO_idbit2 = GPIOA;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ed2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	use_can.GPIO_idbit3 = GPIOA;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001edc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	use_can.GPIO_PIN_idbit0 = GPIO_PIN_1;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	use_can.GPIO_PIN_idbit1 = GPIO_PIN_8;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	use_can.GPIO_PIN_idbit2 = GPIO_PIN_9;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef8:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	use_can.GPIO_PIN_idbit3 = GPIO_PIN_10;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f02:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	use_can.filter_set();
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	33bc      	adds	r3, #188	; 0xbc
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f9a4 	bl	8001258 <_ZN8USER_CAN10filter_setEv>

	//can通信有効化
	HAL_CAN_Start(_hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f002 f8bc 	bl	800408e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f16:	2102      	movs	r1, #2
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f002 fae9 	bl	80044f0 <HAL_CAN_ActivateNotification>

#endif

	//pid init
	pid_velocity.PID_set_dt(0.001);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	336c      	adds	r3, #108	; 0x6c
 8001f22:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001fd0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e0>
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff1a 	bl	8001d60 <_ZN3PID10PID_set_dtEf>
	pid_torque.PID_set_dt(0.0001);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3394      	adds	r3, #148	; 0x94
 8001f30:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001fbc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1cc>
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff13 	bl	8001d60 <_ZN3PID10PID_set_dtEf>

	this->velocity_p_buf = 0;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
	this->velocity_i_buf = 0;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
	this->velocity_d_buf = 0;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34

	this->torque_p_buf = 0;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
	this->torque_i_buf = 0;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
	this->torque_d_buf = 0;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40

	//速度制御用エンコダバッファ初期化
	before_encoder_cnt = use_encoder.get_ofset();
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	33f8      	adds	r3, #248	; 0xf8
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb50 	bl	8001614 <_ZN7ENCODER9get_ofsetEv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

	//速度、電流制限
	velocity_limit = 100; //ここはそこまで問題じゃない
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e4>)
 8001f7e:	60da      	str	r2, [r3, #12]
	current_limit = 10; //こっちはちゃんと設定しないと積分がバグる。とくにストールとかさせたとき
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1e8>)
 8001f84:	61da      	str	r2, [r3, #28]

	//a3921のdirピンの操作ピン設定
	set_dir_pin(GPIOB,GPIO_PIN_4);
 8001f86:	2210      	movs	r2, #16
 8001f88:	4910      	ldr	r1, [pc, #64]	; (8001fcc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1dc>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff ff1b 	bl	8001dc6 <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>

	//coast機能ピン設定
	set_coast_pin(GPIOA,GPIO_PIN_7);
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff ff01 	bl	8001d9e <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>

	//電流センサゲインセット
	this->use_adc.ADC_set_gain(0.025);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001fa2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001fdc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x1ec>
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fee9 	bl	8001d7e <_ZN3ADC12ADC_set_gainEf>


}
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	41400000 	.word	0x41400000
 8001fbc:	38d1b717 	.word	0x38d1b717
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40533333 	.word	0x40533333
 8001fc8:	20000028 	.word	0x20000028
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	3a83126f 	.word	0x3a83126f
 8001fd4:	42c80000 	.word	0x42c80000
 8001fd8:	41200000 	.word	0x41200000
 8001fdc:	3ccccccd 	.word	0x3ccccccd

08001fe0 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>:

void STM_MotorSystem::STM_MotorSystem_init(){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(_control_timer); //割り込みタイマ停止
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 faa3 	bl	8006538 <HAL_TIM_Base_Stop_IT>
	_control_timer->Instance->CNT = 0; //割り込みタイマカウント初期化
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
	this->control_switch = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	this->use_adc.ADC_calibration(); //adcのキャリブレーション
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fed8 	bl	8000dc0 <_ZN3ADC15ADC_calibrationEv>

	this->use_encoder.init_ENCODER(); //エンコダカウント初期化
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	33f8      	adds	r3, #248	; 0xf8
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fb09 	bl	800162c <_ZN7ENCODER12init_ENCODEREv>

	this->use_pwm.PWM_stop(); //PWMdutyを0にする
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	33e8      	adds	r3, #232	; 0xe8
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fbc2 	bl	80017a8 <_ZN3PWM8PWM_stopEv>

	HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET); //coast無効化
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	f002 ff4f 	bl	8004ed4 <HAL_GPIO_WritePin>

	this->MotorSystem_mode_buf = SYSTEM_STOP; //システムをストップモードにセット
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>:


void STM_MotorSystem::STM_MotorSystem_start(){ //スタート毎にモードの初期化が行われる
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(_control_timer);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002050:	4618      	mov	r0, r3
 8002052:	f004 fa71 	bl	8006538 <HAL_TIM_Base_Stop_IT>
	_control_timer->Instance->CNT = 0; //割り込みタイマカウント初期化
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(_control_timer, TIM_FLAG_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0201 	mvn.w	r2, #1
 800206a:	611a      	str	r2, [r3, #16]
	this->control_switch = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	f002 ff27 	bl	8004ed4 <HAL_GPIO_WritePin>

	switch(MotorSystem_mode_buf){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208e:	4293      	cmp	r3, r2
 8002090:	d012      	beq.n	80020b8 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x74>
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	f080 80bd 	bcs.w	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
 800209a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800209e:	4293      	cmp	r3, r2
 80020a0:	d05c      	beq.n	800215c <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x118>
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a6:	f080 80b5 	bcs.w	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 808b 	beq.w	80021c6 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x182>
 80020b0:	2bff      	cmp	r3, #255	; 0xff
 80020b2:	f000 8097 	beq.w	80021e4 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1a0>
		this->use_pwm.PWM_stop();
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
		this->use_adc.ADC_stop();
		break;
	}
}
 80020b6:	e0ad      	b.n	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = VELOCITY_CONTROL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
		pid_velocity.PID_set_p(velocity_p_buf); //pid gain set
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020cc:	eeb0 0a67 	vmov.f32	s0, s15
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7ff fe18 	bl	8001d06 <_ZN3PID9PID_set_pEf>
		pid_velocity.PID_set_i(velocity_i_buf);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7ff fe1c 	bl	8001d24 <_ZN3PID9PID_set_iEf>
		pid_velocity.PID_set_d(velocity_d_buf);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80020f8:	eeb0 0a67 	vmov.f32	s0, s15
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7ff fe20 	bl	8001d42 <_ZN3PID9PID_set_dEf>
		pid_torque.PID_set_p(torque_p_buf);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	4610      	mov	r0, r2
 8002114:	f7ff fdf7 	bl	8001d06 <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	4610      	mov	r0, r2
 800212a:	f7ff fdfb 	bl	8001d24 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800213a:	eeb0 0a67 	vmov.f32	s0, s15
 800213e:	4610      	mov	r0, r2
 8002140:	f7ff fdff 	bl	8001d42 <_ZN3PID9PID_set_dEf>
		this->use_adc.ADC_start();
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fd68 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002154:	4618      	mov	r0, r3
 8002156:	f004 f993 	bl	8006480 <HAL_TIM_Base_Start_IT>
		break;
 800215a:	e05b      	b.n	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = TORQUE_CONTROL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002162:	661a      	str	r2, [r3, #96]	; 0x60
		pid_torque.PID_set_p(torque_p_buf);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	4610      	mov	r0, r2
 8002176:	f7ff fdc6 	bl	8001d06 <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	4610      	mov	r0, r2
 800218c:	f7ff fdca 	bl	8001d24 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7ff fdce 	bl	8001d42 <_ZN3PID9PID_set_dEf>
		this->velocity_tar = 0; //トルクコントロールモードでのフィードフォワード無効化
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
		this->use_adc.ADC_start();
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fd33 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f95e 	bl	8006480 <HAL_TIM_Base_Start_IT>
		break;
 80021c4:	e026      	b.n	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = SYSTEM_STOP;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	661a      	str	r2, [r3, #96]	; 0x60
		this->use_pwm.PWM_stop();
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	33e8      	adds	r3, #232	; 0xe8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fae9 	bl	80017a8 <_ZN3PWM8PWM_stopEv>
		this->use_adc.ADC_stop();
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fd44 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
		break;
 80021e2:	e017      	b.n	8002214 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1d0>
		this->MotorSystem_mode = COAST_CONTROL;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	661a      	str	r2, [r3, #96]	; 0x60
		this->use_pwm.PWM_stop();
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	33e8      	adds	r3, #232	; 0xe8
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fada 	bl	80017a8 <_ZN3PWM8PWM_stopEv>
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80021fe:	2201      	movs	r2, #1
 8002200:	4619      	mov	r1, r3
 8002202:	f002 fe67 	bl	8004ed4 <HAL_GPIO_WritePin>
		this->use_adc.ADC_stop();
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd2c 	bl	8000c6a <_ZN3ADC8ADC_stopEv>
		break;
 8002212:	bf00      	nop
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002222:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002224:	f000 fd7a 	bl	8002d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002228:	f000 f826 	bl	8002278 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222c:	f000 fac6 	bl	80027bc <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 8002230:	f000 f894 	bl	800235c <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 8002234:	f000 f8fa 	bl	800242c <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8002238:	f000 f996 	bl	8002568 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800223c:	f000 f9f2 	bl	8002624 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8002240:	f000 fa88 	bl	8002754 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8002244:	f000 f92e 	bl	80024a4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms(&hadc2,&hcan,&htim2,&htim3,TIM_CHANNEL_3,&htim1);
 8002248:	1d38      	adds	r0, r7, #4
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <main+0x48>)
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2308      	movs	r3, #8
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <main+0x4c>)
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <main+0x50>)
 8002258:	4a05      	ldr	r2, [pc, #20]	; (8002270 <main+0x54>)
 800225a:	4906      	ldr	r1, [pc, #24]	; (8002274 <main+0x58>)
 800225c:	f7ff fdc8 	bl	8001df0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>
   use_ms.STM_MotorSystem_start();*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002260:	e7fe      	b.n	8002260 <main+0x44>
 8002262:	bf00      	nop
 8002264:	200000a4 	.word	0x200000a4
 8002268:	2000013c 	.word	0x2000013c
 800226c:	200000f0 	.word	0x200000f0
 8002270:	2000007c 	.word	0x2000007c
 8002274:	2000002c 	.word	0x2000002c

08002278 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b096      	sub	sp, #88	; 0x58
 800227c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002282:	2228      	movs	r2, #40	; 0x28
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f005 ff94 	bl	80081b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ba:	2301      	movs	r3, #1
 80022bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022be:	2302      	movs	r3, #2
 80022c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fe16 	bl	8004f04 <HAL_RCC_OscConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80022e8:	f000 fae2 	bl	80028b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ec:	230f      	movs	r3, #15
 80022ee:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	2102      	movs	r1, #2
 8002308:	4618      	mov	r0, r3
 800230a:	f003 fd03 	bl	8005d14 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800231e:	f000 fac7 	bl	80028b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8002322:	f241 0381 	movw	r3, #4225	; 0x1081
 8002326:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002328:	2301      	movs	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800232c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002330:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4618      	mov	r0, r3
 800233a:	f003 ff23 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800234e:	f000 faaf 	bl	80028b0 <Error_Handler>
  }
}
 8002352:	bf00      	nop
 8002354:	3758      	adds	r7, #88	; 0x58
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 8002374:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <_ZL12MX_ADC2_Initv+0xcc>)
 8002376:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 800238c:	2201      	movs	r2, #1
 800238e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 800239a:	2200      	movs	r2, #0
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023ca:	4816      	ldr	r0, [pc, #88]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 80023cc:	f000 fd0c 	bl	8002de8 <HAL_ADC_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80023e0:	f000 fa66 	bl	80028b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023e4:	2302      	movs	r3, #2
 80023e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80023f0:	2303      	movs	r3, #3
 80023f2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	4619      	mov	r1, r3
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <_ZL12MX_ADC2_Initv+0xc8>)
 8002402:	f001 f83d 	bl	8003480 <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 8002416:	f000 fa4b 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000002c 	.word	0x2000002c
 8002428:	50000100 	.word	0x50000100

0800242c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <_ZL11MX_CAN_Initv+0x74>)
 8002434:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002438:	2204      	movs	r2, #4
 800243a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 800244a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800244e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002452:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002456:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 800245a:	2200      	movs	r2, #0
 800245c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002460:	2201      	movs	r2, #1
 8002462:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002466:	2201      	movs	r2, #1
 8002468:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 800246c:	2201      	movs	r2, #1
 800246e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002472:	2200      	movs	r2, #0
 8002474:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 8002478:	2200      	movs	r2, #0
 800247a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <_ZL11MX_CAN_Initv+0x70>)
 800247e:	f001 fc41 	bl	8003d04 <HAL_CAN_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8002492:	f000 fa0d 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000007c 	.word	0x2000007c
 80024a0:	40006400 	.word	0x40006400

080024a4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <_ZL12MX_TIM1_Initv+0xc0>)
 80024c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80024da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ee:	481c      	ldr	r0, [pc, #112]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 80024f0:	f003 ff6e 	bl	80063d0 <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002504:	f000 f9d4 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	4812      	ldr	r0, [pc, #72]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 8002516:	f004 fd99 	bl	800704c <HAL_TIM_ConfigClockSource>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800252a:	f000 f9c1 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <_ZL12MX_TIM1_Initv+0xbc>)
 8002540:	f005 fa54 	bl	80079ec <HAL_TIMEx_MasterConfigSynchronization>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002554:	f000 f9ac 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200000a4 	.word	0x200000a4
 8002564:	40012c00 	.word	0x40012c00

08002568 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	2224      	movs	r2, #36	; 0x24
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f005 fe1c 	bl	80081b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	463b      	mov	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 8002588:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800258c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ae:	2303      	movs	r3, #3
 80025b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025b6:	2301      	movs	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80025be:	2302      	movs	r3, #2
 80025c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025c6:	2301      	movs	r3, #1
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	4811      	ldr	r0, [pc, #68]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 80025da:	f004 f929 	bl	8006830 <HAL_TIM_Encoder_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80025ee:	f000 f95f 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	4619      	mov	r1, r3
 80025fe:	4808      	ldr	r0, [pc, #32]	; (8002620 <_ZL12MX_TIM2_Initv+0xb8>)
 8002600:	f005 f9f4 	bl	80079ec <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002614:	f000 f94c 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3730      	adds	r7, #48	; 0x30
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200000f0 	.word	0x200000f0

08002624 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	; 0x38
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002658:	4a3d      	ldr	r2, [pc, #244]	; (8002750 <_ZL12MX_TIM3_Initv+0x12c>)
 800265a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b3a      	ldr	r3, [pc, #232]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 800266a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800266e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002676:	4b35      	ldr	r3, [pc, #212]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800267c:	4833      	ldr	r0, [pc, #204]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 800267e:	f003 fea7 	bl	80063d0 <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8002692:	f000 f90d 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800269c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a0:	4619      	mov	r1, r3
 80026a2:	482a      	ldr	r0, [pc, #168]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 80026a4:	f004 fcd2 	bl	800704c <HAL_TIM_ConfigClockSource>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80026b8:	f000 f8fa 	bl	80028b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026bc:	4823      	ldr	r0, [pc, #140]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 80026be:	f003 ff6a 	bl	8006596 <HAL_TIM_PWM_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80026d2:	f000 f8ed 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	4619      	mov	r1, r3
 80026e4:	4819      	ldr	r0, [pc, #100]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 80026e6:	f005 f981 	bl	80079ec <HAL_TIMEx_MasterConfigSynchronization>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80026fa:	f000 f8d9 	bl	80028b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fe:	2360      	movs	r3, #96	; 0x60
 8002700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800270e:	463b      	mov	r3, r7
 8002710:	2208      	movs	r2, #8
 8002712:	4619      	mov	r1, r3
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002716:	f004 fb85 	bl	8006e24 <HAL_TIM_PWM_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 800272a:	f000 f8c1 	bl	80028b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0208 	bic.w	r2, r2, #8
 800273c:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800273e:	4803      	ldr	r0, [pc, #12]	; (800274c <_ZL12MX_TIM3_Initv+0x128>)
 8002740:	f000 f9ec 	bl	8002b1c <HAL_TIM_MspPostInit>

}
 8002744:	bf00      	nop
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000013c 	.word	0x2000013c
 8002750:	40000400 	.word	0x40000400

08002754 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800275c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002760:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002798:	f005 f9b4 	bl	8007b04 <HAL_UART_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80027ac:	f000 f880 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000188 	.word	0x20000188
 80027b8:	40013800 	.word	0x40013800

080027bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027dc:	6153      	str	r3, [r2, #20]
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	6153      	str	r3, [r2, #20]
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <_ZL12MX_GPIO_Initv+0xec>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002822:	f002 fb57 	bl	8004ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	2130      	movs	r1, #48	; 0x30
 800282a:	4820      	ldr	r0, [pc, #128]	; (80028ac <_ZL12MX_GPIO_Initv+0xf0>)
 800282c:	f002 fb52 	bl	8004ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002830:	f240 730c 	movw	r3, #1804	; 0x70c
 8002834:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283a:	2301      	movs	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f002 f9ba 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 030c 	add.w	r3, r7, #12
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f002 f9ab 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800286a:	2302      	movs	r3, #2
 800286c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	2301      	movs	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <_ZL12MX_GPIO_Initv+0xf0>)
 800287e:	f002 f99f 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002882:	2330      	movs	r3, #48	; 0x30
 8002884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	4619      	mov	r1, r3
 8002898:	4804      	ldr	r0, [pc, #16]	; (80028ac <_ZL12MX_GPIO_Initv+0xf0>)
 800289a:	f002 f991 	bl	8004bc0 <HAL_GPIO_Init>

}
 800289e:	bf00      	nop
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	48000400 	.word	0x48000400

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>
	...

080028bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_MspInit+0x44>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_MspInit+0x44>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6193      	str	r3, [r2, #24]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x44>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x44>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x44>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x44>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_ADC_MspInit+0x74>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d124      	bne.n	8002970 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_ADC_MspInit+0x78>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_ADC_MspInit+0x78>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6153      	str	r3, [r2, #20]
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_ADC_MspInit+0x78>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_ADC_MspInit+0x78>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_ADC_MspInit+0x78>)
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	6153      	str	r3, [r2, #20]
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_ADC_MspInit+0x78>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002956:	2320      	movs	r3, #32
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295a:	2303      	movs	r3, #3
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296c:	f002 f928 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	50000100 	.word	0x50000100
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <HAL_CAN_MspInit+0xa0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d139      	bne.n	8002a16 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ac:	61d3      	str	r3, [r2, #28]
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	6153      	str	r3, [r2, #20]
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_CAN_MspInit+0xa4>)
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80029e4:	2309      	movs	r3, #9
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f2:	f002 f8e5 	bl	8004bc0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 2, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2102      	movs	r1, #2
 80029fa:	2014      	movs	r0, #20
 80029fc:	f002 f8a9 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8002a00:	2014      	movs	r0, #20
 8002a02:	f002 f8c2 	bl	8004b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 3, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2103      	movs	r1, #3
 8002a0a:	2015      	movs	r0, #21
 8002a0c:	f002 f8a1 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8002a10:	2015      	movs	r0, #21
 8002a12:	f002 f8ba 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40006400 	.word	0x40006400
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIM_Base_MspInit+0x68>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d114      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a44:	6193      	str	r3, [r2, #24]
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2104      	movs	r1, #4
 8002a56:	2019      	movs	r0, #25
 8002a58:	f002 f87b 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a5c:	2019      	movs	r0, #25
 8002a5e:	f002 f894 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a62:	e010      	b.n	8002a86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_TIM_Base_MspInit+0x70>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10b      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	61d3      	str	r3, [r2, #28]
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_TIM_Base_MspInit+0x6c>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40000400 	.word	0x40000400

08002a9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d128      	bne.n	8002b10 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	6153      	str	r3, [r2, #20]
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aee:	2303      	movs	r3, #3
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0c:	f002 f858 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_TIM_MspPostInit+0x64>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_TIM_MspPostInit+0x68>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_TIM_MspPostInit+0x68>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6153      	str	r3, [r2, #20]
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_TIM_MspPostInit+0x68>)
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b56:	2301      	movs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	; (8002b88 <HAL_TIM_MspPostInit+0x6c>)
 8002b72:	f002 f825 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40021000 	.word	0x40021000
 8002b88:	48000400 	.word	0x48000400

08002b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_UART_MspInit+0x7c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d127      	bne.n	8002bfe <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6153      	str	r3, [r2, #20]
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_UART_MspInit+0x80>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bee:	2307      	movs	r3, #7
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_UART_MspInit+0x84>)
 8002bfa:	f001 ffe1 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	48000400 	.word	0x48000400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c60:	f000 f8a2 	bl	8002da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <CAN_RX0_IRQHandler+0x10>)
 8002c6e:	f001 fc65 	bl	800453c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000007c 	.word	0x2000007c

08002c7c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <CAN_RX1_IRQHandler+0x10>)
 8002c82:	f001 fc5b 	bl	800453c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000007c 	.word	0x2000007c

08002c90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002c96:	f003 ffa6 	bl	8006be6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200000a4 	.word	0x200000a4

08002ca4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <SystemInit+0x20>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <SystemInit+0x20>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cce:	490e      	ldr	r1, [pc, #56]	; (8002d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <LoopForever+0xe>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd4:	e002      	b.n	8002cdc <LoopCopyDataInit>

08002cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cda:	3304      	adds	r3, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce0:	d3f9      	bcc.n	8002cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce4:	4c0b      	ldr	r4, [pc, #44]	; (8002d14 <LoopForever+0x16>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce8:	e001      	b.n	8002cee <LoopFillZerobss>

08002cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cec:	3204      	adds	r2, #4

08002cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf0:	d3fb      	bcc.n	8002cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cf2:	f7ff ffd7 	bl	8002ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cf6:	f005 fa39 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cfa:	f7ff fa8f 	bl	800221c <main>

08002cfe <LoopForever>:

LoopForever:
    b LoopForever
 8002cfe:	e7fe      	b.n	8002cfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d0c:	0800821c 	.word	0x0800821c
  ldr r2, =_sbss
 8002d10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d14:	20000210 	.word	0x20000210

08002d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC1_2_IRQHandler>
	...

08002d1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_Init+0x28>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_Init+0x28>)
 8002d26:	f043 0310 	orr.w	r3, r3, #16
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	f001 ff05 	bl	8004b3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d32:	200f      	movs	r0, #15
 8002d34:	f000 f808 	bl	8002d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d38:	f7ff fdc0 	bl	80028bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_InitTick+0x54>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_InitTick+0x58>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 ff1d 	bl	8004ba6 <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00e      	b.n	8002d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d80a      	bhi.n	8002d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f001 fee5 	bl	8004b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d88:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_InitTick+0x5c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000008 	.word	0x20000008
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x20>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x24>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_IncTick+0x24>)
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	2000020c 	.word	0x2000020c

08002dd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_GetTick+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000020c 	.word	0x2000020c

08002de8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b09a      	sub	sp, #104	; 0x68
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e172      	b.n	80030ee <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d176      	bne.n	8002f08 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d152      	bne.n	8002ec8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fd61 	bl	8002904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d13b      	bne.n	8002ec8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fe3b 	bl	8003acc <ADC_Disable>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12f      	bne.n	8002ec8 <HAL_ADC_Init+0xe0>
 8002e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12b      	bne.n	8002ec8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e78:	f023 0302 	bic.w	r3, r3, #2
 8002e7c:	f043 0202 	orr.w	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e92:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ea2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea4:	4b94      	ldr	r3, [pc, #592]	; (80030f8 <HAL_ADC_Init+0x310>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a94      	ldr	r2, [pc, #592]	; (80030fc <HAL_ADC_Init+0x314>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0c9a      	lsrs	r2, r3, #18
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eba:	e002      	b.n	8002ec2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f9      	bne.n	8002ebc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee4:	d110      	bne.n	8002f08 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f023 0312 	bic.w	r3, r3, #18
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 80df 	bne.w	80030d4 <HAL_ADC_Init+0x2ec>
 8002f16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80da 	bne.w	80030d4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80d2 	bne.w	80030d4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f38:	f043 0202 	orr.w	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f40:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <HAL_ADC_Init+0x318>)
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d102      	bne.n	8002f54 <HAL_ADC_Init+0x16c>
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_ADC_Init+0x31c>)
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_Init+0x172>
 8002f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_ADC_Init+0x192>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_Init+0x192>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_Init+0x194>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11c      	bne.n	8002fba <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_ADC_Init+0x1ba>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_Init+0x1ba>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_ADC_Init+0x1bc>
 8002fa2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7e5b      	ldrb	r3, [r3, #25]
 8002fbe:	035b      	lsls	r3, r3, #13
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fc4:	2a01      	cmp	r2, #1
 8002fc6:	d002      	beq.n	8002fce <HAL_ADC_Init+0x1e6>
 8002fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fcc:	e000      	b.n	8002fd0 <HAL_ADC_Init+0x1e8>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11b      	bne.n	8003026 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7e5b      	ldrb	r3, [r3, #25]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	045a      	lsls	r2, r3, #17
 8002ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003000:	4313      	orrs	r3, r2
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	663b      	str	r3, [r7, #96]	; 0x60
 8003008:	e00d      	b.n	8003026 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d007      	beq.n	800303e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	4313      	orrs	r3, r2
 8003038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800303a:	4313      	orrs	r3, r2
 800303c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	d114      	bne.n	8003076 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305a:	f023 0302 	bic.w	r3, r3, #2
 800305e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
 8003064:	039a      	lsls	r2, r3, #14
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4313      	orrs	r3, r2
 8003070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003072:	4313      	orrs	r3, r2
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_ADC_Init+0x320>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10c      	bne.n	80030ac <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	f023 010f 	bic.w	r1, r3, #15
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	1e5a      	subs	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
 80030aa:	e007      	b.n	80030bc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020f 	bic.w	r2, r2, #15
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
 80030d2:	e00a      	b.n	80030ea <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f023 0312 	bic.w	r3, r3, #18
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80030ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3768      	adds	r7, #104	; 0x68
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	50000300 	.word	0x50000300
 8003104:	50000100 	.word	0x50000100
 8003108:	fff0c007 	.word	0xfff0c007

0800310c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 809c 	bne.w	8003260 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Start+0x2a>
 8003132:	2302      	movs	r3, #2
 8003134:	e097      	b.n	8003266 <HAL_ADC_Start+0x15a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fc60 	bl	8003a04 <ADC_Enable>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8083 	bne.w	8003256 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_ADC_Start+0x164>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_ADC_Start+0x6e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003178:	d115      	bne.n	80031a6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d027      	beq.n	80031e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800319c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031a4:	e01e      	b.n	80031e4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Start+0xba>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <HAL_ADC_Start+0x168>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10e      	bne.n	80031e4 <HAL_ADC_Start+0xd8>
 80031c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	d106      	bne.n	8003200 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f023 0206 	bic.w	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
 80031fe:	e002      	b.n	8003206 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	221c      	movs	r2, #28
 8003214:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_ADC_Start+0x164>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_ADC_Start+0x138>
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_ADC_Start+0x164>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b05      	cmp	r3, #5
 800322c:	d00a      	beq.n	8003244 <HAL_ADC_Start+0x138>
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_ADC_Start+0x164>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2b09      	cmp	r3, #9
 8003238:	d004      	beq.n	8003244 <HAL_ADC_Start+0x138>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003242:	d10f      	bne.n	8003264 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0204 	orr.w	r2, r2, #4
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	e006      	b.n	8003264 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800325e:	e001      	b.n	8003264 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003260:	2302      	movs	r3, #2
 8003262:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	50000300 	.word	0x50000300
 8003274:	50000100 	.word	0x50000100

08003278 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADC_Stop+0x1a>
 800328e:	2302      	movs	r3, #2
 8003290:	e023      	b.n	80032da <HAL_ADC_Stop+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800329a:	216c      	movs	r1, #108	; 0x6c
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fc7b 	bl	8003b98 <ADC_ConversionStop>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d111      	bne.n	80032d0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fc0d 	bl	8003acc <ADC_Disable>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d102      	bne.n	8003300 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80032fa:	2308      	movs	r3, #8
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e02e      	b.n	800335e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003300:	4b5e      	ldr	r3, [pc, #376]	; (800347c <HAL_ADC_PollForConversion+0x198>)
 8003302:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2b00      	cmp	r3, #0
 800330e:	d112      	bne.n	8003336 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d11d      	bne.n	800335a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e09d      	b.n	8003472 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e08b      	b.n	8003472 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800335a:	230c      	movs	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_ADC_PollForConversion+0x198>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_ADC_PollForConversion+0x90>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003372:	d104      	bne.n	800337e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e003      	b.n	8003386 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800337e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003386:	f7ff fd23 	bl	8002dd0 <HAL_GetTick>
 800338a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800338c:	e021      	b.n	80033d2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d01d      	beq.n	80033d2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_ADC_PollForConversion+0xc8>
 800339c:	f7ff fd18 	bl	8002dd0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d212      	bcs.n	80033d2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e04f      	b.n	8003472 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0d6      	beq.n	800338e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d131      	bne.n	800345e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12c      	bne.n	800345e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d125      	bne.n	800345e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d112      	bne.n	8003446 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d112      	bne.n	800345e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
 8003444:	e00b      	b.n	800345e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	50000300 	.word	0x50000300

08003480 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b09b      	sub	sp, #108	; 0x6c
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x22>
 800349e:	2302      	movs	r3, #2
 80034a0:	e2a5      	b.n	80039ee <HAL_ADC_ConfigChannel+0x56e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 8289 	bne.w	80039cc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d81c      	bhi.n	80034fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	461a      	mov	r2, r3
 80034d6:	231f      	movs	r3, #31
 80034d8:	4093      	lsls	r3, r2
 80034da:	43db      	mvns	r3, r3
 80034dc:	4019      	ands	r1, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
 80034fa:	e063      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b09      	cmp	r3, #9
 8003502:	d81e      	bhi.n	8003542 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	3b1e      	subs	r3, #30
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	4019      	ands	r1, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	3b1e      	subs	r3, #30
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	635a      	str	r2, [r3, #52]	; 0x34
 8003540:	e040      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b0e      	cmp	r3, #14
 8003548:	d81e      	bhi.n	8003588 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	3b3c      	subs	r3, #60	; 0x3c
 800355e:	221f      	movs	r2, #31
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	4019      	ands	r1, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	3b3c      	subs	r3, #60	; 0x3c
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
 8003586:	e01d      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	3b5a      	subs	r3, #90	; 0x5a
 800359c:	221f      	movs	r2, #31
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4019      	ands	r1, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	3b5a      	subs	r3, #90	; 0x5a
 80035b8:	fa00 f203 	lsl.w	r2, r0, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 80e5 	bne.w	800379e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d91c      	bls.n	8003616 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	3b1e      	subs	r3, #30
 80035ee:	2207      	movs	r2, #7
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	4019      	ands	r1, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6898      	ldr	r0, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	3b1e      	subs	r3, #30
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	619a      	str	r2, [r3, #24]
 8003614:	e019      	b.n	800364a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6959      	ldr	r1, [r3, #20]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	2207      	movs	r2, #7
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	4019      	ands	r1, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6898      	ldr	r0, [r3, #8]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	fa00 f203 	lsl.w	r2, r0, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	3b01      	subs	r3, #1
 8003668:	2b03      	cmp	r3, #3
 800366a:	d84f      	bhi.n	800370c <HAL_ADC_ConfigChannel+0x28c>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_ADC_ConfigChannel+0x1f4>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003685 	.word	0x08003685
 8003678:	080036a7 	.word	0x080036a7
 800367c:	080036c9 	.word	0x080036c9
 8003680:	080036eb 	.word	0x080036eb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800368a:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <HAL_ADC_ConfigChannel+0x484>)
 800368c:	4013      	ands	r3, r2
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	0691      	lsls	r1, r2, #26
 8003694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003696:	430a      	orrs	r2, r1
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036a4:	e07e      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036ac:	4b95      	ldr	r3, [pc, #596]	; (8003904 <HAL_ADC_ConfigChannel+0x484>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	0691      	lsls	r1, r2, #26
 80036b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036b8:	430a      	orrs	r2, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036c4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036c6:	e06d      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036ce:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <HAL_ADC_ConfigChannel+0x484>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	0691      	lsls	r1, r2, #26
 80036d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036da:	430a      	orrs	r2, r1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036e6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036e8:	e05c      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <HAL_ADC_ConfigChannel+0x484>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	0691      	lsls	r1, r2, #26
 80036fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036fc:	430a      	orrs	r2, r1
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003708:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800370a:	e04b      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	069b      	lsls	r3, r3, #26
 800371c:	429a      	cmp	r2, r3
 800371e:	d107      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800372e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	069b      	lsls	r3, r3, #26
 8003740:	429a      	cmp	r2, r3
 8003742:	d107      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003752:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	069b      	lsls	r3, r3, #26
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003776:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	429a      	cmp	r2, r3
 800378a:	d10a      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800379a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800379c:	e001      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80037a2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x344>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x344>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x346>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f040 810b 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d00f      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80037f2:	e049      	b.n	8003888 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b09      	cmp	r3, #9
 8003814:	d91c      	bls.n	8003850 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6999      	ldr	r1, [r3, #24]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	3b1b      	subs	r3, #27
 8003828:	2207      	movs	r2, #7
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	4019      	ands	r1, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6898      	ldr	r0, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	3b1b      	subs	r3, #27
 8003842:	fa00 f203 	lsl.w	r2, r0, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	619a      	str	r2, [r3, #24]
 800384e:	e01b      	b.n	8003888 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6959      	ldr	r1, [r3, #20]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	2207      	movs	r2, #7
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	4019      	ands	r1, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6898      	ldr	r0, [r3, #8]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	fa00 f203 	lsl.w	r2, r0, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <HAL_ADC_ConfigChannel+0x488>)
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b10      	cmp	r3, #16
 8003892:	d105      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038a4:	2b11      	cmp	r3, #17
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038b8:	2b12      	cmp	r3, #18
 80038ba:	f040 8092 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 808b 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d4:	d102      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x45c>
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_ADC_ConfigChannel+0x48c>)
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e002      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x462>
 80038dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10f      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x490>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d108      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x490>
 80038fe:	2301      	movs	r3, #1
 8003900:	e007      	b.n	8003912 <HAL_ADC_ConfigChannel+0x492>
 8003902:	bf00      	nop
 8003904:	83fff000 	.word	0x83fff000
 8003908:	50000300 	.word	0x50000300
 800390c:	50000100 	.word	0x50000100
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d150      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003916:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d107      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x4b8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x4b8>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_ADC_ConfigChannel+0x4ba>
 8003938:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800393a:	2b00      	cmp	r3, #0
 800393c:	d13c      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d11d      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x502>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394e:	d118      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_ADC_ConfigChannel+0x57c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <HAL_ADC_ConfigChannel+0x580>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9a      	lsrs	r2, r3, #18
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003972:	e002      	b.n	800397a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3b01      	subs	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f9      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003980:	e02e      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b11      	cmp	r3, #17
 8003988:	d10b      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x522>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003992:	d106      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039a0:	e01e      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b12      	cmp	r3, #18
 80039a8:	d11a      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039b6:	e013      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039ca:	e00a      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039de:	e000      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	376c      	adds	r7, #108	; 0x6c
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000
 8003a00:	431bde83 	.word	0x431bde83

08003a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d108      	bne.n	8003a30 <ADC_Enable+0x2c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <ADC_Enable+0x2c>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <ADC_Enable+0x2e>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d143      	bne.n	8003abe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <ADC_Enable+0xc4>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e02f      	b.n	8003ac0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003a70:	f7ff f9ae 	bl	8002dd0 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a76:	e01b      	b.n	8003ab0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a78:	f7ff f9aa 	bl	8002dd0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d914      	bls.n	8003ab0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d00d      	beq.n	8003ab0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e007      	b.n	8003ac0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d1dc      	bne.n	8003a78 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	8000003f 	.word	0x8000003f

08003acc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <ADC_Disable+0x2c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <ADC_Disable+0x2c>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <ADC_Disable+0x2e>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d047      	beq.n	8003b8e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030d 	and.w	r3, r3, #13
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10f      	bne.n	8003b2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0202 	orr.w	r2, r2, #2
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2203      	movs	r2, #3
 8003b22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b24:	f7ff f954 	bl	8002dd0 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b2a:	e029      	b.n	8003b80 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0210 	orr.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e023      	b.n	8003b90 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b48:	f7ff f942 	bl	8002dd0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d914      	bls.n	8003b80 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10d      	bne.n	8003b80 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e007      	b.n	8003b90 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d0dc      	beq.n	8003b48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 809b 	beq.w	8003cf4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bcc:	d12a      	bne.n	8003c24 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d126      	bne.n	8003c24 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d122      	bne.n	8003c24 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003bde:	230c      	movs	r3, #12
 8003be0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003be2:	e014      	b.n	8003c0e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <ADC_ConversionStop+0x168>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d90d      	bls.n	8003c08 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e076      	b.n	8003cf6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d1e3      	bne.n	8003be4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b60      	cmp	r3, #96	; 0x60
 8003c28:	d015      	beq.n	8003c56 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d10e      	bne.n	8003c56 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0210 	orr.w	r2, r2, #16
 8003c54:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d015      	beq.n	8003c88 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d10e      	bne.n	8003c88 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b60      	cmp	r3, #96	; 0x60
 8003c8c:	d005      	beq.n	8003c9a <ADC_ConversionStop+0x102>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b6c      	cmp	r3, #108	; 0x6c
 8003c92:	d105      	bne.n	8003ca0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c94:	230c      	movs	r3, #12
 8003c96:	617b      	str	r3, [r7, #20]
        break;
 8003c98:	e005      	b.n	8003ca6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	617b      	str	r3, [r7, #20]
        break;
 8003c9e:	e002      	b.n	8003ca6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	617b      	str	r3, [r7, #20]
        break;
 8003ca4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ca6:	f7ff f893 	bl	8002dd0 <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003cac:	e01b      	b.n	8003ce6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cae:	f7ff f88f 	bl	8002dd0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b0b      	cmp	r3, #11
 8003cba:	d914      	bls.n	8003ce6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e007      	b.n	8003cf6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1dc      	bne.n	8003cae <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000993ff 	.word	0x000993ff

08003d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0ed      	b.n	8003ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fe fe2c 	bl	8002980 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d38:	f7ff f84a 	bl	8002dd0 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d3e:	e012      	b.n	8003d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d40:	f7ff f846 	bl	8002dd0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b0a      	cmp	r3, #10
 8003d4c:	d90b      	bls.n	8003d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0c5      	b.n	8003ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0e5      	beq.n	8003d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0202 	bic.w	r2, r2, #2
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7ff f824 	bl	8002dd0 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d8a:	e012      	b.n	8003db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d8c:	f7ff f820 	bl	8002dd0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d90b      	bls.n	8003db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2205      	movs	r2, #5
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e09f      	b.n	8003ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7e1b      	ldrb	r3, [r3, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d108      	bne.n	8003dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e007      	b.n	8003dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7e5b      	ldrb	r3, [r3, #25]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d108      	bne.n	8003e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e007      	b.n	8003e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e9b      	ldrb	r3, [r3, #26]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d108      	bne.n	8003e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0220 	orr.w	r2, r2, #32
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e007      	b.n	8003e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0220 	bic.w	r2, r2, #32
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7edb      	ldrb	r3, [r3, #27]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0210 	bic.w	r2, r2, #16
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0210 	orr.w	r2, r2, #16
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7f1b      	ldrb	r3, [r3, #28]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e007      	b.n	8003e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0208 	bic.w	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7f5b      	ldrb	r3, [r3, #29]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0204 	orr.w	r2, r2, #4
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d003      	beq.n	8003f20 <HAL_CAN_ConfigFilter+0x26>
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	f040 80aa 	bne.w	8004074 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2201      	movs	r2, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d123      	bne.n	8003fa2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	3248      	adds	r2, #72	; 0x48
 8003f82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	3348      	adds	r3, #72	; 0x48
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d122      	bne.n	8003ff0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003fca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	3248      	adds	r2, #72	; 0x48
 8003fd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fe4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	3348      	adds	r3, #72	; 0x48
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800400a:	e007      	b.n	800401c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	431a      	orrs	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	401a      	ands	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004036:	e007      	b.n	8004048 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	431a      	orrs	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	431a      	orrs	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e006      	b.n	8004082 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d12e      	bne.n	8004100 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ba:	f7fe fe89 	bl	8002dd0 <HAL_GetTick>
 80040be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040c0:	e012      	b.n	80040e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040c2:	f7fe fe85 	bl	8002dd0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b0a      	cmp	r3, #10
 80040ce:	d90b      	bls.n	80040e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2205      	movs	r2, #5
 80040e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e012      	b.n	800410e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e006      	b.n	800410e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004116:	b480      	push	{r7}
 8004118:	b089      	sub	sp, #36	; 0x24
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004134:	7ffb      	ldrb	r3, [r7, #31]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d003      	beq.n	8004142 <HAL_CAN_AddTxMessage+0x2c>
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b02      	cmp	r3, #2
 800413e:	f040 80b8 	bne.w	80042b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a0 	beq.w	80042a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d907      	bls.n	8004182 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e09e      	b.n	80042c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004182:	2201      	movs	r2, #1
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	409a      	lsls	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	6809      	ldr	r1, [r1, #0]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3318      	adds	r3, #24
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	440b      	add	r3, r1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e00f      	b.n	80041d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80041c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3318      	adds	r3, #24
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	440b      	add	r3, r1
 80041ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3318      	adds	r3, #24
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	440b      	add	r3, r1
 80041e0:	3304      	adds	r3, #4
 80041e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	7d1b      	ldrb	r3, [r3, #20]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d111      	bne.n	8004210 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3318      	adds	r3, #24
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	3304      	adds	r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3318      	adds	r3, #24
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	440b      	add	r3, r1
 800420c:	3304      	adds	r3, #4
 800420e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3307      	adds	r3, #7
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	061a      	lsls	r2, r3, #24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3306      	adds	r3, #6
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3305      	adds	r3, #5
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	4313      	orrs	r3, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	3204      	adds	r2, #4
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	4610      	mov	r0, r2
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	6811      	ldr	r1, [r2, #0]
 8004238:	ea43 0200 	orr.w	r2, r3, r0
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	440b      	add	r3, r1
 8004242:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004246:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3303      	adds	r3, #3
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	061a      	lsls	r2, r3, #24
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3302      	adds	r3, #2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3301      	adds	r3, #1
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	4313      	orrs	r3, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	4610      	mov	r0, r2
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6811      	ldr	r1, [r2, #0]
 800426e:	ea43 0200 	orr.w	r2, r3, r0
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	440b      	add	r3, r1
 8004278:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800427c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3318      	adds	r3, #24
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	6811      	ldr	r1, [r2, #0]
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3318      	adds	r3, #24
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	440b      	add	r3, r1
 800429c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e00e      	b.n	80042c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e006      	b.n	80042c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3724      	adds	r7, #36	; 0x24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d003      	beq.n	80042f0 <HAL_CAN_GetRxMessage+0x24>
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	f040 80f3 	bne.w	80044d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10e      	bne.n	8004314 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0e7      	b.n	80044e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0d8      	b.n	80044e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	331b      	adds	r3, #27
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4413      	add	r3, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0204 	and.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	331b      	adds	r3, #27
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	0d5b      	lsrs	r3, r3, #21
 8004360:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e00b      	b.n	8004382 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	331b      	adds	r3, #27
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4413      	add	r3, r2
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	331b      	adds	r3, #27
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4413      	add	r3, r2
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0202 	and.w	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	331b      	adds	r3, #27
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	331b      	adds	r3, #27
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	4413      	add	r3, r2
 80043bc:	3304      	adds	r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	331b      	adds	r3, #27
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0a1a      	lsrs	r2, r3, #8
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	4413      	add	r3, r2
 800441a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0c1a      	lsrs	r2, r3, #16
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3302      	adds	r3, #2
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4413      	add	r3, r2
 8004434:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0e1a      	lsrs	r2, r3, #24
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3303      	adds	r3, #3
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	4413      	add	r3, r2
 800444e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	3304      	adds	r3, #4
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4413      	add	r3, r2
 8004466:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0a1a      	lsrs	r2, r3, #8
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	3305      	adds	r3, #5
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	4413      	add	r3, r2
 8004480:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0c1a      	lsrs	r2, r3, #16
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3306      	adds	r3, #6
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	4413      	add	r3, r2
 800449a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e1a      	lsrs	r2, r3, #24
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	3307      	adds	r3, #7
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0220 	orr.w	r2, r2, #32
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e007      	b.n	80044d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e006      	b.n	80044e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004500:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d002      	beq.n	800450e <HAL_CAN_ActivateNotification+0x1e>
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d109      	bne.n	8004522 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6959      	ldr	r1, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e006      	b.n	8004530 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d07c      	beq.n	800467c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f983 	bl	80048aa <HAL_CAN_TxMailbox0CompleteCallback>
 80045a4:	e016      	b.n	80045d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	e00c      	b.n	80045d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	e002      	b.n	80045d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f989 	bl	80048e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d024      	beq.n	8004628 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f963 	bl	80048be <HAL_CAN_TxMailbox1CompleteCallback>
 80045f8:	e016      	b.n	8004628 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	e00c      	b.n	8004628 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	e002      	b.n	8004628 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f969 	bl	80048fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d024      	beq.n	800467c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800463a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f943 	bl	80048d2 <HAL_CAN_TxMailbox2CompleteCallback>
 800464c:	e016      	b.n	800467c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e00c      	b.n	800467c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e002      	b.n	800467c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f949 	bl	800490e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004696:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2210      	movs	r2, #16
 800469e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d006      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2208      	movs	r2, #8
 80046ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f930 	bl	8004922 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc ff60 	bl	80015a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2210      	movs	r2, #16
 8004702:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f912 	bl	800494a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8f9 	bl	8004936 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d006      	beq.n	8004766 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2210      	movs	r2, #16
 800475e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8fc 	bl	800495e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2208      	movs	r2, #8
 8004780:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f8f5 	bl	8004972 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d07b      	beq.n	800488a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d072      	beq.n	8004882 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f043 0302 	orr.w	r3, r3, #2
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f043 0304 	orr.w	r3, r3, #4
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d043      	beq.n	8004882 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03e      	beq.n	8004882 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480a:	2b60      	cmp	r3, #96	; 0x60
 800480c:	d02b      	beq.n	8004866 <HAL_CAN_IRQHandler+0x32a>
 800480e:	2b60      	cmp	r3, #96	; 0x60
 8004810:	d82e      	bhi.n	8004870 <HAL_CAN_IRQHandler+0x334>
 8004812:	2b50      	cmp	r3, #80	; 0x50
 8004814:	d022      	beq.n	800485c <HAL_CAN_IRQHandler+0x320>
 8004816:	2b50      	cmp	r3, #80	; 0x50
 8004818:	d82a      	bhi.n	8004870 <HAL_CAN_IRQHandler+0x334>
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d019      	beq.n	8004852 <HAL_CAN_IRQHandler+0x316>
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d826      	bhi.n	8004870 <HAL_CAN_IRQHandler+0x334>
 8004822:	2b30      	cmp	r3, #48	; 0x30
 8004824:	d010      	beq.n	8004848 <HAL_CAN_IRQHandler+0x30c>
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d822      	bhi.n	8004870 <HAL_CAN_IRQHandler+0x334>
 800482a:	2b10      	cmp	r3, #16
 800482c:	d002      	beq.n	8004834 <HAL_CAN_IRQHandler+0x2f8>
 800482e:	2b20      	cmp	r3, #32
 8004830:	d005      	beq.n	800483e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004832:	e01d      	b.n	8004870 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f043 0308 	orr.w	r3, r3, #8
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800483c:	e019      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f043 0310 	orr.w	r3, r3, #16
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004846:	e014      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f043 0320 	orr.w	r3, r3, #32
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004850:	e00f      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800485a:	e00a      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004864:	e005      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800486e:	e000      	b.n	8004872 <HAL_CAN_IRQHandler+0x336>
            break;
 8004870:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004880:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2204      	movs	r2, #4
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f872 	bl	8004986 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048a2:	bf00      	nop
 80048a4:	3728      	adds	r7, #40	; 0x28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <__NVIC_EnableIRQ+0x38>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
         );
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d301      	bcc.n	8004b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e00f      	b.n	8004b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <SysTick_Config+0x40>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b16:	210f      	movs	r1, #15
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f7ff ff8e 	bl	8004a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SysTick_Config+0x40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SysTick_Config+0x40>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff29 	bl	800499c <__NVIC_SetPriorityGrouping>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b64:	f7ff ff3e 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff8e 	bl	8004a90 <NVIC_EncodePriority>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5d 	bl	8004a3c <__NVIC_SetPriority>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff31 	bl	8004a00 <__NVIC_EnableIRQ>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ffa2 	bl	8004af8 <SysTick_Config>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bce:	e14e      	b.n	8004e6e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8140 	beq.w	8004e68 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x40>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 809a 	beq.w	8004e68 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <HAL_GPIO_Init+0x2cc>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	4a54      	ldr	r2, [pc, #336]	; (8004e8c <HAL_GPIO_Init+0x2cc>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6193      	str	r3, [r2, #24]
 8004d40:	4b52      	ldr	r3, [pc, #328]	; (8004e8c <HAL_GPIO_Init+0x2cc>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d4c:	4a50      	ldr	r2, [pc, #320]	; (8004e90 <HAL_GPIO_Init+0x2d0>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d76:	d013      	beq.n	8004da0 <HAL_GPIO_Init+0x1e0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a46      	ldr	r2, [pc, #280]	; (8004e94 <HAL_GPIO_Init+0x2d4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00d      	beq.n	8004d9c <HAL_GPIO_Init+0x1dc>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a45      	ldr	r2, [pc, #276]	; (8004e98 <HAL_GPIO_Init+0x2d8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <HAL_GPIO_Init+0x1d8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a44      	ldr	r2, [pc, #272]	; (8004e9c <HAL_GPIO_Init+0x2dc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_GPIO_Init+0x1d4>
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <HAL_GPIO_Init+0x1e2>
 8004d94:	2305      	movs	r3, #5
 8004d96:	e004      	b.n	8004da2 <HAL_GPIO_Init+0x1e2>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e002      	b.n	8004da2 <HAL_GPIO_Init+0x1e2>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_GPIO_Init+0x1e2>
 8004da0:	2300      	movs	r3, #0
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	f002 0203 	and.w	r2, r2, #3
 8004da8:	0092      	lsls	r2, r2, #2
 8004daa:	4093      	lsls	r3, r2
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004db2:	4937      	ldr	r1, [pc, #220]	; (8004e90 <HAL_GPIO_Init+0x2d0>)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	3302      	adds	r3, #2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dc0:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004de4:	4a2e      	ldr	r2, [pc, #184]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dea:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e0e:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e14:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4013      	ands	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e62:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <HAL_GPIO_Init+0x2e0>)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f47f aea9 	bne.w	8004bd0 <HAL_GPIO_Init+0x10>
  }
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40010000 	.word	0x40010000
 8004e94:	48000400 	.word	0x48000400
 8004e98:	48000800 	.word	0x48000800
 8004e9c:	48000c00 	.word	0x48000c00
 8004ea0:	40010400 	.word	0x40010400

08004ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e001      	b.n	8004ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ee4:	787b      	ldrb	r3, [r7, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ef0:	e002      	b.n	8004ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ef2:	887a      	ldrh	r2, [r7, #2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f000 bef4 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 816a 	beq.w	8005202 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f2e:	4bb3      	ldr	r3, [pc, #716]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00c      	beq.n	8004f54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f3a:	4bb0      	ldr	r3, [pc, #704]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d159      	bne.n	8004ffa <HAL_RCC_OscConfig+0xf6>
 8004f46:	4bad      	ldr	r3, [pc, #692]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f52:	d152      	bne.n	8004ffa <HAL_RCC_OscConfig+0xf6>
 8004f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d102      	bne.n	8004f86 <HAL_RCC_OscConfig+0x82>
 8004f80:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0xae>
 8004f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004fa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004fa6:	fa93 f3a3 	rbit	r3, r3
 8004faa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004fae:	4b93      	ldr	r3, [pc, #588]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004fba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fbe:	fa92 f2a2 	rbit	r2, r2
 8004fc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004fc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004fca:	fab2 f282 	clz	r2, r2
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	f042 0220 	orr.w	r2, r2, #32
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	f002 021f 	and.w	r2, r2, #31
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 810c 	beq.w	8005200 <HAL_RCC_OscConfig+0x2fc>
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8106 	bne.w	8005200 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f000 be86 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005004:	d106      	bne.n	8005014 <HAL_RCC_OscConfig+0x110>
 8005006:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7c      	ldr	r2, [pc, #496]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e030      	b.n	8005076 <HAL_RCC_OscConfig+0x172>
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x134>
 800501e:	4b77      	ldr	r3, [pc, #476]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a76      	ldr	r2, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4b74      	ldr	r3, [pc, #464]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e01e      	b.n	8005076 <HAL_RCC_OscConfig+0x172>
 8005038:	1d3b      	adds	r3, r7, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x15a>
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 800504a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a69      	ldr	r2, [pc, #420]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x172>
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a66      	ldr	r2, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005074:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005076:	4b61      	ldr	r3, [pc, #388]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	f023 020f 	bic.w	r2, r3, #15
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	495d      	ldr	r1, [pc, #372]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d059      	beq.n	8005148 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd fe9c 	bl	8002dd0 <HAL_GetTick>
 8005098:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509e:	f7fd fe97 	bl	8002dd0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d902      	bls.n	80050b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f000 be29 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
 80050b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80050c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d102      	bne.n	80050e6 <HAL_RCC_OscConfig+0x1e2>
 80050e0:	4b46      	ldr	r3, [pc, #280]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x20e>
 80050e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005102:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005106:	fa93 f3a3 	rbit	r3, r3
 800510a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005116:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800511a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800511e:	fa92 f2a2 	rbit	r2, r2
 8005122:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005126:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800512a:	fab2 f282 	clz	r2, r2
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f042 0220 	orr.w	r2, r2, #32
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f002 021f 	and.w	r2, r2, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ab      	beq.n	800509e <HAL_RCC_OscConfig+0x19a>
 8005146:	e05c      	b.n	8005202 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd fe42 	bl	8002dd0 <HAL_GetTick>
 800514c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005152:	f7fd fe3d 	bl	8002dd0 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d902      	bls.n	8005168 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	f000 bdcf 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
 8005168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800516c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005174:	fa93 f3a3 	rbit	r3, r3
 8005178:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800517c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d102      	bne.n	800519a <HAL_RCC_OscConfig+0x296>
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x2c2>
 800519a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800519e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80051ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80051b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_RCC_OscConfig+0x2f8>)
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80051ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051d2:	fa92 f2a2 	rbit	r2, r2
 80051d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80051da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80051de:	fab2 f282 	clz	r2, r2
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	f042 0220 	orr.w	r2, r2, #32
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f002 021f 	and.w	r2, r2, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f202 	lsl.w	r2, r1, r2
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ab      	bne.n	8005152 <HAL_RCC_OscConfig+0x24e>
 80051fa:	e002      	b.n	8005202 <HAL_RCC_OscConfig+0x2fe>
 80051fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 816f 	beq.w	80054f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005212:	4bd0      	ldr	r3, [pc, #832]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800521e:	4bcd      	ldr	r3, [pc, #820]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b08      	cmp	r3, #8
 8005228:	d16c      	bne.n	8005304 <HAL_RCC_OscConfig+0x400>
 800522a:	4bca      	ldr	r3, [pc, #808]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d166      	bne.n	8005304 <HAL_RCC_OscConfig+0x400>
 8005236:	2302      	movs	r3, #2
 8005238:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005240:	fa93 f3a3 	rbit	r3, r3
 8005244:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005248:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	b2db      	uxtb	r3, r3
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d102      	bne.n	8005266 <HAL_RCC_OscConfig+0x362>
 8005260:	4bbc      	ldr	r3, [pc, #752]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	e013      	b.n	800528e <HAL_RCC_OscConfig+0x38a>
 8005266:	2302      	movs	r3, #2
 8005268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005278:	2302      	movs	r3, #2
 800527a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800527e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800528a:	4bb2      	ldr	r3, [pc, #712]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2202      	movs	r2, #2
 8005290:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005294:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005298:	fa92 f2a2 	rbit	r2, r2
 800529c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80052a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80052a4:	fab2 f282 	clz	r2, r2
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	f042 0220 	orr.w	r2, r2, #32
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f002 021f 	and.w	r2, r2, #31
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_RCC_OscConfig+0x3cc>
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f000 bd1b 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4ba0      	ldr	r3, [pc, #640]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	21f8      	movs	r1, #248	; 0xf8
 80052e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052e8:	fa91 f1a1 	rbit	r1, r1
 80052ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80052f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80052f4:	fab1 f181 	clz	r1, r1
 80052f8:	b2c9      	uxtb	r1, r1
 80052fa:	408b      	lsls	r3, r1
 80052fc:	4995      	ldr	r1, [pc, #596]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	e0f5      	b.n	80054f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8085 	beq.w	800541a <HAL_RCC_OscConfig+0x516>
 8005310:	2301      	movs	r3, #1
 8005312:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005322:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	2301      	movs	r3, #1
 800533a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd fd48 	bl	8002dd0 <HAL_GetTick>
 8005340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7fd fd43 	bl	8002dd0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d902      	bls.n	800535c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	f000 bcd5 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
 800535c:	2302      	movs	r3, #2
 800535e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800536e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d102      	bne.n	800538c <HAL_RCC_OscConfig+0x488>
 8005386:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	e013      	b.n	80053b4 <HAL_RCC_OscConfig+0x4b0>
 800538c:	2302      	movs	r3, #2
 800538e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800539e:	2302      	movs	r3, #2
 80053a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80053b0:	4b68      	ldr	r3, [pc, #416]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2202      	movs	r2, #2
 80053b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80053ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053be:	fa92 f2a2 	rbit	r2, r2
 80053c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80053c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80053ca:	fab2 f282 	clz	r2, r2
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	f042 0220 	orr.w	r2, r2, #32
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	f002 021f 	and.w	r2, r2, #31
 80053da:	2101      	movs	r1, #1
 80053dc:	fa01 f202 	lsl.w	r2, r1, r2
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0af      	beq.n	8005346 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	21f8      	movs	r1, #248	; 0xf8
 80053f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80053fe:	fa91 f1a1 	rbit	r1, r1
 8005402:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005406:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800540a:	fab1 f181 	clz	r1, r1
 800540e:	b2c9      	uxtb	r1, r1
 8005410:	408b      	lsls	r3, r1
 8005412:	4950      	ldr	r1, [pc, #320]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	e06a      	b.n	80054f0 <HAL_RCC_OscConfig+0x5ec>
 800541a:	2301      	movs	r3, #1
 800541c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005424:	fa93 f3a3 	rbit	r3, r3
 8005428:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800542c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800543a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fd fcc3 	bl	8002dd0 <HAL_GetTick>
 800544a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7fd fcbe 	bl	8002dd0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d902      	bls.n	8005466 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	f000 bc50 	b.w	8005d06 <HAL_RCC_OscConfig+0xe02>
 8005466:	2302      	movs	r3, #2
 8005468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d102      	bne.n	8005496 <HAL_RCC_OscConfig+0x592>
 8005490:	4b30      	ldr	r3, [pc, #192]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	e013      	b.n	80054be <HAL_RCC_OscConfig+0x5ba>
 8005496:	2302      	movs	r3, #2
 8005498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054a8:	2302      	movs	r3, #2
 80054aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054ba:	4b26      	ldr	r3, [pc, #152]	; (8005554 <HAL_RCC_OscConfig+0x650>)
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2202      	movs	r2, #2
 80054c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80054c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054c8:	fa92 f2a2 	rbit	r2, r2
 80054cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80054d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80054d4:	fab2 f282 	clz	r2, r2
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	f042 0220 	orr.w	r2, r2, #32
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	f002 021f 	and.w	r2, r2, #31
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1af      	bne.n	8005450 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80da 	beq.w	80056b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d069      	beq.n	80055de <HAL_RCC_OscConfig+0x6da>
 800550a:	2301      	movs	r3, #1
 800550c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005514:	fa93 f3a3 	rbit	r3, r3
 8005518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800551c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <HAL_RCC_OscConfig+0x654>)
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	461a      	mov	r2, r3
 8005530:	2301      	movs	r3, #1
 8005532:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005534:	f7fd fc4c 	bl	8002dd0 <HAL_GetTick>
 8005538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553c:	e00e      	b.n	800555c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800553e:	f7fd fc47 	bl	8002dd0 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d906      	bls.n	800555c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e3d9      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	10908120 	.word	0x10908120
 800555c:	2302      	movs	r3, #2
 800555e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800556e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005572:	2202      	movs	r2, #2
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800558a:	2202      	movs	r2, #2
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	fa93 f2a3 	rbit	r2, r3
 8005598:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800559c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	4ba5      	ldr	r3, [pc, #660]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80055a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055a6:	2102      	movs	r1, #2
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	fa93 f1a3 	rbit	r1, r3
 80055b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055b8:	6019      	str	r1, [r3, #0]
  return result;
 80055ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	fab3 f383 	clz	r3, r3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0b0      	beq.n	800553e <HAL_RCC_OscConfig+0x63a>
 80055dc:	e06a      	b.n	80056b4 <HAL_RCC_OscConfig+0x7b0>
 80055de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fa93 f2a3 	rbit	r2, r3
 80055f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055f4:	601a      	str	r2, [r3, #0]
  return result;
 80055f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80055fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	4b8c      	ldr	r3, [pc, #560]	; (8005838 <HAL_RCC_OscConfig+0x934>)
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	461a      	mov	r2, r3
 800560c:	2300      	movs	r3, #0
 800560e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005610:	f7fd fbde 	bl	8002dd0 <HAL_GetTick>
 8005614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	e009      	b.n	800562e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561a:	f7fd fbd9 	bl	8002dd0 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e36b      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 800562e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005632:	2202      	movs	r2, #2
 8005634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	fa93 f2a3 	rbit	r2, r3
 8005640:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800564a:	2202      	movs	r2, #2
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fa93 f2a3 	rbit	r2, r3
 8005658:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005662:	2202      	movs	r2, #2
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	fa93 f2a3 	rbit	r2, r3
 8005670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005676:	4b6f      	ldr	r3, [pc, #444]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800567e:	2102      	movs	r1, #2
 8005680:	6019      	str	r1, [r3, #0]
 8005682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fa93 f1a3 	rbit	r1, r3
 800568c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005690:	6019      	str	r1, [r3, #0]
  return result;
 8005692:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1b2      	bne.n	800561a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8158 	beq.w	8005974 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ca:	4b5a      	ldr	r3, [pc, #360]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d112      	bne.n	80056fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d6:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4a56      	ldr	r2, [pc, #344]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	61d3      	str	r3, [r2, #28]
 80056e2:	4b54      	ldr	r3, [pc, #336]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fc:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_RCC_OscConfig+0x938>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005708:	4b4c      	ldr	r3, [pc, #304]	; (800583c <HAL_RCC_OscConfig+0x938>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <HAL_RCC_OscConfig+0x938>)
 800570e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005712:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005714:	f7fd fb5c 	bl	8002dd0 <HAL_GetTick>
 8005718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571c:	e009      	b.n	8005732 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571e:	f7fd fb57 	bl	8002dd0 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e2e9      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005732:	4b42      	ldr	r3, [pc, #264]	; (800583c <HAL_RCC_OscConfig+0x938>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ef      	beq.n	800571e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <HAL_RCC_OscConfig+0x852>
 8005748:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	4a39      	ldr	r2, [pc, #228]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6213      	str	r3, [r2, #32]
 8005754:	e02f      	b.n	80057b6 <HAL_RCC_OscConfig+0x8b2>
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <HAL_RCC_OscConfig+0x876>
 8005760:	4b34      	ldr	r3, [pc, #208]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4a33      	ldr	r2, [pc, #204]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	6213      	str	r3, [r2, #32]
 800576c:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4a30      	ldr	r2, [pc, #192]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005772:	f023 0304 	bic.w	r3, r3, #4
 8005776:	6213      	str	r3, [r2, #32]
 8005778:	e01d      	b.n	80057b6 <HAL_RCC_OscConfig+0x8b2>
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d10c      	bne.n	800579e <HAL_RCC_OscConfig+0x89a>
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 800578a:	f043 0304 	orr.w	r3, r3, #4
 800578e:	6213      	str	r3, [r2, #32]
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	4a27      	ldr	r2, [pc, #156]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6213      	str	r3, [r2, #32]
 800579c:	e00b      	b.n	80057b6 <HAL_RCC_OscConfig+0x8b2>
 800579e:	4b25      	ldr	r3, [pc, #148]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	6213      	str	r3, [r2, #32]
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a21      	ldr	r2, [pc, #132]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06b      	beq.n	8005898 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c0:	f7fd fb06 	bl	8002dd0 <HAL_GetTick>
 80057c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c8:	e00b      	b.n	80057e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fd fb01 	bl	8002dd0 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e291      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 80057e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057e6:	2202      	movs	r2, #2
 80057e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	fa93 f2a3 	rbit	r2, r3
 80057f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80057fe:	2202      	movs	r2, #2
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	fa93 f2a3 	rbit	r2, r3
 800580c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005810:	601a      	str	r2, [r3, #0]
  return result;
 8005812:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005816:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	fab3 f383 	clz	r3, r3
 800581c:	b2db      	uxtb	r3, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d109      	bne.n	8005840 <HAL_RCC_OscConfig+0x93c>
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <HAL_RCC_OscConfig+0x930>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x958>
 8005832:	bf00      	nop
 8005834:	40021000 	.word	0x40021000
 8005838:	10908120 	.word	0x10908120
 800583c:	40007000 	.word	0x40007000
 8005840:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005844:	2202      	movs	r2, #2
 8005846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	fa93 f2a3 	rbit	r2, r3
 8005852:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	4bbb      	ldr	r3, [pc, #748]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005860:	2102      	movs	r1, #2
 8005862:	6011      	str	r1, [r2, #0]
 8005864:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	fa92 f1a2 	rbit	r1, r2
 800586e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005872:	6011      	str	r1, [r2, #0]
  return result;
 8005874:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	fab2 f282 	clz	r2, r2
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	f002 021f 	and.w	r2, r2, #31
 800588a:	2101      	movs	r1, #1
 800588c:	fa01 f202 	lsl.w	r2, r1, r2
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d099      	beq.n	80057ca <HAL_RCC_OscConfig+0x8c6>
 8005896:	e063      	b.n	8005960 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005898:	f7fd fa9a 	bl	8002dd0 <HAL_GetTick>
 800589c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a0:	e00b      	b.n	80058ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a2:	f7fd fa95 	bl	8002dd0 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e225      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 80058ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058be:	2202      	movs	r2, #2
 80058c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	fa93 f2a3 	rbit	r2, r3
 80058cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058d6:	2202      	movs	r2, #2
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	fa93 f2a3 	rbit	r2, r3
 80058e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058e8:	601a      	str	r2, [r3, #0]
  return result;
 80058ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	fab3 f383 	clz	r3, r3
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d102      	bne.n	800590a <HAL_RCC_OscConfig+0xa06>
 8005904:	4b90      	ldr	r3, [pc, #576]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	e00d      	b.n	8005926 <HAL_RCC_OscConfig+0xa22>
 800590a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800590e:	2202      	movs	r2, #2
 8005910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	fa93 f2a3 	rbit	r2, r3
 800591c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	4b89      	ldr	r3, [pc, #548]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800592a:	2102      	movs	r1, #2
 800592c:	6011      	str	r1, [r2, #0]
 800592e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	fa92 f1a2 	rbit	r1, r2
 8005938:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800593c:	6011      	str	r1, [r2, #0]
  return result;
 800593e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	fab2 f282 	clz	r2, r2
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	f002 021f 	and.w	r2, r2, #31
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f202 	lsl.w	r2, r1, r2
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1a0      	bne.n	80058a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005960:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b77      	ldr	r3, [pc, #476]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	4a76      	ldr	r2, [pc, #472]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 800596e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005972:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 81c2 	beq.w	8005d04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005980:	4b71      	ldr	r3, [pc, #452]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b08      	cmp	r3, #8
 800598a:	f000 819c 	beq.w	8005cc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f040 8114 	bne.w	8005bc2 <HAL_RCC_OscConfig+0xcbe>
 800599a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800599e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	fa93 f2a3 	rbit	r2, r3
 80059ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059b2:	601a      	str	r2, [r3, #0]
  return result;
 80059b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	461a      	mov	r2, r3
 80059cc:	2300      	movs	r3, #0
 80059ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fd f9fe 	bl	8002dd0 <HAL_GetTick>
 80059d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d8:	e009      	b.n	80059ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059da:	f7fd f9f9 	bl	8002dd0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e18b      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 80059ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	fa93 f2a3 	rbit	r2, r3
 8005a02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a06:	601a      	str	r2, [r3, #0]
  return result;
 8005a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a0e:	fab3 f383 	clz	r3, r3
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d102      	bne.n	8005a28 <HAL_RCC_OscConfig+0xb24>
 8005a22:	4b49      	ldr	r3, [pc, #292]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	e01b      	b.n	8005a60 <HAL_RCC_OscConfig+0xb5c>
 8005a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	fa93 f2a3 	rbit	r2, r3
 8005a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	fa93 f2a3 	rbit	r2, r3
 8005a56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	fa92 f1a2 	rbit	r1, r2
 8005a74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a78:	6011      	str	r1, [r2, #0]
  return result;
 8005a7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	fab2 f282 	clz	r2, r2
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	f042 0220 	orr.w	r2, r2, #32
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	f002 021f 	and.w	r2, r2, #31
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f202 	lsl.w	r2, r1, r2
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d19e      	bne.n	80059da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a9c:	4b2a      	ldr	r3, [pc, #168]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	4925      	ldr	r1, [pc, #148]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
 8005ab8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ad0:	601a      	str	r2, [r3, #0]
  return result;
 8005ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ad6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	fab3 f383 	clz	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ae2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2301      	movs	r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aee:	f7fd f96f 	bl	8002dd0 <HAL_GetTick>
 8005af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005af6:	e009      	b.n	8005b0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fd f96a 	bl	8002dd0 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0fc      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 8005b0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	fa93 f2a3 	rbit	r2, r3
 8005b20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b24:	601a      	str	r2, [r3, #0]
  return result;
 8005b26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d105      	bne.n	8005b4c <HAL_RCC_OscConfig+0xc48>
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <HAL_RCC_OscConfig+0xc44>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	e01e      	b.n	8005b84 <HAL_RCC_OscConfig+0xc80>
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	fa93 f2a3 	rbit	r2, r3
 8005b7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HAL_RCC_OscConfig+0xe0c>)
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	fa92 f1a2 	rbit	r1, r2
 8005b98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005b9c:	6011      	str	r1, [r2, #0]
  return result;
 8005b9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	fab2 f282 	clz	r2, r2
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	f042 0220 	orr.w	r2, r2, #32
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	f002 021f 	and.w	r2, r2, #31
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d09b      	beq.n	8005af8 <HAL_RCC_OscConfig+0xbf4>
 8005bc0:	e0a0      	b.n	8005d04 <HAL_RCC_OscConfig+0xe00>
 8005bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	fa93 f2a3 	rbit	r2, r3
 8005bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bda:	601a      	str	r2, [r3, #0]
  return result;
 8005bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005be0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fd f8ea 	bl	8002dd0 <HAL_GetTick>
 8005bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c00:	e009      	b.n	8005c16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c02:	f7fd f8e5 	bl	8002dd0 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e077      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
 8005c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	fa93 f2a3 	rbit	r2, r3
 8005c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c2e:	601a      	str	r2, [r3, #0]
  return result;
 8005c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <HAL_RCC_OscConfig+0xd4c>
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_RCC_OscConfig+0xe0c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	e01b      	b.n	8005c88 <HAL_RCC_OscConfig+0xd84>
 8005c50:	f107 0320 	add.w	r3, r7, #32
 8005c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	f107 0320 	add.w	r3, r7, #32
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	fa93 f2a3 	rbit	r2, r3
 8005c64:	f107 031c 	add.w	r3, r7, #28
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	f107 0318 	add.w	r3, r7, #24
 8005c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f107 0318 	add.w	r3, r7, #24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fa93 f2a3 	rbit	r2, r3
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <HAL_RCC_OscConfig+0xe0c>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	f107 0210 	add.w	r2, r7, #16
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	fa92 f1a2 	rbit	r1, r2
 8005c9c:	f107 020c 	add.w	r2, r7, #12
 8005ca0:	6011      	str	r1, [r2, #0]
  return result;
 8005ca2:	f107 020c 	add.w	r2, r7, #12
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	fab2 f282 	clz	r2, r2
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	f042 0220 	orr.w	r2, r2, #32
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	f002 021f 	and.w	r2, r2, #31
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d19e      	bne.n	8005c02 <HAL_RCC_OscConfig+0xcfe>
 8005cc4:	e01e      	b.n	8005d04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e018      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <HAL_RCC_OscConfig+0xe0c>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d108      	bne.n	8005d00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005cee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000

08005d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b09e      	sub	sp, #120	; 0x78
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e162      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d910      	bls.n	8005d5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f023 0207 	bic.w	r2, r3, #7
 8005d42:	498b      	ldr	r1, [pc, #556]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e14a      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b82      	ldr	r3, [pc, #520]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	497f      	ldr	r1, [pc, #508]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80dc 	beq.w	8005f40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d13c      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xf6>
 8005d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da0:	fab3 f383 	clz	r3, r3
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d102      	bne.n	8005dba <HAL_RCC_ClockConfig+0xa6>
 8005db4:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	e00f      	b.n	8005dda <HAL_RCC_ClockConfig+0xc6>
 8005dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd6:	4b67      	ldr	r3, [pc, #412]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dde:	65ba      	str	r2, [r7, #88]	; 0x58
 8005de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de2:	fa92 f2a2 	rbit	r2, r2
 8005de6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dea:	fab2 f282 	clz	r2, r2
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	f042 0220 	orr.w	r2, r2, #32
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	f002 021f 	and.w	r2, r2, #31
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d17b      	bne.n	8005efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0f3      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d13c      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x178>
 8005e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1a:	fa93 f3a3 	rbit	r3, r3
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e22:	fab3 f383 	clz	r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d102      	bne.n	8005e3c <HAL_RCC_ClockConfig+0x128>
 8005e36:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	e00f      	b.n	8005e5c <HAL_RCC_ClockConfig+0x148>
 8005e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e44:	fa93 f3a3 	rbit	r3, r3
 8005e48:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	fa93 f3a3 	rbit	r3, r3
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e58:	4b46      	ldr	r3, [pc, #280]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e60:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e64:	fa92 f2a2 	rbit	r2, r2
 8005e68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6c:	fab2 f282 	clz	r2, r2
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	f042 0220 	orr.w	r2, r2, #32
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f002 021f 	and.w	r2, r2, #31
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d13a      	bne.n	8005efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0b2      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d102      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x1a0>
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	e00d      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x1bc>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	fa93 f3a3 	rbit	r3, r3
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	fa93 f3a3 	rbit	r3, r3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	61ba      	str	r2, [r7, #24]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	fa92 f2a2 	rbit	r2, r2
 8005eda:	617a      	str	r2, [r7, #20]
  return result;
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	fab2 f282 	clz	r2, r2
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	f042 0220 	orr.w	r2, r2, #32
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	f002 021f 	and.w	r2, r2, #31
 8005eee:	2101      	movs	r1, #1
 8005ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e079      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005efe:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f023 0203 	bic.w	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	491a      	ldr	r1, [pc, #104]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f10:	f7fc ff5e 	bl	8002dd0 <HAL_GetTick>
 8005f14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f18:	f7fc ff5a 	bl	8002dd0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e061      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <HAL_RCC_ClockConfig+0x260>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f003 020c 	and.w	r2, r3, #12
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1eb      	bne.n	8005f18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d214      	bcs.n	8005f78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f023 0207 	bic.w	r2, r3, #7
 8005f56:	4906      	ldr	r1, [pc, #24]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_RCC_ClockConfig+0x25c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e040      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x2de>
 8005f70:	40022000 	.word	0x40022000
 8005f74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f84:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_ClockConfig+0x2e8>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	491a      	ldr	r1, [pc, #104]	; (8005ffc <HAL_RCC_ClockConfig+0x2e8>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <HAL_RCC_ClockConfig+0x2e8>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4912      	ldr	r1, [pc, #72]	; (8005ffc <HAL_RCC_ClockConfig+0x2e8>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005fb6:	f000 f829 	bl	800600c <HAL_RCC_GetSysClockFreq>
 8005fba:	4601      	mov	r1, r0
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <HAL_RCC_ClockConfig+0x2e8>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc4:	22f0      	movs	r2, #240	; 0xf0
 8005fc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	fa92 f2a2 	rbit	r2, r2
 8005fce:	60fa      	str	r2, [r7, #12]
  return result;
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	fab2 f282 	clz	r2, r2
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	40d3      	lsrs	r3, r2
 8005fda:	4a09      	ldr	r2, [pc, #36]	; (8006000 <HAL_RCC_ClockConfig+0x2ec>)
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	fa21 f303 	lsr.w	r3, r1, r3
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <HAL_RCC_ClockConfig+0x2f0>)
 8005fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <HAL_RCC_ClockConfig+0x2f4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc feac 	bl	8002d48 <HAL_InitTick>
  
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3778      	adds	r7, #120	; 0x78
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
 8006000:	080081dc 	.word	0x080081dc
 8006004:	20000000 	.word	0x20000000
 8006008:	20000004 	.word	0x20000004

0800600c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800600c:	b480      	push	{r7}
 800600e:	b08b      	sub	sp, #44	; 0x2c
 8006010:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006026:	4b29      	ldr	r3, [pc, #164]	; (80060cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b04      	cmp	r3, #4
 8006034:	d002      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x30>
 8006036:	2b08      	cmp	r3, #8
 8006038:	d003      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x36>
 800603a:	e03c      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800603c:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800603e:	623b      	str	r3, [r7, #32]
      break;
 8006040:	e03c      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006048:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800604c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	fa92 f2a2 	rbit	r2, r2
 8006054:	607a      	str	r2, [r7, #4]
  return result;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	fab2 f282 	clz	r2, r2
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	40d3      	lsrs	r3, r2
 8006060:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006062:	5cd3      	ldrb	r3, [r2, r3]
 8006064:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006066:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	220f      	movs	r2, #15
 8006070:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	fa92 f2a2 	rbit	r2, r2
 8006078:	60fa      	str	r2, [r7, #12]
  return result;
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	fab2 f282 	clz	r2, r2
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	40d3      	lsrs	r3, r2
 8006084:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006094:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	fbb2 f2f3 	udiv	r2, r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
 80060a4:	e004      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	623b      	str	r3, [r7, #32]
      break;
 80060b4:	e002      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060b8:	623b      	str	r3, [r7, #32]
      break;
 80060ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060bc:	6a3b      	ldr	r3, [r7, #32]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	372c      	adds	r7, #44	; 0x2c
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000
 80060d0:	00b71b00 	.word	0x00b71b00
 80060d4:	080081f4 	.word	0x080081f4
 80060d8:	08008204 	.word	0x08008204
 80060dc:	003d0900 	.word	0x003d0900
 80060e0:	007a1200 	.word	0x007a1200

080060e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000000 	.word	0x20000000

080060fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006102:	f7ff ffef 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 8006106:	4601      	mov	r1, r0
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006110:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006114:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	fa92 f2a2 	rbit	r2, r2
 800611c:	603a      	str	r2, [r7, #0]
  return result;
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	fab2 f282 	clz	r2, r2
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	40d3      	lsrs	r3, r2
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <HAL_RCC_GetPCLK1Freq+0x40>)
 800612a:	5cd3      	ldrb	r3, [r2, r3]
 800612c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000
 800613c:	080081ec 	.word	0x080081ec

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006146:	f7ff ffcd 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 800614a:	4601      	mov	r1, r0
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006154:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006158:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	fa92 f2a2 	rbit	r2, r2
 8006160:	603a      	str	r2, [r7, #0]
  return result;
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	fab2 f282 	clz	r2, r2
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	40d3      	lsrs	r3, r2
 800616c:	4a04      	ldr	r2, [pc, #16]	; (8006180 <HAL_RCC_GetPCLK2Freq+0x40>)
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40021000 	.word	0x40021000
 8006180:	080081ec 	.word	0x080081ec

08006184 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b092      	sub	sp, #72	; 0x48
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006194:	2300      	movs	r3, #0
 8006196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80cd 	beq.w	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061a8:	4b86      	ldr	r3, [pc, #536]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10e      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061b4:	4b83      	ldr	r3, [pc, #524]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	4a82      	ldr	r2, [pc, #520]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061be:	61d3      	str	r3, [r2, #28]
 80061c0:	4b80      	ldr	r3, [pc, #512]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d2:	4b7d      	ldr	r3, [pc, #500]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d118      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061de:	4b7a      	ldr	r3, [pc, #488]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a79      	ldr	r2, [pc, #484]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ea:	f7fc fdf1 	bl	8002dd0 <HAL_GetTick>
 80061ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f0:	e008      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f2:	f7fc fded 	bl	8002dd0 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b64      	cmp	r3, #100	; 0x64
 80061fe:	d901      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e0db      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006204:	4b70      	ldr	r3, [pc, #448]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006210:	4b6c      	ldr	r3, [pc, #432]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800621a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d07d      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800622a:	429a      	cmp	r2, r3
 800622c:	d076      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622e:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	fa93 f3a3 	rbit	r3, r3
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	461a      	mov	r2, r3
 8006258:	2301      	movs	r3, #1
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800626c:	fab3 f383 	clz	r3, r3
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	4b55      	ldr	r3, [pc, #340]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006280:	4a50      	ldr	r2, [pc, #320]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006284:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d045      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fc fd9e 	bl	8002dd0 <HAL_GetTick>
 8006294:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006296:	e00a      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006298:	f7fc fd9a 	bl	8002dd0 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e086      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80062ae:	2302      	movs	r3, #2
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	2302      	movs	r3, #2
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	61fb      	str	r3, [r7, #28]
  return result;
 80062c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c8:	fab3 f383 	clz	r3, r3
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f043 0302 	orr.w	r3, r3, #2
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d102      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	e007      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80062e2:	2302      	movs	r3, #2
 80062e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	fa93 f3a3 	rbit	r3, r3
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	4b35      	ldr	r3, [pc, #212]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2202      	movs	r2, #2
 80062f4:	613a      	str	r2, [r7, #16]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	fa92 f2a2 	rbit	r2, r2
 80062fc:	60fa      	str	r2, [r7, #12]
  return result;
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	fab2 f282 	clz	r2, r2
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	f002 021f 	and.w	r2, r2, #31
 8006310:	2101      	movs	r1, #1
 8006312:	fa01 f202 	lsl.w	r2, r1, r2
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0bd      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4926      	ldr	r1, [pc, #152]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800632a:	4313      	orrs	r3, r2
 800632c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800632e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006332:	2b01      	cmp	r3, #1
 8006334:	d105      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006336:	4b23      	ldr	r3, [pc, #140]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006340:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	491a      	ldr	r1, [pc, #104]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800635c:	4313      	orrs	r3, r2
 800635e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800636c:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	f023 0210 	bic.w	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4912      	ldr	r1, [pc, #72]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800637a:	4313      	orrs	r3, r2
 800637c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	490b      	ldr	r1, [pc, #44]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006398:	4313      	orrs	r3, r2
 800639a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	4903      	ldr	r1, [pc, #12]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3748      	adds	r7, #72	; 0x48
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40021000 	.word	0x40021000
 80063c8:	40007000 	.word	0x40007000
 80063cc:	10908100 	.word	0x10908100

080063d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e049      	b.n	8006476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc fb16 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 ff0e 	bl	8007230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d001      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e040      	b.n	800651a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_TIM_Base_Start_IT+0xa8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0x58>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d009      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0x58>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a18      	ldr	r2, [pc, #96]	; (800652c <HAL_TIM_Base_Start_IT+0xac>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0x58>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a17      	ldr	r2, [pc, #92]	; (8006530 <HAL_TIM_Base_Start_IT+0xb0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d115      	bne.n	8006504 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_TIM_Base_Start_IT+0xb4>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d015      	beq.n	8006516 <HAL_TIM_Base_Start_IT+0x96>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f0:	d011      	beq.n	8006516 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006502:	e008      	b.n	8006516 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e000      	b.n	8006518 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40000400 	.word	0x40000400
 8006530:	40014000 	.word	0x40014000
 8006534:	00010007 	.word	0x00010007

08006538 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f241 1311 	movw	r3, #4369	; 0x1111
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10f      	bne.n	8006580 <HAL_TIM_Base_Stop_IT+0x48>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f240 4344 	movw	r3, #1092	; 0x444
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d107      	bne.n	8006580 <HAL_TIM_Base_Stop_IT+0x48>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e049      	b.n	800663c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f841 	bl	8006644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 fe2b 	bl	8007230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <HAL_TIM_PWM_Start+0x24>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e03c      	b.n	80066f6 <HAL_TIM_PWM_Start+0x9e>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b04      	cmp	r3, #4
 8006680:	d109      	bne.n	8006696 <HAL_TIM_PWM_Start+0x3e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	e02f      	b.n	80066f6 <HAL_TIM_PWM_Start+0x9e>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d109      	bne.n	80066b0 <HAL_TIM_PWM_Start+0x58>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e022      	b.n	80066f6 <HAL_TIM_PWM_Start+0x9e>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d109      	bne.n	80066ca <HAL_TIM_PWM_Start+0x72>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	bf14      	ite	ne
 80066c2:	2301      	movne	r3, #1
 80066c4:	2300      	moveq	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	e015      	b.n	80066f6 <HAL_TIM_PWM_Start+0x9e>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d109      	bne.n	80066e4 <HAL_TIM_PWM_Start+0x8c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	e008      	b.n	80066f6 <HAL_TIM_PWM_Start+0x9e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	bf14      	ite	ne
 80066f0:	2301      	movne	r3, #1
 80066f2:	2300      	moveq	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e088      	b.n	8006810 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <HAL_TIM_PWM_Start+0xb6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800670c:	e023      	b.n	8006756 <HAL_TIM_PWM_Start+0xfe>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b04      	cmp	r3, #4
 8006712:	d104      	bne.n	800671e <HAL_TIM_PWM_Start+0xc6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800671c:	e01b      	b.n	8006756 <HAL_TIM_PWM_Start+0xfe>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0xd6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800672c:	e013      	b.n	8006756 <HAL_TIM_PWM_Start+0xfe>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0xe6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800673c:	e00b      	b.n	8006756 <HAL_TIM_PWM_Start+0xfe>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b10      	cmp	r3, #16
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xf6>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674c:	e003      	b.n	8006756 <HAL_TIM_PWM_Start+0xfe>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2201      	movs	r2, #1
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f91e 	bl	80079a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <HAL_TIM_PWM_Start+0x1c0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00e      	beq.n	800678c <HAL_TIM_PWM_Start+0x134>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <HAL_TIM_PWM_Start+0x1c4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d009      	beq.n	800678c <HAL_TIM_PWM_Start+0x134>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a28      	ldr	r2, [pc, #160]	; (8006820 <HAL_TIM_PWM_Start+0x1c8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIM_PWM_Start+0x134>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a27      	ldr	r2, [pc, #156]	; (8006824 <HAL_TIM_PWM_Start+0x1cc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d101      	bne.n	8006790 <HAL_TIM_PWM_Start+0x138>
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <HAL_TIM_PWM_Start+0x13a>
 8006790:	2300      	movs	r3, #0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_TIM_PWM_Start+0x1c0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_TIM_PWM_Start+0x176>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d009      	beq.n	80067ce <HAL_TIM_PWM_Start+0x176>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_TIM_PWM_Start+0x1d0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIM_PWM_Start+0x176>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <HAL_TIM_PWM_Start+0x1c4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d115      	bne.n	80067fa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <HAL_TIM_PWM_Start+0x1d4>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d015      	beq.n	800680c <HAL_TIM_PWM_Start+0x1b4>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e6:	d011      	beq.n	800680c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f8:	e008      	b.n	800680c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0201 	orr.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e000      	b.n	800680e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	40000400 	.word	0x40000400
 800682c:	00010007 	.word	0x00010007

08006830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e097      	b.n	8006974 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fc f91f 	bl	8002a9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006874:	f023 0307 	bic.w	r3, r3, #7
 8006878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f000 fcd3 	bl	8007230 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	4313      	orrs	r3, r2
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068d0:	f023 030c 	bic.w	r3, r3, #12
 80068d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	4313      	orrs	r3, r2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	011a      	lsls	r2, r3, #4
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	031b      	lsls	r3, r3, #12
 8006900:	4313      	orrs	r3, r2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	4313      	orrs	r3, r2
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006994:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d110      	bne.n	80069ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d102      	bne.n	80069b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069b2:	7b7b      	ldrb	r3, [r7, #13]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d001      	beq.n	80069bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e069      	b.n	8006a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069cc:	e031      	b.n	8006a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d110      	bne.n	80069f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069da:	7b3b      	ldrb	r3, [r7, #12]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d001      	beq.n	80069e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e055      	b.n	8006a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f4:	e01d      	b.n	8006a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d108      	bne.n	8006a0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a02:	7b7b      	ldrb	r3, [r7, #13]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d102      	bne.n	8006a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a08:	7b3b      	ldrb	r3, [r7, #12]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d001      	beq.n	8006a12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e03e      	b.n	8006a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_TIM_Encoder_Start+0xc4>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d008      	beq.n	8006a50 <HAL_TIM_Encoder_Start+0xd4>
 8006a3e:	e00f      	b.n	8006a60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 ffa9 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006a4e:	e016      	b.n	8006a7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	2104      	movs	r1, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ffa1 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006a5e:	e00e      	b.n	8006a7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 ff99 	bl	80079a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2201      	movs	r2, #1
 8006a74:	2104      	movs	r1, #4
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ff92 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006a7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_TIM_Encoder_Stop+0x18>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d008      	beq.n	8006ac0 <HAL_TIM_Encoder_Stop+0x28>
 8006aae:	e00f      	b.n	8006ad0 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 ff71 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006abe:	e016      	b.n	8006aee <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2104      	movs	r1, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ff69 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006ace:	e00e      	b.n	8006aee <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ff61 	bl	80079a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2104      	movs	r1, #4
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff5a 	bl	80079a0 <TIM_CCxChannelCmd>
      break;
 8006aec:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <HAL_TIM_Encoder_Stop+0x86>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f240 4344 	movw	r3, #1092	; 0x444
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_Encoder_Stop+0x86>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_TIM_Encoder_Stop+0x92>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d148      	bne.n	8006bbc <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_Encoder_Stop+0xa2>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b38:	e023      	b.n	8006b82 <HAL_TIM_Encoder_Stop+0xea>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_Encoder_Stop+0xb2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b48:	e01b      	b.n	8006b82 <HAL_TIM_Encoder_Stop+0xea>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_Encoder_Stop+0xc2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b58:	e013      	b.n	8006b82 <HAL_TIM_Encoder_Stop+0xea>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_Encoder_Stop+0xd2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b68:	e00b      	b.n	8006b82 <HAL_TIM_Encoder_Stop+0xea>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_Encoder_Stop+0xe2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b78:	e003      	b.n	8006b82 <HAL_TIM_Encoder_Stop+0xea>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_Encoder_Stop+0xfa>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b90:	e024      	b.n	8006bdc <HAL_TIM_Encoder_Stop+0x144>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_Encoder_Stop+0x10a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba0:	e01c      	b.n	8006bdc <HAL_TIM_Encoder_Stop+0x144>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_Encoder_Stop+0x11a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb0:	e014      	b.n	8006bdc <HAL_TIM_Encoder_Stop+0x144>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006bba:	e00f      	b.n	8006bdc <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d122      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d11b      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0202 	mvn.w	r2, #2
 8006c12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fae2 	bl	80071f2 <HAL_TIM_IC_CaptureCallback>
 8006c2e:	e005      	b.n	8006c3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fad4 	bl	80071de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fae5 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d122      	bne.n	8006c96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d11b      	bne.n	8006c96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f06f 0204 	mvn.w	r2, #4
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fab8 	bl	80071f2 <HAL_TIM_IC_CaptureCallback>
 8006c82:	e005      	b.n	8006c90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 faaa 	bl	80071de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fabb 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d122      	bne.n	8006cea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d11b      	bne.n	8006cea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f06f 0208 	mvn.w	r2, #8
 8006cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa8e 	bl	80071f2 <HAL_TIM_IC_CaptureCallback>
 8006cd6:	e005      	b.n	8006ce4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fa80 	bl	80071de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa91 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d122      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b10      	cmp	r3, #16
 8006d04:	d11b      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f06f 0210 	mvn.w	r2, #16
 8006d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2208      	movs	r2, #8
 8006d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa64 	bl	80071f2 <HAL_TIM_IC_CaptureCallback>
 8006d2a:	e005      	b.n	8006d38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fa56 	bl	80071de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa67 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d10e      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f06f 0201 	mvn.w	r2, #1
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fa ff87 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fea3 	bl	8007adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fe96 	bl	8007af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa15 	bl	800721a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d10e      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d107      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0220 	mvn.w	r2, #32
 8006e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fe56 	bl	8007ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e0ff      	b.n	8007042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b14      	cmp	r3, #20
 8006e4e:	f200 80f0 	bhi.w	8007032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08007033 	.word	0x08007033
 8006e60:	08007033 	.word	0x08007033
 8006e64:	08007033 	.word	0x08007033
 8006e68:	08006eed 	.word	0x08006eed
 8006e6c:	08007033 	.word	0x08007033
 8006e70:	08007033 	.word	0x08007033
 8006e74:	08007033 	.word	0x08007033
 8006e78:	08006f2f 	.word	0x08006f2f
 8006e7c:	08007033 	.word	0x08007033
 8006e80:	08007033 	.word	0x08007033
 8006e84:	08007033 	.word	0x08007033
 8006e88:	08006f6f 	.word	0x08006f6f
 8006e8c:	08007033 	.word	0x08007033
 8006e90:	08007033 	.word	0x08007033
 8006e94:	08007033 	.word	0x08007033
 8006e98:	08006fb1 	.word	0x08006fb1
 8006e9c:	08007033 	.word	0x08007033
 8006ea0:	08007033 	.word	0x08007033
 8006ea4:	08007033 	.word	0x08007033
 8006ea8:	08006ff1 	.word	0x08006ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fa34 	bl	8007320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0204 	bic.w	r2, r2, #4
 8006ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	619a      	str	r2, [r3, #24]
      break;
 8006eea:	e0a5      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fa9a 	bl	800742c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	021a      	lsls	r2, r3, #8
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	619a      	str	r2, [r3, #24]
      break;
 8006f2c:	e084      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 faf9 	bl	800752c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0208 	orr.w	r2, r2, #8
 8006f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0204 	bic.w	r2, r2, #4
 8006f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e064      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fb57 	bl	8007628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	61da      	str	r2, [r3, #28]
      break;
 8006fae:	e043      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb9a 	bl	80076f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fee:	e023      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fbd8 	bl	80077ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007030:	e002      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
      break;
 8007036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_TIM_ConfigClockSource+0x1c>
 8007064:	2302      	movs	r3, #2
 8007066:	e0b6      	b.n	80071d6 <HAL_TIM_ConfigClockSource+0x18a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800708a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a4:	d03e      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0xd8>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	f200 8087 	bhi.w	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	f000 8086 	beq.w	80071c2 <HAL_TIM_ConfigClockSource+0x176>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d87f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070bc:	2b70      	cmp	r3, #112	; 0x70
 80070be:	d01a      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0xaa>
 80070c0:	2b70      	cmp	r3, #112	; 0x70
 80070c2:	d87b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070c4:	2b60      	cmp	r3, #96	; 0x60
 80070c6:	d050      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x11e>
 80070c8:	2b60      	cmp	r3, #96	; 0x60
 80070ca:	d877      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070cc:	2b50      	cmp	r3, #80	; 0x50
 80070ce:	d03c      	beq.n	800714a <HAL_TIM_ConfigClockSource+0xfe>
 80070d0:	2b50      	cmp	r3, #80	; 0x50
 80070d2:	d873      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d058      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x13e>
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d86f      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070dc:	2b30      	cmp	r3, #48	; 0x30
 80070de:	d064      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x15e>
 80070e0:	2b30      	cmp	r3, #48	; 0x30
 80070e2:	d86b      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d060      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x15e>
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d867      	bhi.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d05c      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x15e>
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d05a      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x15e>
 80070f4:	e062      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6899      	ldr	r1, [r3, #8]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f000 fc2b 	bl	8007960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	609a      	str	r2, [r3, #8]
      break;
 8007122:	e04f      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6899      	ldr	r1, [r3, #8]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f000 fc14 	bl	8007960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007146:	609a      	str	r2, [r3, #8]
      break;
 8007148:	e03c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	461a      	mov	r2, r3
 8007158:	f000 fb88 	bl	800786c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2150      	movs	r1, #80	; 0x50
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fbe1 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 8007168:	e02c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	461a      	mov	r2, r3
 8007178:	f000 fba7 	bl	80078ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2160      	movs	r1, #96	; 0x60
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fbd1 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 8007188:	e01c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	461a      	mov	r2, r3
 8007198:	f000 fb68 	bl	800786c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2140      	movs	r1, #64	; 0x40
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fbc1 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 80071a8:	e00c      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f000 fbb8 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 80071ba:	e003      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      break;
 80071c0:	e000      	b.n	80071c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a32      	ldr	r2, [pc, #200]	; (800730c <TIM_Base_SetConfig+0xdc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_Base_SetConfig+0x28>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724e:	d003      	beq.n	8007258 <TIM_Base_SetConfig+0x28>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <TIM_Base_SetConfig+0xe0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d108      	bne.n	800726a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a27      	ldr	r2, [pc, #156]	; (800730c <TIM_Base_SetConfig+0xdc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <TIM_Base_SetConfig+0x6a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d00f      	beq.n	800729a <TIM_Base_SetConfig+0x6a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a24      	ldr	r2, [pc, #144]	; (8007310 <TIM_Base_SetConfig+0xe0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_Base_SetConfig+0x6a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a23      	ldr	r2, [pc, #140]	; (8007314 <TIM_Base_SetConfig+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_Base_SetConfig+0x6a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <TIM_Base_SetConfig+0xe8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_Base_SetConfig+0x6a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <TIM_Base_SetConfig+0xec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d108      	bne.n	80072ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <TIM_Base_SetConfig+0xdc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <TIM_Base_SetConfig+0xc0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a0e      	ldr	r2, [pc, #56]	; (8007314 <TIM_Base_SetConfig+0xe4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d007      	beq.n	80072f0 <TIM_Base_SetConfig+0xc0>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a0d      	ldr	r2, [pc, #52]	; (8007318 <TIM_Base_SetConfig+0xe8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_Base_SetConfig+0xc0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0c      	ldr	r2, [pc, #48]	; (800731c <TIM_Base_SetConfig+0xec>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d103      	bne.n	80072f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	615a      	str	r2, [r3, #20]
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40012c00 	.word	0x40012c00
 8007310:	40000400 	.word	0x40000400
 8007314:	40014000 	.word	0x40014000
 8007318:	40014400 	.word	0x40014400
 800731c:	40014800 	.word	0x40014800

08007320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f023 0201 	bic.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 0302 	bic.w	r3, r3, #2
 800736c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a28      	ldr	r2, [pc, #160]	; (800741c <TIM_OC1_SetConfig+0xfc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00b      	beq.n	8007398 <TIM_OC1_SetConfig+0x78>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a27      	ldr	r2, [pc, #156]	; (8007420 <TIM_OC1_SetConfig+0x100>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d007      	beq.n	8007398 <TIM_OC1_SetConfig+0x78>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <TIM_OC1_SetConfig+0x104>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_OC1_SetConfig+0x78>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a25      	ldr	r2, [pc, #148]	; (8007428 <TIM_OC1_SetConfig+0x108>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d10c      	bne.n	80073b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f023 0308 	bic.w	r3, r3, #8
 800739e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 0304 	bic.w	r3, r3, #4
 80073b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a19      	ldr	r2, [pc, #100]	; (800741c <TIM_OC1_SetConfig+0xfc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <TIM_OC1_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a18      	ldr	r2, [pc, #96]	; (8007420 <TIM_OC1_SetConfig+0x100>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d007      	beq.n	80073d2 <TIM_OC1_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <TIM_OC1_SetConfig+0x104>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d003      	beq.n	80073d2 <TIM_OC1_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <TIM_OC1_SetConfig+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d111      	bne.n	80073f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	621a      	str	r2, [r3, #32]
}
 8007410:	bf00      	nop
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40012c00 	.word	0x40012c00
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800

0800742c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f023 0210 	bic.w	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f023 0320 	bic.w	r3, r3, #32
 800747a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a24      	ldr	r2, [pc, #144]	; (800751c <TIM_OC2_SetConfig+0xf0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10d      	bne.n	80074ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a1b      	ldr	r2, [pc, #108]	; (800751c <TIM_OC2_SetConfig+0xf0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_OC2_SetConfig+0xa0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1a      	ldr	r2, [pc, #104]	; (8007520 <TIM_OC2_SetConfig+0xf4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_OC2_SetConfig+0xa0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a19      	ldr	r2, [pc, #100]	; (8007524 <TIM_OC2_SetConfig+0xf8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC2_SetConfig+0xa0>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <TIM_OC2_SetConfig+0xfc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d113      	bne.n	80074f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40014000 	.word	0x40014000
 8007524:	40014400 	.word	0x40014400
 8007528:	40014800 	.word	0x40014800

0800752c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a23      	ldr	r2, [pc, #140]	; (8007618 <TIM_OC3_SetConfig+0xec>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10d      	bne.n	80075aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <TIM_OC3_SetConfig+0xec>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00b      	beq.n	80075ca <TIM_OC3_SetConfig+0x9e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a19      	ldr	r2, [pc, #100]	; (800761c <TIM_OC3_SetConfig+0xf0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <TIM_OC3_SetConfig+0x9e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a18      	ldr	r2, [pc, #96]	; (8007620 <TIM_OC3_SetConfig+0xf4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_OC3_SetConfig+0x9e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <TIM_OC3_SetConfig+0xf8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d113      	bne.n	80075f2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	621a      	str	r2, [r3, #32]
}
 800760c:	bf00      	nop
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400
 8007624:	40014800 	.word	0x40014800

08007628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	031b      	lsls	r3, r3, #12
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <TIM_OC4_SetConfig+0xb8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00b      	beq.n	80076a4 <TIM_OC4_SetConfig+0x7c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <TIM_OC4_SetConfig+0xbc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d007      	beq.n	80076a4 <TIM_OC4_SetConfig+0x7c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <TIM_OC4_SetConfig+0xc0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC4_SetConfig+0x7c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a13      	ldr	r2, [pc, #76]	; (80076ec <TIM_OC4_SetConfig+0xc4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d109      	bne.n	80076b8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800

080076f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <TIM_OC5_SetConfig+0xac>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00b      	beq.n	8007762 <TIM_OC5_SetConfig+0x72>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <TIM_OC5_SetConfig+0xb0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d007      	beq.n	8007762 <TIM_OC5_SetConfig+0x72>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <TIM_OC5_SetConfig+0xb4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_OC5_SetConfig+0x72>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <TIM_OC5_SetConfig+0xb8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d109      	bne.n	8007776 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	40012c00 	.word	0x40012c00
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40014400 	.word	0x40014400
 80077a8:	40014800 	.word	0x40014800

080077ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	051b      	lsls	r3, r3, #20
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <TIM_OC6_SetConfig+0xb0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_OC6_SetConfig+0x74>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a15      	ldr	r2, [pc, #84]	; (8007860 <TIM_OC6_SetConfig+0xb4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_OC6_SetConfig+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a14      	ldr	r2, [pc, #80]	; (8007864 <TIM_OC6_SetConfig+0xb8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC6_SetConfig+0x74>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a13      	ldr	r2, [pc, #76]	; (8007868 <TIM_OC6_SetConfig+0xbc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d109      	bne.n	8007834 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800

0800786c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f023 030a 	bic.w	r3, r3, #10
 80078a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b087      	sub	sp, #28
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f023 0210 	bic.w	r2, r3, #16
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	031b      	lsls	r3, r3, #12
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	f043 0307 	orr.w	r3, r3, #7
 800794c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	609a      	str	r2, [r3, #8]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800797a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	021a      	lsls	r2, r3, #8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	431a      	orrs	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4313      	orrs	r3, r2
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	609a      	str	r2, [r3, #8]
}
 8007994:	bf00      	nop
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	2201      	movs	r2, #1
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	fa01 f303 	lsl.w	r3, r1, r3
 80079d8:	431a      	orrs	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e054      	b.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a24      	ldr	r2, [pc, #144]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00e      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d009      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10c      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40014000 	.word	0x40014000

08007ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e040      	b.n	8007b98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fb f830 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2224      	movs	r2, #36	; 0x24
 8007b30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0201 	bic.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f82c 	bl	8007ba0 <UART_SetConfig>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e022      	b.n	8007b98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f956 	bl	8007e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9dd 	bl	8007f50 <UART_CheckIdleState>
 8007b96:	4603      	mov	r3, r0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b8a      	ldr	r3, [pc, #552]	; (8007df4 <UART_SetConfig+0x254>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a78      	ldr	r2, [pc, #480]	; (8007df8 <UART_SetConfig+0x258>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d120      	bne.n	8007c5e <UART_SetConfig+0xbe>
 8007c1c:	4b77      	ldr	r3, [pc, #476]	; (8007dfc <UART_SetConfig+0x25c>)
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d817      	bhi.n	8007c58 <UART_SetConfig+0xb8>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x90>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c53 	.word	0x08007c53
 8007c3c:	08007c47 	.word	0x08007c47
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e01d      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e01a      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e017      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e014      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e011      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a67      	ldr	r2, [pc, #412]	; (8007e00 <UART_SetConfig+0x260>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d102      	bne.n	8007c6e <UART_SetConfig+0xce>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e009      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a64      	ldr	r2, [pc, #400]	; (8007e04 <UART_SetConfig+0x264>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d102      	bne.n	8007c7e <UART_SetConfig+0xde>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e001      	b.n	8007c82 <UART_SetConfig+0xe2>
 8007c7e:	2310      	movs	r3, #16
 8007c80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8a:	d15b      	bne.n	8007d44 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d827      	bhi.n	8007ce2 <UART_SetConfig+0x142>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0xf8>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	08007ce3 	.word	0x08007ce3
 8007ca8:	08007cd3 	.word	0x08007cd3
 8007cac:	08007ce3 	.word	0x08007ce3
 8007cb0:	08007ce3 	.word	0x08007ce3
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007cdb 	.word	0x08007cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cbc:	f7fe fa1e 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8007cc0:	61b8      	str	r0, [r7, #24]
        break;
 8007cc2:	e013      	b.n	8007cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc4:	f7fe fa3c 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8007cc8:	61b8      	str	r0, [r7, #24]
        break;
 8007cca:	e00f      	b.n	8007cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ccc:	4b4e      	ldr	r3, [pc, #312]	; (8007e08 <UART_SetConfig+0x268>)
 8007cce:	61bb      	str	r3, [r7, #24]
        break;
 8007cd0:	e00c      	b.n	8007cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fe f99b 	bl	800600c <HAL_RCC_GetSysClockFreq>
 8007cd6:	61b8      	str	r0, [r7, #24]
        break;
 8007cd8:	e008      	b.n	8007cec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cde:	61bb      	str	r3, [r7, #24]
        break;
 8007ce0:	e004      	b.n	8007cec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d074      	beq.n	8007ddc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	005a      	lsls	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	441a      	add	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d916      	bls.n	8007d3e <UART_SetConfig+0x19e>
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d16:	d212      	bcs.n	8007d3e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f023 030f 	bic.w	r3, r3, #15
 8007d20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	89fb      	ldrh	r3, [r7, #14]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	89fa      	ldrh	r2, [r7, #14]
 8007d3a:	60da      	str	r2, [r3, #12]
 8007d3c:	e04e      	b.n	8007ddc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	77bb      	strb	r3, [r7, #30]
 8007d42:	e04b      	b.n	8007ddc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d44:	7ffb      	ldrb	r3, [r7, #31]
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d827      	bhi.n	8007d9a <UART_SetConfig+0x1fa>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x1b0>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	08007d7d 	.word	0x08007d7d
 8007d58:	08007d85 	.word	0x08007d85
 8007d5c:	08007d9b 	.word	0x08007d9b
 8007d60:	08007d8b 	.word	0x08007d8b
 8007d64:	08007d9b 	.word	0x08007d9b
 8007d68:	08007d9b 	.word	0x08007d9b
 8007d6c:	08007d9b 	.word	0x08007d9b
 8007d70:	08007d93 	.word	0x08007d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d74:	f7fe f9c2 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8007d78:	61b8      	str	r0, [r7, #24]
        break;
 8007d7a:	e013      	b.n	8007da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d7c:	f7fe f9e0 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8007d80:	61b8      	str	r0, [r7, #24]
        break;
 8007d82:	e00f      	b.n	8007da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d84:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <UART_SetConfig+0x268>)
 8007d86:	61bb      	str	r3, [r7, #24]
        break;
 8007d88:	e00c      	b.n	8007da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d8a:	f7fe f93f 	bl	800600c <HAL_RCC_GetSysClockFreq>
 8007d8e:	61b8      	str	r0, [r7, #24]
        break;
 8007d90:	e008      	b.n	8007da4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d96:	61bb      	str	r3, [r7, #24]
        break;
 8007d98:	e004      	b.n	8007da4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	77bb      	strb	r3, [r7, #30]
        break;
 8007da2:	bf00      	nop
    }

    if (pclk != 0U)
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	085a      	lsrs	r2, r3, #1
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	441a      	add	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b0f      	cmp	r3, #15
 8007dc4:	d908      	bls.n	8007dd8 <UART_SetConfig+0x238>
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dcc:	d204      	bcs.n	8007dd8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	e001      	b.n	8007ddc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007de8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	efff69f3 	.word	0xefff69f3
 8007df8:	40013800 	.word	0x40013800
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40004400 	.word	0x40004400
 8007e04:	40004800 	.word	0x40004800
 8007e08:	007a1200 	.word	0x007a1200

08007e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01a      	beq.n	8007f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f0a:	d10a      	bne.n	8007f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f60:	f7fa ff36 	bl	8002dd0 <HAL_GetTick>
 8007f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d10e      	bne.n	8007f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f82d 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e023      	b.n	8007fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d10e      	bne.n	8007fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f817 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e00d      	b.n	8007fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b09c      	sub	sp, #112	; 0x70
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	e0a5      	b.n	8008140 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	f000 80a1 	beq.w	8008140 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffe:	f7fa fee7 	bl	8002dd0 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800800a:	429a      	cmp	r2, r3
 800800c:	d302      	bcc.n	8008014 <UART_WaitOnFlagUntilTimeout+0x32>
 800800e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008010:	2b00      	cmp	r3, #0
 8008012:	d13e      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008028:	667b      	str	r3, [r7, #100]	; 0x64
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	663b      	str	r3, [r7, #96]	; 0x60
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008066:	64ba      	str	r2, [r7, #72]	; 0x48
 8008068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800806c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e067      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d04f      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ae:	d147      	bne.n	8008140 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
 80080da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e6      	bne.n	80080ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	613b      	str	r3, [r7, #16]
   return(result);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	66bb      	str	r3, [r7, #104]	; 0x68
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800810c:	623a      	str	r2, [r7, #32]
 800810e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	61bb      	str	r3, [r7, #24]
   return(result);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2220      	movs	r2, #32
 8008124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e010      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	4013      	ands	r3, r2
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	bf0c      	ite	eq
 8008150:	2301      	moveq	r3, #1
 8008152:	2300      	movne	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	429a      	cmp	r2, r3
 800815c:	f43f af4a 	beq.w	8007ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3770      	adds	r7, #112	; 0x70
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	; (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	; (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	; (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	; (80081b0 <__libc_init_array+0x44>)
 8008180:	f000 f820 	bl	80081c4 <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	08008214 	.word	0x08008214
 80081a8:	08008214 	.word	0x08008214
 80081ac:	08008214 	.word	0x08008214
 80081b0:	08008218 	.word	0x08008218

080081b4 <memset>:
 80081b4:	4402      	add	r2, r0
 80081b6:	4603      	mov	r3, r0
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d100      	bne.n	80081be <memset+0xa>
 80081bc:	4770      	bx	lr
 80081be:	f803 1b01 	strb.w	r1, [r3], #1
 80081c2:	e7f9      	b.n	80081b8 <memset+0x4>

080081c4 <_init>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr

080081d0 <_fini>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr
