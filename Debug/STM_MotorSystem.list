
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000576c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800592c  0800592c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800592c  0800592c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000250  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017edb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1e  00000000  00000000  00037f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  0003bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb51  00000000  00000000  0003c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b1d  00000000  00000000  0005b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af679  00000000  00000000  0006efce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e647  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004194  00000000  00000000  0011e69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058dc 	.word	0x080058dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080058dc 	.word	0x080058dc

080001c8 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>:
 */

#include <ADC.hpp>


ADC::ADC(ADC_HandleTypeDef *_hadc,float ADC_supply_voltage):
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	ed87 0a01 	vstr	s0, [r7, #4]
ofset_current(0),
current(0),
ADC_supply_voltage(ADC_supply_voltage),
_hadc(_hadc)
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	2200      	movs	r2, #0
 80001da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2200      	movs	r2, #0
 80001e2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
{
	_hadc->Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
	switch(_hadc->Init.Resolution){
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	2b18      	cmp	r3, #24
 8000202:	d849      	bhi.n	8000298 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xd0>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x44>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	08000271 	.word	0x08000271
 8000210:	08000299 	.word	0x08000299
 8000214:	08000299 	.word	0x08000299
 8000218:	08000299 	.word	0x08000299
 800021c:	08000299 	.word	0x08000299
 8000220:	08000299 	.word	0x08000299
 8000224:	08000299 	.word	0x08000299
 8000228:	08000299 	.word	0x08000299
 800022c:	0800027b 	.word	0x0800027b
 8000230:	08000299 	.word	0x08000299
 8000234:	08000299 	.word	0x08000299
 8000238:	08000299 	.word	0x08000299
 800023c:	08000299 	.word	0x08000299
 8000240:	08000299 	.word	0x08000299
 8000244:	08000299 	.word	0x08000299
 8000248:	08000299 	.word	0x08000299
 800024c:	08000285 	.word	0x08000285
 8000250:	08000299 	.word	0x08000299
 8000254:	08000299 	.word	0x08000299
 8000258:	08000299 	.word	0x08000299
 800025c:	08000299 	.word	0x08000299
 8000260:	08000299 	.word	0x08000299
 8000264:	08000299 	.word	0x08000299
 8000268:	08000299 	.word	0x08000299
 800026c:	0800028f 	.word	0x0800028f
	case ADC_RESOLUTION_12B:
		ADC_resolution = 2^12;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	220e      	movs	r2, #14
 8000274:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000278:	e00e      	b.n	8000298 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xd0>

	case ADC_RESOLUTION_10B:
		ADC_resolution = 2^10;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2208      	movs	r2, #8
 800027e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000282:	e009      	b.n	8000298 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xd0>

	case ADC_RESOLUTION_8B:
		ADC_resolution = 2^8;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	220a      	movs	r2, #10
 8000288:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 800028c:	e004      	b.n	8000298 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xd0>

	case ADC_RESOLUTION_6B:
		ADC_resolution = 2^6;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2204      	movs	r2, #4
 8000292:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000296:	bf00      	nop
	}

	__IO uint32_t * _isr_buf =  &_hadc->Instance->ISR;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	617b      	str	r3, [r7, #20]
	_isr = (use_register *)_isr_buf;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	calibration_current [100] = {0};
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	2200      	movs	r2, #0
 80002aa:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	return;
}
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	4618      	mov	r0, r3
 80002b2:	371c      	adds	r7, #28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <_ZN3ADC15ADC_calibrationEv>:

void ADC::ADC_calibration(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(_hadc);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f9d8 	bl	8001680 <HAL_ADC_Start>
	_isr->bit2 = 1; //EOCbitクリア
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80002d6:	7813      	ldrb	r3, [r2, #0]
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < 100 ; i++){
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b63      	cmp	r3, #99	; 0x63
 80002e6:	dc17      	bgt.n	8000318 <_ZN3ADC15ADC_calibrationEv+0x5c>
		while(!_isr->bit2); //EOCbitが再セットされるのをまつ
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d100      	bne.n	80002fc <_ZN3ADC15ADC_calibrationEv+0x40>
 80002fa:	e7f5      	b.n	80002e8 <_ZN3ADC15ADC_calibrationEv+0x2c>
		calibration_current[i] = _hadc->Instance->DR;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000306:	b299      	uxth	r1, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < 100 ; i++){
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3301      	adds	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e7e4      	b.n	80002e2 <_ZN3ADC15ADC_calibrationEv+0x26>
	}
	for(int j = 0; j < 100; j++){
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	2b63      	cmp	r3, #99	; 0x63
 8000320:	dc0e      	bgt.n	8000340 <_ZN3ADC15ADC_calibrationEv+0x84>
		ofset_current += calibration_current[j];
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	68b9      	ldr	r1, [r7, #8]
 800032c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000330:	441a      	add	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for(int j = 0; j < 100; j++){
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3301      	adds	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	e7ed      	b.n	800031c <_ZN3ADC15ADC_calibrationEv+0x60>
	}
	ofset_current /= 100;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <_ZN3ADC15ADC_calibrationEv+0xac>)
 8000348:	fba2 2303 	umull	r2, r3, r2, r3
 800034c:	095a      	lsrs	r2, r3, #5
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	HAL_ADC_Stop(_hadc);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fa46 	bl	80017ec <HAL_ADC_Stop>
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	51eb851f 	.word	0x51eb851f

0800036c <_ZN3PID9PID_set_pEf>:
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
{
	return;
}

inline void PID::PID_set_p(float p){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <_ZN15STM_MotorSystem12set_velocityEf>:
			TIM_HandleTypeDef *_encoder_timer,
			TIM_HandleTypeDef *_pwm_timer,
			uint32_t TIM_CHANNEL_n
			); //コンストラクタ

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_tar = velocity_tar;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	605a      	str	r2, [r3, #4]

	}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void USER_CAN::set_ide_CAN(uint32_t ide){
	_TxHeader->IDE = ide;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08e      	sub	sp, #56	; 0x38
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;
	uint32_t cmd;
	STM_MotorSystem *ms = STM_MotorSystem::_ms;
 80003b0:	4b81      	ldr	r3, [pc, #516]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	f107 0214 	add.w	r2, r7, #20
 80003be:	2100      	movs	r1, #0
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f001 ff86 	bl	80022d2 <HAL_CAN_GetRxMessage>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	bf0c      	ite	eq
 80003cc:	2301      	moveq	r3, #1
 80003ce:	2300      	movne	r3, #0
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f000 80eb 	beq.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
		cmd = RxHeader.StdId & 0xfff0;
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80003de:	4013      	ands	r3, r2
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
		switch(cmd){
 80003e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e4:	f24f 1240 	movw	r2, #61760	; 0xf140
 80003e8:	4293      	cmp	r3, r2
 80003ea:	f000 80c3 	beq.w	8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>
 80003ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f0:	f24f 1240 	movw	r2, #61760	; 0xf140
 80003f4:	4293      	cmp	r3, r2
 80003f6:	f200 80da 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80003fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003fc:	f24f 1230 	movw	r2, #61744	; 0xf130
 8000400:	4293      	cmp	r3, r2
 8000402:	f000 80b9 	beq.w	8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>
 8000406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000408:	f24f 1230 	movw	r2, #61744	; 0xf130
 800040c:	4293      	cmp	r3, r2
 800040e:	f200 80ce 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000414:	f24f 1220 	movw	r2, #61728	; 0xf120
 8000418:	4293      	cmp	r3, r2
 800041a:	f000 80af 	beq.w	800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000420:	f24f 1220 	movw	r2, #61728	; 0xf120
 8000424:	4293      	cmp	r3, r2
 8000426:	f200 80c2 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800042c:	f24f 1210 	movw	r2, #61712	; 0xf110
 8000430:	4293      	cmp	r3, r2
 8000432:	f000 80a5 	beq.w	8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
 8000436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000438:	f24f 1210 	movw	r2, #61712	; 0xf110
 800043c:	4293      	cmp	r3, r2
 800043e:	f200 80b6 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000444:	f24f 0240 	movw	r2, #61504	; 0xf040
 8000448:	4293      	cmp	r3, r2
 800044a:	f000 809b 	beq.w	8000584 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
 800044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000450:	f24f 0240 	movw	r2, #61504	; 0xf040
 8000454:	4293      	cmp	r3, r2
 8000456:	f200 80aa 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045c:	f24f 0230 	movw	r2, #61488	; 0xf030
 8000460:	4293      	cmp	r3, r2
 8000462:	f000 8091 	beq.w	8000588 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 8000466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000468:	f24f 0230 	movw	r2, #61488	; 0xf030
 800046c:	4293      	cmp	r3, r2
 800046e:	f200 809e 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000474:	f24f 0220 	movw	r2, #61472	; 0xf020
 8000478:	4293      	cmp	r3, r2
 800047a:	d071      	beq.n	8000560 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 800047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800047e:	f24f 0220 	movw	r2, #61472	; 0xf020
 8000482:	4293      	cmp	r3, r2
 8000484:	f200 8093 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048a:	f24f 0210 	movw	r2, #61456	; 0xf010
 800048e:	4293      	cmp	r3, r2
 8000490:	d05e      	beq.n	8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	f24f 0210 	movw	r2, #61456	; 0xf010
 8000498:	4293      	cmp	r3, r2
 800049a:	f200 8088 	bhi.w	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004a0:	f24e 2210 	movw	r2, #57872	; 0xe210
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d071      	beq.n	800058c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 80004a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004aa:	f24e 2210 	movw	r2, #57872	; 0xe210
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d87d      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b4:	f24e 1230 	movw	r2, #57648	; 0xe130
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d069      	beq.n	8000590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
 80004bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004be:	f24e 1230 	movw	r2, #57648	; 0xe130
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d873      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c8:	f24e 1220 	movw	r2, #57632	; 0xe120
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d061      	beq.n	8000594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 80004d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d2:	f24e 1220 	movw	r2, #57632	; 0xe120
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d869      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004dc:	f24e 1210 	movw	r2, #57616	; 0xe110
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d059      	beq.n	8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
 80004e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e6:	f24e 1210 	movw	r2, #57616	; 0xe110
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d85f      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f0:	f24e 0240 	movw	r2, #57408	; 0xe040
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d051      	beq.n	800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	f24e 0240 	movw	r2, #57408	; 0xe040
 80004fe:	4293      	cmp	r3, r2
 8000500:	d855      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000504:	f24e 0230 	movw	r2, #57392	; 0xe030
 8000508:	4293      	cmp	r3, r2
 800050a:	d049      	beq.n	80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
 800050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800050e:	f24e 0230 	movw	r2, #57392	; 0xe030
 8000512:	4293      	cmp	r3, r2
 8000514:	d84b      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	f24e 0220 	movw	r2, #57376	; 0xe020
 800051c:	4293      	cmp	r3, r2
 800051e:	d041      	beq.n	80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 8000520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000522:	f24e 0220 	movw	r2, #57376	; 0xe020
 8000526:	4293      	cmp	r3, r2
 8000528:	d841      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800052a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800052c:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000530:	4293      	cmp	r3, r2
 8000532:	d039      	beq.n	80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>
 8000534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000536:	f24e 0210 	movw	r2, #57360	; 0xe010
 800053a:	4293      	cmp	r3, r2
 800053c:	d837      	bhi.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000540:	f241 0210 	movw	r2, #4112	; 0x1010
 8000544:	4293      	cmp	r3, r2
 8000546:	d031      	beq.n	80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8000548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800054a:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020

			case SYSTEM_INIT:
				break;

			case SYSTEM_START:
				break;
 800054e:	e02e      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				ms->set_velocity(rx.low_data);
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	eeb0 0a67 	vmov.f32	s0, s15
 8000558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800055a:	f7ff ff16 	bl	800038a <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 800055e:	e026      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				ms->pid_velocity.PID_set_p(rx.low_data);
 8000560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000562:	3310      	adds	r3, #16
 8000564:	edd7 7a03 	vldr	s15, [r7, #12]
 8000568:	eeb0 0a67 	vmov.f32	s0, s15
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fefd 	bl	800036c <_ZN3PID9PID_set_pEf>
				break;
 8000572:	e01c      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000574:	bf00      	nop
 8000576:	e01a      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000578:	bf00      	nop
 800057a:	e018      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 800057c:	bf00      	nop
 800057e:	e016      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000580:	bf00      	nop
 8000582:	e014      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000584:	bf00      	nop
 8000586:	e012      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000588:	bf00      	nop
 800058a:	e010      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 800058c:	bf00      	nop
 800058e:	e00e      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000590:	bf00      	nop
 8000592:	e00c      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000594:	bf00      	nop
 8000596:	e00a      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000598:	bf00      	nop
 800059a:	e008      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 800059c:	bf00      	nop
 800059e:	e006      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80005a0:	bf00      	nop
 80005a2:	e004      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80005a4:	bf00      	nop
 80005a6:	e002      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80005a8:	bf00      	nop
 80005aa:	e000      	b.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80005ac:	bf00      	nop
			}

		}
}
 80005ae:	bf00      	nop
 80005b0:	3738      	adds	r7, #56	; 0x38
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6178      	str	r0, [r7, #20]
 80005c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80005c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80005cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80005d0:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
}
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	4618      	mov	r0, r3
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem(
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	603b      	str	r3, [r7, #0]
pid_velocity(0,0,0,0.0001),
pid_torque(0,0,0,0.0001),
//use_can(_hcan),
//use_pwm(_pwm_timer,TIM_CHANNEL_n),
//use_encoder(_encoder_timer),
use_adc(_hadc,3.3)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f04f 0200 	mov.w	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	f04f 0200 	mov.w	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f04f 0200 	mov.w	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3310      	adds	r3, #16
 8000646:	eddf 1a14 	vldr	s3, [pc, #80]	; 8000698 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x84>
 800064a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 800064e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 8000652:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffb0 	bl	80005bc <_ZN3PIDC1Effff>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	332c      	adds	r3, #44	; 0x2c
 8000660:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8000698 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x84>
 8000664:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 8000668:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 800066c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800069c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x88>
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffa3 	bl	80005bc <_ZN3PIDC1Effff>
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3348      	adds	r3, #72	; 0x48
 800067a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80006a0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x8c>
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fda1 	bl	80001c8 <_ZN3ADCC1EP19__ADC_HandleTypeDeff>

{
	_ms = this;
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0x90>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6013      	str	r3, [r2, #0]
	use_can.GPIO_PIN_idbit0 = GPIO_PIN_1;
	use_can.GPIO_PIN_idbit1 = GPIO_PIN_8;
	use_can.GPIO_PIN_idbit2 = GPIO_PIN_9;
	use_can.GPIO_PIN_idbit3 = GPIO_PIN_10;
*/
}
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	38d1b717 	.word	0x38d1b717
 800069c:	00000000 	.word	0x00000000
 80006a0:	40533333 	.word	0x40533333
 80006a4:	20000028 	.word	0x20000028

080006a8 <_ZN3ADC9ADC_startEv>:

	//void ADC_current_fillter(); デジタルフィルタについて学習後実装予定

	int32_t ADC_get_current();

	void ADC_start(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
		HAL_ADC_Start(_hadc);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 ffe2 	bl	8001680 <HAL_ADC_Start>
	}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0cc      	sub	sp, #304	; 0x130
 80006c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fde1 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f82d 	bl	800072c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fb29 	bl	8000d28 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 80006d6:	f000 f897 	bl	8000808 <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 80006da:	f000 f8fd 	bl	80008d8 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 80006de:	f000 f999 	bl	8000a14 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80006e2:	f000 f9f5 	bl	8000ad0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80006e6:	f000 faeb 	bl	8000cc0 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80006ea:	f000 f931 	bl	8000950 <_ZL12MX_TIM1_Initv>
  MX_TIM15_Init();
 80006ee:	f000 fa87 	bl	8000c00 <_ZL13MX_TIM15_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms(&hadc2,&hcan,&htim2,&htim3,TIM_CHANNEL_3);
 80006f2:	4638      	mov	r0, r7
 80006f4:	2308      	movs	r3, #8
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x58>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <main+0x5c>)
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <main+0x60>)
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <main+0x64>)
 8000702:	f7ff ff87 	bl	8000614 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m>
    use_ms.use_adc.ADC_calibration();
 8000706:	463b      	mov	r3, r7
 8000708:	3348      	adds	r3, #72	; 0x48
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdd6 	bl	80002bc <_ZN3ADC15ADC_calibrationEv>
    use_ms.use_adc.ADC_start();
 8000710:	463b      	mov	r3, r7
 8000712:	3348      	adds	r3, #72	; 0x48
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffc7 	bl	80006a8 <_ZN3ADC9ADC_startEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	e7fe      	b.n	800071a <main+0x56>
 800071c:	2000013c 	.word	0x2000013c
 8000720:	200000f0 	.word	0x200000f0
 8000724:	2000007c 	.word	0x2000007c
 8000728:	2000002c 	.word	0x2000002c

0800072c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b096      	sub	sp, #88	; 0x58
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f005 f8c6 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
 800075e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000774:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fb84 	bl	8002e8c <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000794:	f000 fb42 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fa71 	bl	8003c9c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80007ca:	f000 fb27 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80007ce:	f241 0381 	movw	r3, #4225	; 0x1081
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80007d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007dc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fc91 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80007fa:	f000 fb0f 	bl	8000e1c <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3758      	adds	r7, #88	; 0x58
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000820:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <_ZL12MX_ADC2_Initv+0xcc>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000838:	2201      	movs	r2, #1
 800083a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 800084c:	2201      	movs	r2, #1
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000858:	2201      	movs	r2, #1
 800085a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000866:	2204      	movs	r2, #4
 8000868:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 800086c:	2200      	movs	r2, #0
 800086e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 8000878:	f000 fd70 	bl	800135c <HAL_ADC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 800088c:	f000 fac6 	bl	8000e1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000890:	2302      	movs	r3, #2
 8000892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000894:	2301      	movs	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <_ZL12MX_ADC2_Initv+0xc8>)
 80008ae:	f000 ffd3 	bl	8001858 <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 80008c2:	f000 faab 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000002c 	.word	0x2000002c
 80008d4:	50000100 	.word	0x50000100

080008d8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <_ZL11MX_CAN_Initv+0x74>)
 80008e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 80008fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000902:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 8000906:	2200      	movs	r2, #0
 8000908:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 800090c:	2201      	movs	r2, #1
 800090e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 8000912:	2201      	movs	r2, #1
 8000914:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 8000918:	2201      	movs	r2, #1
 800091a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 8000924:	2200      	movs	r2, #0
 8000926:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <_ZL11MX_CAN_Initv+0x70>)
 800092a:	f001 fbd7 	bl	80020dc <HAL_CAN_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 800093e:	f000 fa6d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000007c 	.word	0x2000007c
 800094c:	40006400 	.word	0x40006400

08000950 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <_ZL12MX_TIM1_Initv+0xc0>)
 8000972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099a:	481c      	ldr	r0, [pc, #112]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 800099c:	f003 fcdc 	bl	8004358 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80009b0:	f000 fa34 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 80009c2:	f003 ff3b 	bl	800483c <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 80009d6:	f000 fa21 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <_ZL12MX_TIM1_Initv+0xbc>)
 80009ec:	f004 fba8 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf14      	ite	ne
 80009f6:	2301      	movne	r3, #1
 80009f8:	2300      	moveq	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8000a00:	f000 fa0c 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 ff52 	bl	80058cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a72:	2301      	movs	r3, #1
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000a86:	f003 fd1f 	bl	80044c8 <HAL_TIM_Encoder_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf14      	ite	ne
 8000a90:	2301      	movne	r3, #1
 8000a92:	2300      	moveq	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000a9a:	f000 f9bf 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <_ZL12MX_TIM2_Initv+0xb8>)
 8000aac:	f004 fb48 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bf14      	ite	ne
 8000ab6:	2301      	movne	r3, #1
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000ac0:	f000 f9ac 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000f0 	.word	0x200000f0

08000ad0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <_ZL12MX_TIM3_Initv+0x12c>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b16:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b28:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b2a:	f003 fc15 	bl	8004358 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000b3e:	f000 f96d 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482a      	ldr	r0, [pc, #168]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b50:	f003 fe74 	bl	800483c <HAL_TIM_ConfigClockSource>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8000b64:	f000 f95a 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b6a:	f003 fc4c 	bl	8004406 <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000b7e:	f000 f94d 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000b92:	f004 fad5 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000ba6:	f000 f939 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000bc2:	f003 fd27 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000bd6:	f000 f921 	bl	8000e1c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0208 	bic.w	r2, r2, #8
 8000be8:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <_ZL12MX_TIM3_Initv+0x128>)
 8000bec:	f000 fa5a 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000013c 	.word	0x2000013c
 8000bfc:	40000400 	.word	0x40000400

08000c00 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <_ZL13MX_TIM15_Initv+0xbc>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c36:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c4c:	f003 fb84 	bl	8004358 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 8000c60:	f000 f8dc 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c72:	f003 fde3 	bl	800483c <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 8000c86:	f000 f8c9 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <_ZL13MX_TIM15_Initv+0xb8>)
 8000c98:	f004 fa52 	bl	8005140 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 8000cac:	f000 f8b6 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000188 	.word	0x20000188
 8000cbc:	40014000 	.word	0x40014000

08000cc0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ccc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000d04:	f004 fa8a 	bl	800521c <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f880 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001d4 	.word	0x200001d4
 8000d24:	40013800 	.word	0x40013800

08000d28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <_ZL12MX_GPIO_Initv+0xec>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f002 f865 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2130      	movs	r1, #48	; 0x30
 8000d96:	4820      	ldr	r0, [pc, #128]	; (8000e18 <_ZL12MX_GPIO_Initv+0xf0>)
 8000d98:	f002 f860 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000d9c:	f240 730c 	movw	r3, #1804	; 0x70c
 8000da0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 fee0 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f001 fed1 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <_ZL12MX_GPIO_Initv+0xf0>)
 8000dea:	f001 fec5 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <_ZL12MX_GPIO_Initv+0xf0>)
 8000e06:	f001 feb7 	bl	8002b78 <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <HAL_ADC_MspInit+0x74>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d124      	bne.n	8000edc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_ADC_MspInit+0x78>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f001 fe4e 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	50000100 	.word	0x50000100
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <HAL_CAN_MspInit+0xa0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d139      	bne.n	8000f82 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_CAN_MspInit+0xa4>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f50:	2309      	movs	r3, #9
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f001 fe0b 	bl	8002b78 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2014      	movs	r0, #20
 8000f68:	f001 fdcf 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000f6c:	2014      	movs	r0, #20
 8000f6e:	f001 fde8 	bl	8002b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2015      	movs	r0, #21
 8000f78:	f001 fdc7 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f7c:	2015      	movs	r0, #21
 8000f7e:	f001 fde0 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_TIM_Base_MspInit+0x80>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000fbe:	e022      	b.n	8001006 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_TIM_Base_MspInit+0x88>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
}
 8000fe2:	e010      	b.n	8001006 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM15)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_TIM_Base_MspInit+0x8c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_TIM_Base_MspInit+0x84>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40012c00 	.word	0x40012c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40000400 	.word	0x40000400
 8001020:	40014000 	.word	0x40014000

08001024 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001044:	d128      	bne.n	8001098 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001076:	2303      	movs	r3, #3
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001086:	2301      	movs	r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 fd70 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_TIM_MspPostInit+0x64>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d11b      	bne.n	80010fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_TIM_MspPostInit+0x68>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_TIM_MspPostInit+0x68>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_TIM_MspPostInit+0x68>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_TIM_MspPostInit+0x6c>)
 80010fa:	f001 fd3d 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000400 	.word	0x40000400
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_UART_MspInit+0x7c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d127      	bne.n	8001186 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_UART_MspInit+0x80>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a16      	ldr	r2, [pc, #88]	; (8001194 <HAL_UART_MspInit+0x80>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_UART_MspInit+0x80>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0x80>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_UART_MspInit+0x80>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_UART_MspInit+0x80>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001166:	23c0      	movs	r3, #192	; 0xc0
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001176:	2307      	movs	r3, #7
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_UART_MspInit+0x84>)
 8001182:	f001 fcf9 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40013800 	.word	0x40013800
 8001194:	40021000 	.word	0x40021000
 8001198:	48000400 	.word	0x48000400

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f898 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <CAN_RX0_IRQHandler+0x10>)
 80011f6:	f001 f97e 	bl	80024f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000007c 	.word	0x2000007c

08001204 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <CAN_RX1_IRQHandler+0x10>)
 800120a:	f001 f974 	bl	80024f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000007c 	.word	0x2000007c

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001266:	f7ff ffd7 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f004 fb0b 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff fa29 	bl	80006c4 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001280:	08005934 	.word	0x08005934
  ldr r2, =_sbss
 8001284:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001288:	2000025c 	.word	0x2000025c

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>
	...

08001290 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x28>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x28>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f001 fc27 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fdbc 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fc3f 	bl	8002b5e <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f001 fc07 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	20000258 	.word	0x20000258

08001344 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;  
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000258 	.word	0x20000258

0800135c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09a      	sub	sp, #104	; 0x68
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e172      	b.n	8001662 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d176      	bne.n	800147c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d152      	bne.n	800143c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fd5d 	bl	8000e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d13b      	bne.n	800143c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fd6d 	bl	8001ea4 <ADC_Disable>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d12f      	bne.n	800143c <HAL_ADC_Init+0xe0>
 80013dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d12b      	bne.n	800143c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ec:	f023 0302 	bic.w	r3, r3, #2
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001406:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001416:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001418:	4b94      	ldr	r3, [pc, #592]	; (800166c <HAL_ADC_Init+0x310>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a94      	ldr	r2, [pc, #592]	; (8001670 <HAL_ADC_Init+0x314>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9a      	lsrs	r2, r3, #18
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142e:	e002      	b.n	8001436 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f9      	bne.n	8001430 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001458:	d110      	bne.n	800147c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f023 0312 	bic.w	r3, r3, #18
 8001462:	f043 0210 	orr.w	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 80df 	bne.w	8001648 <HAL_ADC_Init+0x2ec>
 800148a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80da 	bne.w	8001648 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80d2 	bne.w	8001648 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ac:	f043 0202 	orr.w	r2, r3, #2
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b4:	4b6f      	ldr	r3, [pc, #444]	; (8001674 <HAL_ADC_Init+0x318>)
 80014b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c0:	d102      	bne.n	80014c8 <HAL_ADC_Init+0x16c>
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <HAL_ADC_Init+0x31c>)
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e002      	b.n	80014ce <HAL_ADC_Init+0x172>
 80014c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_ADC_Init+0x192>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0x192>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_Init+0x194>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11c      	bne.n	800152e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d010      	beq.n	800151c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_ADC_Init+0x1ba>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x1ba>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_ADC_Init+0x1bc>
 8001516:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001518:	2b00      	cmp	r3, #0
 800151a:	d108      	bne.n	800152e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	431a      	orrs	r2, r3
 800152a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7e5b      	ldrb	r3, [r3, #25]
 8001532:	035b      	lsls	r3, r3, #13
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001538:	2a01      	cmp	r2, #1
 800153a:	d002      	beq.n	8001542 <HAL_ADC_Init+0x1e6>
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	e000      	b.n	8001544 <HAL_ADC_Init+0x1e8>
 8001542:	2200      	movs	r2, #0
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4313      	orrs	r3, r2
 8001552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001554:	4313      	orrs	r3, r2
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11b      	bne.n	800159a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e5b      	ldrb	r3, [r3, #25]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	3b01      	subs	r3, #1
 8001570:	045a      	lsls	r2, r3, #17
 8001572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001574:	4313      	orrs	r3, r2
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	663b      	str	r3, [r7, #96]	; 0x60
 800157c:	e00d      	b.n	800159a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001586:	f043 0220 	orr.w	r2, r3, #32
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	4313      	orrs	r3, r2
 80015ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ae:	4313      	orrs	r3, r2
 80015b0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d114      	bne.n	80015ea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ce:	f023 0302 	bic.w	r3, r3, #2
 80015d2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e1b      	ldrb	r3, [r3, #24]
 80015d8:	039a      	lsls	r2, r3, #14
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4313      	orrs	r3, r2
 80015e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015e6:	4313      	orrs	r3, r2
 80015e8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_ADC_Init+0x320>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015fa:	430b      	orrs	r3, r1
 80015fc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10c      	bne.n	8001620 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f023 010f 	bic.w	r1, r3, #15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
 800161e:	e007      	b.n	8001630 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020f 	bic.w	r2, r2, #15
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	e00a      	b.n	800165e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f023 0312 	bic.w	r3, r3, #18
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800165e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001662:	4618      	mov	r0, r3
 8001664:	3768      	adds	r7, #104	; 0x68
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	431bde83 	.word	0x431bde83
 8001674:	50000300 	.word	0x50000300
 8001678:	50000100 	.word	0x50000100
 800167c:	fff0c007 	.word	0xfff0c007

08001680 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 809c 	bne.w	80017d4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Start+0x2a>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e097      	b.n	80017da <HAL_ADC_Start+0x15a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fb92 	bl	8001ddc <ADC_Enable>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 8083 	bne.w	80017ca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_ADC_Start+0x164>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Start+0x6e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ec:	d115      	bne.n	800171a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d027      	beq.n	8001758 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001710:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001718:	e01e      	b.n	8001758 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172e:	d004      	beq.n	800173a <HAL_ADC_Start+0xba>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_ADC_Start+0x168>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10e      	bne.n	8001758 <HAL_ADC_Start+0xd8>
 800173a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001750:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001764:	d106      	bne.n	8001774 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f023 0206 	bic.w	r2, r3, #6
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
 8001772:	e002      	b.n	800177a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	221c      	movs	r2, #28
 8001788:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_ADC_Start+0x164>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	2b00      	cmp	r3, #0
 8001794:	d010      	beq.n	80017b8 <HAL_ADC_Start+0x138>
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_ADC_Start+0x164>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d00a      	beq.n	80017b8 <HAL_ADC_Start+0x138>
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_ADC_Start+0x164>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d004      	beq.n	80017b8 <HAL_ADC_Start+0x138>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b6:	d10f      	bne.n	80017d8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0204 	orr.w	r2, r2, #4
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	50000300 	.word	0x50000300
 80017e8:	50000100 	.word	0x50000100

080017ec <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Stop+0x1a>
 8001802:	2302      	movs	r3, #2
 8001804:	e023      	b.n	800184e <HAL_ADC_Stop+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800180e:	216c      	movs	r1, #108	; 0x6c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fbad 	bl	8001f70 <ADC_ConversionStop>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fb3f 	bl	8001ea4 <ADC_Disable>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001858:	b480      	push	{r7}
 800185a:	b09b      	sub	sp, #108	; 0x6c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x22>
 8001876:	2302      	movs	r3, #2
 8001878:	e2a5      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x56e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 8289 	bne.w	8001da4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b04      	cmp	r3, #4
 8001898:	d81c      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	461a      	mov	r2, r3
 80018ae:	231f      	movs	r3, #31
 80018b0:	4093      	lsls	r3, r2
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4019      	ands	r1, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
 80018d2:	e063      	b.n	800199c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d81e      	bhi.n	800191a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	221f      	movs	r2, #31
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4019      	ands	r1, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3b1e      	subs	r3, #30
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
 8001918:	e040      	b.n	800199c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b0e      	cmp	r3, #14
 8001920:	d81e      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	3b3c      	subs	r3, #60	; 0x3c
 8001936:	221f      	movs	r2, #31
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	4019      	ands	r1, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	3b3c      	subs	r3, #60	; 0x3c
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
 800195e:	e01d      	b.n	800199c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3b5a      	subs	r3, #90	; 0x5a
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	4019      	ands	r1, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3b5a      	subs	r3, #90	; 0x5a
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80e5 	bne.w	8001b76 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	d91c      	bls.n	80019ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6999      	ldr	r1, [r3, #24]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	3b1e      	subs	r3, #30
 80019c6:	2207      	movs	r2, #7
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4019      	ands	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	3b1e      	subs	r3, #30
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	e019      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6959      	ldr	r1, [r3, #20]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	2207      	movs	r2, #7
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6898      	ldr	r0, [r3, #8]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d84f      	bhi.n	8001ae4 <HAL_ADC_ConfigChannel+0x28c>
 8001a44:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a5d 	.word	0x08001a5d
 8001a50:	08001a7f 	.word	0x08001a7f
 8001a54:	08001aa1 	.word	0x08001aa1
 8001a58:	08001ac3 	.word	0x08001ac3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a62:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <HAL_ADC_ConfigChannel+0x484>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	0691      	lsls	r1, r2, #26
 8001a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a7c:	e07e      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a84:	4b95      	ldr	r3, [pc, #596]	; (8001cdc <HAL_ADC_ConfigChannel+0x484>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	0691      	lsls	r1, r2, #26
 8001a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a90:	430a      	orrs	r2, r1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a9e:	e06d      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <HAL_ADC_ConfigChannel+0x484>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	0691      	lsls	r1, r2, #26
 8001ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001abe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ac0:	e05c      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ac8:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <HAL_ADC_ConfigChannel+0x484>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	0691      	lsls	r1, r2, #26
 8001ad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ae0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ae2:	e04b      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	069b      	lsls	r3, r3, #26
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b06:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d107      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	069b      	lsls	r3, r3, #26
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b4e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	069b      	lsls	r3, r3, #26
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10a      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b74:	e001      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b76:	bf00      	nop
 8001b78:	e000      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b7a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x344>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x344>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x346>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 810b 	bne.w	8001dba <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d00f      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bca:	e049      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b09      	cmp	r3, #9
 8001bec:	d91c      	bls.n	8001c28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6999      	ldr	r1, [r3, #24]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b1b      	subs	r3, #27
 8001c00:	2207      	movs	r2, #7
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6898      	ldr	r0, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1b      	subs	r3, #27
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	619a      	str	r2, [r3, #24]
 8001c26:	e01b      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6959      	ldr	r1, [r3, #20]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4019      	ands	r1, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6898      	ldr	r0, [r3, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_ADC_ConfigChannel+0x488>)
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	f040 8092 	bne.w	8001dba <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 808b 	bne.w	8001dba <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cac:	d102      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x45c>
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_ADC_ConfigChannel+0x48c>)
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_ConfigChannel+0x462>
 8001cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cb8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x490>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x490>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e007      	b.n	8001cea <HAL_ADC_ConfigChannel+0x492>
 8001cda:	bf00      	nop
 8001cdc:	83fff000 	.word	0x83fff000
 8001ce0:	50000300 	.word	0x50000300
 8001ce4:	50000100 	.word	0x50000100
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d150      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x4b8>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x4b8>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x4ba>
 8001d10:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13c      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d11d      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x502>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d26:	d118      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d32:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_ADC_ConfigChannel+0x57c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_ADC_ConfigChannel+0x580>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d4a:	e002      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d58:	e02e      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b11      	cmp	r3, #17
 8001d60:	d10b      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x522>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d76:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d78:	e01e      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d11a      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d8e:	e013      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001da2:	e00a      	b.n	8001dba <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001db6:	e000      	b.n	8001dba <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001db8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	376c      	adds	r7, #108	; 0x6c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <ADC_Enable+0x2c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <ADC_Enable+0x2c>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <ADC_Enable+0x2e>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d143      	bne.n	8001e96 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <ADC_Enable+0xc4>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e02f      	b.n	8001e98 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e48:	f7ff fa7c 	bl	8001344 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e4e:	e01b      	b.n	8001e88 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e50:	f7ff fa78 	bl	8001344 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d914      	bls.n	8001e88 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d00d      	beq.n	8001e88 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e007      	b.n	8001e98 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d1dc      	bne.n	8001e50 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	8000003f 	.word	0x8000003f

08001ea4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <ADC_Disable+0x2c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <ADC_Disable+0x2c>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <ADC_Disable+0x2e>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d047      	beq.n	8001f66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030d 	and.w	r3, r3, #13
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10f      	bne.n	8001f04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0202 	orr.w	r2, r2, #2
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa22 	bl	8001344 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f02:	e029      	b.n	8001f58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e023      	b.n	8001f68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f20:	f7ff fa10 	bl	8001344 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d914      	bls.n	8001f58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10d      	bne.n	8001f58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0210 	orr.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d0dc      	beq.n	8001f20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 809b 	beq.w	80020cc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fa4:	d12a      	bne.n	8001ffc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d126      	bne.n	8001ffc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d122      	bne.n	8001ffc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001fba:	e014      	b.n	8001fe6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4a46      	ldr	r2, [pc, #280]	; (80020d8 <ADC_ConversionStop+0x168>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d90d      	bls.n	8001fe0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e076      	b.n	80020ce <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d1e3      	bne.n	8001fbc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b60      	cmp	r3, #96	; 0x60
 8002000:	d015      	beq.n	800202e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d10e      	bne.n	800202e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0210 	orr.w	r2, r2, #16
 800202c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d015      	beq.n	8002060 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b08      	cmp	r3, #8
 8002040:	d10e      	bne.n	8002060 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0220 	orr.w	r2, r2, #32
 800205e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b60      	cmp	r3, #96	; 0x60
 8002064:	d005      	beq.n	8002072 <ADC_ConversionStop+0x102>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b6c      	cmp	r3, #108	; 0x6c
 800206a:	d105      	bne.n	8002078 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800206c:	230c      	movs	r3, #12
 800206e:	617b      	str	r3, [r7, #20]
        break;
 8002070:	e005      	b.n	800207e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002072:	2308      	movs	r3, #8
 8002074:	617b      	str	r3, [r7, #20]
        break;
 8002076:	e002      	b.n	800207e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002078:	2304      	movs	r3, #4
 800207a:	617b      	str	r3, [r7, #20]
        break;
 800207c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800207e:	f7ff f961 	bl	8001344 <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002084:	e01b      	b.n	80020be <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002086:	f7ff f95d 	bl	8001344 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b0b      	cmp	r3, #11
 8002092:	d914      	bls.n	80020be <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0210 	orr.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e007      	b.n	80020ce <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1dc      	bne.n	8002086 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	000993ff 	.word	0x000993ff

080020dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0ed      	b.n	80022ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fef6 	bl	8000eec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002110:	f7ff f918 	bl	8001344 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002116:	e012      	b.n	800213e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002118:	f7ff f914 	bl	8001344 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d90b      	bls.n	800213e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0c5      	b.n	80022ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0e5      	beq.n	8002118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0202 	bic.w	r2, r2, #2
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff f8f2 	bl	8001344 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002162:	e012      	b.n	800218a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002164:	f7ff f8ee 	bl	8001344 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d90b      	bls.n	800218a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2205      	movs	r2, #5
 8002182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e09f      	b.n	80022ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e5      	bne.n	8002164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e1b      	ldrb	r3, [r3, #24]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e007      	b.n	80021ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e9b      	ldrb	r3, [r3, #26]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e007      	b.n	8002216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7edb      	ldrb	r3, [r3, #27]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0210 	bic.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e007      	b.n	8002240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0210 	orr.w	r2, r2, #16
 800223e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7f1b      	ldrb	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e007      	b.n	800226a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7f5b      	ldrb	r3, [r3, #29]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0204 	orr.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e007      	b.n	8002294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	ea42 0103 	orr.w	r1, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d003      	beq.n	80022f6 <HAL_CAN_GetRxMessage+0x24>
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	f040 80f3 	bne.w	80024dc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10e      	bne.n	800231a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0e7      	b.n	80024ea <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d8      	b.n	80024ea <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	331b      	adds	r3, #27
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0204 	and.w	r2, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	331b      	adds	r3, #27
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0d5b      	lsrs	r3, r3, #21
 8002366:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e00b      	b.n	8002388 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	331b      	adds	r3, #27
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	08db      	lsrs	r3, r3, #3
 8002380:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0202 	and.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	331b      	adds	r3, #27
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	331b      	adds	r3, #27
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	331b      	adds	r3, #27
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1a      	lsrs	r2, r3, #8
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0c1a      	lsrs	r2, r3, #16
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3302      	adds	r3, #2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e1a      	lsrs	r2, r3, #24
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3303      	adds	r3, #3
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3304      	adds	r3, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0a1a      	lsrs	r2, r3, #8
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3305      	adds	r3, #5
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0c1a      	lsrs	r2, r3, #16
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3306      	adds	r3, #6
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e1a      	lsrs	r2, r3, #24
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3307      	adds	r3, #7
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	e007      	b.n	80024d8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e006      	b.n	80024ea <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	; 0x28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d07c      	beq.n	8002636 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f983 	bl	8002864 <HAL_CAN_TxMailbox0CompleteCallback>
 800255e:	e016      	b.n	800258e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e00c      	b.n	800258e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	e002      	b.n	800258e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f989 	bl	80028a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d024      	beq.n	80025e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f963 	bl	8002878 <HAL_CAN_TxMailbox1CompleteCallback>
 80025b2:	e016      	b.n	80025e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e00c      	b.n	80025e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e002      	b.n	80025e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f969 	bl	80028b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d024      	beq.n	8002636 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f943 	bl	800288c <HAL_CAN_TxMailbox2CompleteCallback>
 8002606:	e016      	b.n	8002636 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e00c      	b.n	8002636 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	e002      	b.n	8002636 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f949 	bl	80028c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2210      	movs	r2, #16
 8002658:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2208      	movs	r2, #8
 8002674:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f930 	bl	80028dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fd fe87 	bl	80003a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2208      	movs	r2, #8
 80026d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f912 	bl	8002904 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8f9 	bl	80028f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8fc 	bl	8002918 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8f5 	bl	800292c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d07b      	beq.n	8002844 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d072      	beq.n	800283c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03e      	beq.n	800283c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c4:	2b60      	cmp	r3, #96	; 0x60
 80027c6:	d02b      	beq.n	8002820 <HAL_CAN_IRQHandler+0x32a>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d82e      	bhi.n	800282a <HAL_CAN_IRQHandler+0x334>
 80027cc:	2b50      	cmp	r3, #80	; 0x50
 80027ce:	d022      	beq.n	8002816 <HAL_CAN_IRQHandler+0x320>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d82a      	bhi.n	800282a <HAL_CAN_IRQHandler+0x334>
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d019      	beq.n	800280c <HAL_CAN_IRQHandler+0x316>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d826      	bhi.n	800282a <HAL_CAN_IRQHandler+0x334>
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d010      	beq.n	8002802 <HAL_CAN_IRQHandler+0x30c>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d822      	bhi.n	800282a <HAL_CAN_IRQHandler+0x334>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d002      	beq.n	80027ee <HAL_CAN_IRQHandler+0x2f8>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d005      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027ec:	e01d      	b.n	800282a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f6:	e019      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f043 0310 	orr.w	r3, r3, #16
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002800:	e014      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f043 0320 	orr.w	r3, r3, #32
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800280a:	e00f      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002814:	e00a      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800281e:	e005      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002828:	e000      	b.n	800282c <HAL_CAN_IRQHandler+0x336>
            break;
 800282a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800283a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f872 	bl	8002940 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff29 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff3e 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff8e 	bl	8002a48 <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff31 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffa2 	bl	8002ab0 <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e14e      	b.n	8002e26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8140 	beq.w	8002e20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x40>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d017      	beq.n	8002c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d123      	bne.n	8002caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	6939      	ldr	r1, [r7, #16]
 8002ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 809a 	beq.w	8002e20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cec:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a54      	ldr	r2, [pc, #336]	; (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d2e:	d013      	beq.n	8002d58 <HAL_GPIO_Init+0x1e0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a46      	ldr	r2, [pc, #280]	; (8002e4c <HAL_GPIO_Init+0x2d4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_GPIO_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_GPIO_Init+0x2d8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a44      	ldr	r2, [pc, #272]	; (8002e54 <HAL_GPIO_Init+0x2dc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_GPIO_Init+0x1d4>
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_GPIO_Init+0x1e2>
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	e004      	b.n	8002d5a <HAL_GPIO_Init+0x1e2>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e002      	b.n	8002d5a <HAL_GPIO_Init+0x1e2>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_GPIO_Init+0x1e2>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4093      	lsls	r3, r2
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d6a:	4937      	ldr	r1, [pc, #220]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002da2:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dc6:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f47f aea9 	bne.w	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	48000400 	.word	0x48000400
 8002e50:	48000800 	.word	0x48000800
 8002e54:	48000c00 	.word	0x48000c00
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f000 bef4 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 816a 	beq.w	800318a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002eb6:	4bb3      	ldr	r3, [pc, #716]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00c      	beq.n	8002edc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ec2:	4bb0      	ldr	r3, [pc, #704]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d159      	bne.n	8002f82 <HAL_RCC_OscConfig+0xf6>
 8002ece:	4bad      	ldr	r3, [pc, #692]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d152      	bne.n	8002f82 <HAL_RCC_OscConfig+0xf6>
 8002edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_OscConfig+0x82>
 8002f08:	4b9e      	ldr	r3, [pc, #632]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0xae>
 8002f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f26:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f2a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f36:	4b93      	ldr	r3, [pc, #588]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f3e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f4e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 810c 	beq.w	8003188 <HAL_RCC_OscConfig+0x2fc>
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8106 	bne.w	8003188 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f000 be86 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x110>
 8002f8e:	4b7d      	ldr	r3, [pc, #500]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7c      	ldr	r2, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e030      	b.n	8002ffe <HAL_RCC_OscConfig+0x172>
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x134>
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a76      	ldr	r2, [pc, #472]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e01e      	b.n	8002ffe <HAL_RCC_OscConfig+0x172>
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x15a>
 8002fcc:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6c      	ldr	r2, [pc, #432]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0x172>
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ffe:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	495d      	ldr	r1, [pc, #372]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d059      	beq.n	80030d0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe f992 	bl	8001344 <HAL_GetTick>
 8003020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003026:	f7fe f98d 	bl	8001344 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d902      	bls.n	800303c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	f000 be29 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
 800303c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003040:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003050:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x1e2>
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x20e>
 800306e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003072:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003086:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800308a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800309e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80030a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80030ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ab      	beq.n	8003026 <HAL_RCC_OscConfig+0x19a>
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f938 	bl	8001344 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030da:	f7fe f933 	bl	8001344 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d902      	bls.n	80030f0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f000 bdcf 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
 80030f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003104:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x296>
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0x2c2>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800313e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_RCC_OscConfig+0x2f8>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003152:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003156:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800315a:	fa92 f2a2 	rbit	r2, r2
 800315e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003162:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f042 0220 	orr.w	r2, r2, #32
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f002 021f 	and.w	r2, r2, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ab      	bne.n	80030da <HAL_RCC_OscConfig+0x24e>
 8003182:	e002      	b.n	800318a <HAL_RCC_OscConfig+0x2fe>
 8003184:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 816f 	beq.w	8003478 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800319a:	4bd0      	ldr	r3, [pc, #832]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031a6:	4bcd      	ldr	r3, [pc, #820]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d16c      	bne.n	800328c <HAL_RCC_OscConfig+0x400>
 80031b2:	4bca      	ldr	r3, [pc, #808]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d166      	bne.n	800328c <HAL_RCC_OscConfig+0x400>
 80031be:	2302      	movs	r3, #2
 80031c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80031d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d102      	bne.n	80031ee <HAL_RCC_OscConfig+0x362>
 80031e8:	4bbc      	ldr	r3, [pc, #752]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	e013      	b.n	8003216 <HAL_RCC_OscConfig+0x38a>
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003200:	2302      	movs	r3, #2
 8003202:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003206:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003212:	4bb2      	ldr	r3, [pc, #712]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2202      	movs	r2, #2
 8003218:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800321c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003220:	fa92 f2a2 	rbit	r2, r2
 8003224:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003228:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f042 0220 	orr.w	r2, r2, #32
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f002 021f 	and.w	r2, r2, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_RCC_OscConfig+0x3cc>
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d002      	beq.n	8003258 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f000 bd1b 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4ba0      	ldr	r3, [pc, #640]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	21f8      	movs	r1, #248	; 0xf8
 8003268:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003270:	fa91 f1a1 	rbit	r1, r1
 8003274:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003278:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800327c:	fab1 f181 	clz	r1, r1
 8003280:	b2c9      	uxtb	r1, r1
 8003282:	408b      	lsls	r3, r1
 8003284:	4995      	ldr	r1, [pc, #596]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	e0f5      	b.n	8003478 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8085 	beq.w	80033a2 <HAL_RCC_OscConfig+0x516>
 8003298:	2301      	movs	r3, #1
 800329a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80032aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	2301      	movs	r3, #1
 80032c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f83e 	bl	8001344 <HAL_GetTick>
 80032c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe f839 	bl	8001344 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	f000 bcd5 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
 80032e4:	2302      	movs	r3, #2
 80032e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80032f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d102      	bne.n	8003314 <HAL_RCC_OscConfig+0x488>
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	e013      	b.n	800333c <HAL_RCC_OscConfig+0x4b0>
 8003314:	2302      	movs	r3, #2
 8003316:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003326:	2302      	movs	r3, #2
 8003328:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800332c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2202      	movs	r2, #2
 800333e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003342:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003346:	fa92 f2a2 	rbit	r2, r2
 800334a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800334e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003352:	fab2 f282 	clz	r2, r2
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f042 0220 	orr.w	r2, r2, #32
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f002 021f 	and.w	r2, r2, #31
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f202 	lsl.w	r2, r1, r2
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0af      	beq.n	80032ce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	21f8      	movs	r1, #248	; 0xf8
 800337e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003386:	fa91 f1a1 	rbit	r1, r1
 800338a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800338e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003392:	fab1 f181 	clz	r1, r1
 8003396:	b2c9      	uxtb	r1, r1
 8003398:	408b      	lsls	r3, r1
 800339a:	4950      	ldr	r1, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e06a      	b.n	8003478 <HAL_RCC_OscConfig+0x5ec>
 80033a2:	2301      	movs	r3, #1
 80033a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80033b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	2300      	movs	r3, #0
 80033cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd ffb9 	bl	8001344 <HAL_GetTick>
 80033d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fd ffb4 	bl	8001344 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d902      	bls.n	80033ee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f000 bc50 	b.w	8003c8e <HAL_RCC_OscConfig+0xe02>
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_OscConfig+0x592>
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e013      	b.n	8003446 <HAL_RCC_OscConfig+0x5ba>
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003430:	2302      	movs	r3, #2
 8003432:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003436:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x650>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2202      	movs	r2, #2
 8003448:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800344c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003458:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800345c:	fab2 f282 	clz	r2, r2
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f002 021f 	and.w	r2, r2, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1af      	bne.n	80033d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80da 	beq.w	800363c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d069      	beq.n	8003566 <HAL_RCC_OscConfig+0x6da>
 8003492:	2301      	movs	r3, #1
 8003494:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x654>)
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fd ff42 	bl	8001344 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c4:	e00e      	b.n	80034e4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fd ff3d 	bl	8001344 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d906      	bls.n	80034e4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e3d9      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	10908120 	.word	0x10908120
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80034fa:	2202      	movs	r2, #2
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003512:	2202      	movs	r2, #2
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003524:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	4ba5      	ldr	r3, [pc, #660]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800352e:	2102      	movs	r1, #2
 8003530:	6019      	str	r1, [r3, #0]
 8003532:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f1a3 	rbit	r1, r3
 800353c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003540:	6019      	str	r1, [r3, #0]
  return result;
 8003542:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0b0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x63a>
 8003564:	e06a      	b.n	800363c <HAL_RCC_OscConfig+0x7b0>
 8003566:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800357c:	601a      	str	r2, [r3, #0]
  return result;
 800357e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003582:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <HAL_RCC_OscConfig+0x934>)
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003598:	f7fd fed4 	bl	8001344 <HAL_GetTick>
 800359c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e009      	b.n	80035b6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fecf 	bl	8001344 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e36b      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 80035b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80035ba:	2202      	movs	r2, #2
 80035bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa93 f2a3 	rbit	r2, r3
 80035c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80035d2:	2202      	movs	r2, #2
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80035ea:	2202      	movs	r2, #2
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003602:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003606:	2102      	movs	r1, #2
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fa93 f1a3 	rbit	r1, r3
 8003614:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003618:	6019      	str	r1, [r3, #0]
  return result;
 800361a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1b2      	bne.n	80035a2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8158 	beq.w	80038fc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b57      	ldr	r3, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]
 800366a:	4b54      	ldr	r3, [pc, #336]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b4f      	ldr	r3, [pc, #316]	; (80037c4 <HAL_RCC_OscConfig+0x938>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11a      	bne.n	80036c6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003690:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_OscConfig+0x938>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4b      	ldr	r2, [pc, #300]	; (80037c4 <HAL_RCC_OscConfig+0x938>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369c:	f7fd fe52 	bl	8001344 <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e009      	b.n	80036ba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fd fe4d 	bl	8001344 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e2e9      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <HAL_RCC_OscConfig+0x938>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ef      	beq.n	80036a6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x852>
 80036d0:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4a39      	ldr	r2, [pc, #228]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6213      	str	r3, [r2, #32]
 80036dc:	e02f      	b.n	800373e <HAL_RCC_OscConfig+0x8b2>
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x876>
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e01d      	b.n	800373e <HAL_RCC_OscConfig+0x8b2>
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x89a>
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x8b2>
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a24      	ldr	r2, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d06b      	beq.n	8003820 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fd fdfc 	bl	8001344 <HAL_GetTick>
 800374c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fd fdf7 	bl	8001344 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e291      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 800376a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800376e:	2202      	movs	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003786:	2202      	movs	r2, #2
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003798:	601a      	str	r2, [r3, #0]
  return result;
 800379a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800379e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d109      	bne.n	80037c8 <HAL_RCC_OscConfig+0x93c>
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <HAL_RCC_OscConfig+0x930>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	e014      	b.n	80037e4 <HAL_RCC_OscConfig+0x958>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	10908120 	.word	0x10908120
 80037c4:	40007000 	.word	0x40007000
 80037c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4bbb      	ldr	r3, [pc, #748]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80037e8:	2102      	movs	r1, #2
 80037ea:	6011      	str	r1, [r2, #0]
 80037ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	fa92 f1a2 	rbit	r1, r2
 80037f6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80037fa:	6011      	str	r1, [r2, #0]
  return result;
 80037fc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d099      	beq.n	8003752 <HAL_RCC_OscConfig+0x8c6>
 800381e:	e063      	b.n	80038e8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fd fd90 	bl	8001344 <HAL_GetTick>
 8003824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00b      	b.n	8003842 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fd8b 	bl	8001344 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e225      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 8003842:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003870:	601a      	str	r2, [r3, #0]
  return result;
 8003872:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f043 0302 	orr.w	r3, r3, #2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d102      	bne.n	8003892 <HAL_RCC_OscConfig+0xa06>
 800388c:	4b90      	ldr	r3, [pc, #576]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	e00d      	b.n	80038ae <HAL_RCC_OscConfig+0xa22>
 8003892:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003896:	2202      	movs	r2, #2
 8003898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	fa93 f2a3 	rbit	r2, r3
 80038a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	4b89      	ldr	r3, [pc, #548]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80038b2:	2102      	movs	r1, #2
 80038b4:	6011      	str	r1, [r2, #0]
 80038b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	fa92 f1a2 	rbit	r1, r2
 80038c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80038c4:	6011      	str	r1, [r2, #0]
  return result;
 80038c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	fab2 f282 	clz	r2, r2
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f002 021f 	and.w	r2, r2, #31
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1a0      	bne.n	800382a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b77      	ldr	r3, [pc, #476]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a76      	ldr	r2, [pc, #472]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 81c2 	beq.w	8003c8c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003908:	4b71      	ldr	r3, [pc, #452]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	f000 819c 	beq.w	8003c4e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b02      	cmp	r3, #2
 800391e:	f040 8114 	bne.w	8003b4a <HAL_RCC_OscConfig+0xcbe>
 8003922:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003940:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800394c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fcf4 	bl	8001344 <HAL_GetTick>
 800395c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	e009      	b.n	8003976 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd fcef 	bl	8001344 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e18b      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 8003976:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fa93 f2a3 	rbit	r2, r3
 800398a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800398e:	601a      	str	r2, [r3, #0]
  return result;
 8003990:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003994:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_OscConfig+0xb24>
 80039aa:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e01b      	b.n	80039e8 <HAL_RCC_OscConfig+0xb5c>
 80039b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	fa92 f1a2 	rbit	r1, r2
 80039fc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a00:	6011      	str	r1, [r2, #0]
  return result;
 8003a02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d19e      	bne.n	8003962 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	4925      	ldr	r1, [pc, #148]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a58:	601a      	str	r2, [r3, #0]
  return result;
 8003a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a5e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	461a      	mov	r2, r3
 8003a72:	2301      	movs	r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fd fc65 	bl	8001344 <HAL_GetTick>
 8003a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7e:	e009      	b.n	8003a94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd fc60 	bl	8001344 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0fc      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 8003a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aac:	601a      	str	r2, [r3, #0]
  return result;
 8003aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xc48>
 8003ac8:	4b01      	ldr	r3, [pc, #4]	; (8003ad0 <HAL_RCC_OscConfig+0xc44>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	e01e      	b.n	8003b0c <HAL_RCC_OscConfig+0xc80>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f2a3 	rbit	r2, r3
 8003ae8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f2a3 	rbit	r2, r3
 8003b02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_OscConfig+0xe0c>)
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	fa92 f1a2 	rbit	r1, r2
 8003b20:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b24:	6011      	str	r1, [r2, #0]
  return result;
 8003b26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f042 0220 	orr.w	r2, r2, #32
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f002 021f 	and.w	r2, r2, #31
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d09b      	beq.n	8003a80 <HAL_RCC_OscConfig+0xbf4>
 8003b48:	e0a0      	b.n	8003c8c <HAL_RCC_OscConfig+0xe00>
 8003b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b62:	601a      	str	r2, [r3, #0]
  return result;
 8003b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd fbe0 	bl	8001344 <HAL_GetTick>
 8003b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fd fbdb 	bl	8001344 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e077      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
 8003b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb6:	601a      	str	r2, [r3, #0]
  return result;
 8003bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d102      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xd4c>
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0xe0c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0xd84>
 8003bd8:	f107 0320 	add.w	r3, r7, #32
 8003bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f107 0318 	add.w	r3, r7, #24
 8003bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f107 0318 	add.w	r3, r7, #24
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_RCC_OscConfig+0xe0c>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f107 0210 	add.w	r2, r7, #16
 8003c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	fa92 f1a2 	rbit	r1, r2
 8003c24:	f107 020c 	add.w	r2, r7, #12
 8003c28:	6011      	str	r1, [r2, #0]
  return result;
 8003c2a:	f107 020c 	add.w	r2, r7, #12
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d19e      	bne.n	8003b8a <HAL_RCC_OscConfig+0xcfe>
 8003c4c:	e01e      	b.n	8003c8c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_RCC_OscConfig+0xe0c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d108      	bne.n	8003c88 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000

08003c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b09e      	sub	sp, #120	; 0x78
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e162      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b90      	ldr	r3, [pc, #576]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	498b      	ldr	r1, [pc, #556]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e14a      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b82      	ldr	r3, [pc, #520]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	497f      	ldr	r1, [pc, #508]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80dc 	beq.w	8003ec8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d13c      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xf6>
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xa6>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	e00f      	b.n	8003d62 <HAL_RCC_ClockConfig+0xc6>
 8003d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d54:	663b      	str	r3, [r7, #96]	; 0x60
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d6a:	fa92 f2a2 	rbit	r2, r2
 8003d6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d72:	fab2 f282 	clz	r2, r2
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	f042 0220 	orr.w	r2, r2, #32
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	f002 021f 	and.w	r2, r2, #31
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f202 	lsl.w	r2, r1, r2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d17b      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0f3      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d13c      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x178>
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x128>
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	e00f      	b.n	8003de4 <HAL_RCC_ClockConfig+0x148>
 8003dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de0:	4b46      	ldr	r3, [pc, #280]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dec:	fa92 f2a2 	rbit	r2, r2
 8003df0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df4:	fab2 f282 	clz	r2, r2
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f042 0220 	orr.w	r2, r2, #32
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f002 021f 	and.w	r2, r2, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d13a      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b2      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
 8003e14:	2302      	movs	r3, #2
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d102      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x1a0>
 8003e36:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	e00d      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1bc>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	2302      	movs	r3, #2
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2202      	movs	r2, #2
 8003e5a:	61ba      	str	r2, [r7, #24]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	fa92 f2a2 	rbit	r2, r2
 8003e62:	617a      	str	r2, [r7, #20]
  return result;
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	fab2 f282 	clz	r2, r2
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f042 0220 	orr.w	r2, r2, #32
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f002 021f 	and.w	r2, r2, #31
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e079      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	491a      	ldr	r1, [pc, #104]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e98:	f7fd fa54 	bl	8001344 <HAL_GetTick>
 8003e9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fd fa50 	bl	8001344 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e061      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d214      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0207 	bic.w	r2, r3, #7
 8003ede:	4906      	ldr	r1, [pc, #24]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_RCC_ClockConfig+0x25c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e040      	b.n	8003f7a <HAL_RCC_ClockConfig+0x2de>
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCC_ClockConfig+0x2e8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	491a      	ldr	r1, [pc, #104]	; (8003f84 <HAL_RCC_ClockConfig+0x2e8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_RCC_ClockConfig+0x2e8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4912      	ldr	r1, [pc, #72]	; (8003f84 <HAL_RCC_ClockConfig+0x2e8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f3e:	f000 f829 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 8003f42:	4601      	mov	r1, r0
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_ClockConfig+0x2e8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4c:	22f0      	movs	r2, #240	; 0xf0
 8003f4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	60fa      	str	r2, [r7, #12]
  return result;
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	40d3      	lsrs	r3, r2
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x2ec>)
 8003f64:	5cd3      	ldrb	r3, [r2, r3]
 8003f66:	fa21 f303 	lsr.w	r3, r1, r3
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_RCC_ClockConfig+0x2f0>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCC_ClockConfig+0x2f4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f9a2 	bl	80012bc <HAL_InitTick>
  
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3778      	adds	r7, #120	; 0x78
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	080058f4 	.word	0x080058f4
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	20000004 	.word	0x20000004

08003f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b08b      	sub	sp, #44	; 0x2c
 8003f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d002      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x36>
 8003fc2:	e03c      	b.n	800403e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fc6:	623b      	str	r3, [r7, #32]
      break;
 8003fc8:	e03c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	fa92 f2a2 	rbit	r2, r2
 8003fdc:	607a      	str	r2, [r7, #4]
  return result;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	fab2 f282 	clz	r2, r2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	40d3      	lsrs	r3, r2
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fea:	5cd3      	ldrb	r3, [r2, r3]
 8003fec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fee:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	220f      	movs	r2, #15
 8003ff8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	fa92 f2a2 	rbit	r2, r2
 8004000:	60fa      	str	r2, [r7, #12]
  return result;
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	fab2 f282 	clz	r2, r2
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	40d3      	lsrs	r3, r2
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <HAL_RCC_GetSysClockFreq+0xcc>)
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800401c:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <HAL_RCC_GetSysClockFreq+0xc4>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	fbb2 f2f3 	udiv	r2, r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	e004      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	623b      	str	r3, [r7, #32]
      break;
 800403c:	e002      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004040:	623b      	str	r3, [r7, #32]
      break;
 8004042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004044:	6a3b      	ldr	r3, [r7, #32]
}
 8004046:	4618      	mov	r0, r3
 8004048:	372c      	adds	r7, #44	; 0x2c
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	00b71b00 	.word	0x00b71b00
 800405c:	0800590c 	.word	0x0800590c
 8004060:	0800591c 	.word	0x0800591c
 8004064:	003d0900 	.word	0x003d0900
 8004068:	007a1200 	.word	0x007a1200

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000000 	.word	0x20000000

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800408a:	f7ff ffef 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408e:	4601      	mov	r1, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004098:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800409c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	fa92 f2a2 	rbit	r2, r2
 80040a4:	603a      	str	r2, [r7, #0]
  return result;
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	fab2 f282 	clz	r2, r2
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	40d3      	lsrs	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08005904 	.word	0x08005904

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040ce:	f7ff ffcd 	bl	800406c <HAL_RCC_GetHCLKFreq>
 80040d2:	4601      	mov	r1, r0
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	fa92 f2a2 	rbit	r2, r2
 80040e8:	603a      	str	r2, [r7, #0]
  return result;
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	40d3      	lsrs	r3, r2
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	08005904 	.word	0x08005904

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b092      	sub	sp, #72	; 0x48
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80cd 	beq.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004130:	4b86      	ldr	r3, [pc, #536]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10e      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413c:	4b83      	ldr	r3, [pc, #524]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	4a82      	ldr	r2, [pc, #520]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	61d3      	str	r3, [r2, #28]
 8004148:	4b80      	ldr	r3, [pc, #512]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415a:	4b7d      	ldr	r3, [pc, #500]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d118      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004166:	4b7a      	ldr	r3, [pc, #488]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a79      	ldr	r2, [pc, #484]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004172:	f7fd f8e7 	bl	8001344 <HAL_GetTick>
 8004176:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fd f8e3 	bl	8001344 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e0db      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b70      	ldr	r3, [pc, #448]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004198:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d07d      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d076      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b5e      	ldr	r3, [pc, #376]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	461a      	mov	r2, r3
 80041e0:	2301      	movs	r3, #1
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b55      	ldr	r3, [pc, #340]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004208:	4a50      	ldr	r2, [pc, #320]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d045      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fd f894 	bl	8001344 <HAL_GetTick>
 800421c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	e00a      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fd f890 	bl	8001344 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e086      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004236:	2302      	movs	r3, #2
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
 8004242:	2302      	movs	r3, #2
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	61fb      	str	r3, [r7, #28]
  return result;
 800424e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d102      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004264:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	e007      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800426a:	2302      	movs	r3, #2
 800426c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2202      	movs	r2, #2
 800427c:	613a      	str	r2, [r7, #16]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	fa92 f2a2 	rbit	r2, r2
 8004284:	60fa      	str	r2, [r7, #12]
  return result;
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	fab2 f282 	clz	r2, r2
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f002 021f 	and.w	r2, r2, #31
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0bd      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042a4:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4926      	ldr	r1, [pc, #152]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4a22      	ldr	r2, [pc, #136]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	491a      	ldr	r1, [pc, #104]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f4:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f023 0210 	bic.w	r2, r3, #16
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4912      	ldr	r1, [pc, #72]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	490b      	ldr	r1, [pc, #44]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004320:	4313      	orrs	r3, r2
 8004322:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4903      	ldr	r1, [pc, #12]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800433e:	4313      	orrs	r3, r2
 8004340:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3748      	adds	r7, #72	; 0x48
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
 8004354:	10908100 	.word	0x10908100

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e049      	b.n	80043fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fe08 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fb1a 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e049      	b.n	80044ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f841 	bl	80044b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 fac3 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e097      	b.n	800460c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fc fd97 	bl	8001024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fa57 	bl	80049d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	4313      	orrs	r3, r2
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004568:	f023 030c 	bic.w	r3, r3, #12
 800456c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	4313      	orrs	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	011a      	lsls	r2, r3, #4
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	031b      	lsls	r3, r3, #12
 8004598:	4313      	orrs	r3, r2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	4313      	orrs	r3, r2
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0ff      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b14      	cmp	r3, #20
 800463e:	f200 80f0 	bhi.w	8004822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004823 	.word	0x08004823
 8004650:	08004823 	.word	0x08004823
 8004654:	08004823 	.word	0x08004823
 8004658:	080046dd 	.word	0x080046dd
 800465c:	08004823 	.word	0x08004823
 8004660:	08004823 	.word	0x08004823
 8004664:	08004823 	.word	0x08004823
 8004668:	0800471f 	.word	0x0800471f
 800466c:	08004823 	.word	0x08004823
 8004670:	08004823 	.word	0x08004823
 8004674:	08004823 	.word	0x08004823
 8004678:	0800475f 	.word	0x0800475f
 800467c:	08004823 	.word	0x08004823
 8004680:	08004823 	.word	0x08004823
 8004684:	08004823 	.word	0x08004823
 8004688:	080047a1 	.word	0x080047a1
 800468c:	08004823 	.word	0x08004823
 8004690:	08004823 	.word	0x08004823
 8004694:	08004823 	.word	0x08004823
 8004698:	080047e1 	.word	0x080047e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa0c 	bl	8004ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e0a5      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa72 	bl	8004bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      break;
 800471c:	e084      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fad1 	bl	8004ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
      break;
 800475c:	e064      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb2f 	bl	8004dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
      break;
 800479e:	e043      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb72 	bl	8004e90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047de:	e023      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fbb0 	bl	8004f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004820:	e002      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      break;
 8004826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop

0800483c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b6      	b.n	80049c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004894:	d03e      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xd8>
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	f200 8087 	bhi.w	80049ac <HAL_TIM_ConfigClockSource+0x170>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	f000 8086 	beq.w	80049b2 <HAL_TIM_ConfigClockSource+0x176>
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d87f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d01a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0xaa>
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d87b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d050      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x11e>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d877      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d03c      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xfe>
 80048c0:	2b50      	cmp	r3, #80	; 0x50
 80048c2:	d873      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d058      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x13e>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d86f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d064      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d86b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d060      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d867      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d05c      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d05a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048e4:	e062      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f000 fc03 	bl	8005100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	609a      	str	r2, [r3, #8]
      break;
 8004912:	e04f      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f000 fbec 	bl	8005100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004936:	609a      	str	r2, [r3, #8]
      break;
 8004938:	e03c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	f000 fb60 	bl	800500c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2150      	movs	r1, #80	; 0x50
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fbb9 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004958:	e02c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fb7f 	bl	800506a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2160      	movs	r1, #96	; 0x60
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fba9 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004978:	e01c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fb40 	bl	800500c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb99 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004998:	e00c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f000 fb90 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 80049aa:	e003      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a32      	ldr	r2, [pc, #200]	; (8004aac <TIM_Base_SetConfig+0xdc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0x28>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0x28>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <TIM_Base_SetConfig+0xe0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_Base_SetConfig+0xdc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0x6a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0x6a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <TIM_Base_SetConfig+0xe0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0x6a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <TIM_Base_SetConfig+0xe4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0x6a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <TIM_Base_SetConfig+0xe8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0x6a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a21      	ldr	r2, [pc, #132]	; (8004abc <TIM_Base_SetConfig+0xec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <TIM_Base_SetConfig+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_Base_SetConfig+0xc0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <TIM_Base_SetConfig+0xe4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_Base_SetConfig+0xc0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <TIM_Base_SetConfig+0xe8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0xc0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <TIM_Base_SetConfig+0xec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 0302 	bic.w	r3, r3, #2
 8004b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <TIM_OC1_SetConfig+0xfc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_OC1_SetConfig+0x78>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <TIM_OC1_SetConfig+0x100>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_OC1_SetConfig+0x78>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_OC1_SetConfig+0x104>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC1_SetConfig+0x78>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_OC1_SetConfig+0x108>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10c      	bne.n	8004b52 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0308 	bic.w	r3, r3, #8
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <TIM_OC1_SetConfig+0xfc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_OC1_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <TIM_OC1_SetConfig+0x100>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_OC1_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <TIM_OC1_SetConfig+0x104>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC1_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <TIM_OC1_SetConfig+0x108>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d111      	bne.n	8004b96 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0210 	bic.w	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0320 	bic.w	r3, r3, #32
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <TIM_OC2_SetConfig+0xf0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <TIM_OC2_SetConfig+0xf0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_OC2_SetConfig+0xa0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <TIM_OC2_SetConfig+0xf4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_OC2_SetConfig+0xa0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <TIM_OC2_SetConfig+0xf8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC2_SetConfig+0xa0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <TIM_OC2_SetConfig+0xfc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d113      	bne.n	8004c94 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c72:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c7a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <TIM_OC3_SetConfig+0xec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10d      	bne.n	8004d4a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d48:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC3_SetConfig+0xec>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_OC3_SetConfig+0x9e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC3_SetConfig+0xf0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_OC3_SetConfig+0x9e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC3_SetConfig+0xf4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_OC3_SetConfig+0x9e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <TIM_OC3_SetConfig+0xf8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d113      	bne.n	8004d92 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800

08004dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <TIM_OC4_SetConfig+0xb8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_OC4_SetConfig+0x7c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <TIM_OC4_SetConfig+0xbc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_OC4_SetConfig+0x7c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <TIM_OC4_SetConfig+0xc0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC4_SetConfig+0x7c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <TIM_OC4_SetConfig+0xc4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800

08004e90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ed4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <TIM_OC5_SetConfig+0xac>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_OC5_SetConfig+0x72>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <TIM_OC5_SetConfig+0xb0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_OC5_SetConfig+0x72>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <TIM_OC5_SetConfig+0xb4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC5_SetConfig+0x72>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a12      	ldr	r2, [pc, #72]	; (8004f48 <TIM_OC5_SetConfig+0xb8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d109      	bne.n	8004f16 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	051b      	lsls	r3, r3, #20
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <TIM_OC6_SetConfig+0xb0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x74>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <TIM_OC6_SetConfig+0xb4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x74>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a14      	ldr	r2, [pc, #80]	; (8005004 <TIM_OC6_SetConfig+0xb8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x74>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a13      	ldr	r2, [pc, #76]	; (8005008 <TIM_OC6_SetConfig+0xbc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800

0800500c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 030a 	bic.w	r3, r3, #10
 8005048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0210 	bic.w	r2, r3, #16
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	031b      	lsls	r3, r3, #12
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f043 0307 	orr.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	609a      	str	r2, [r3, #8]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	431a      	orrs	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	609a      	str	r2, [r3, #8]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005154:	2302      	movs	r3, #2
 8005156:	e054      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a24      	ldr	r2, [pc, #144]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005188:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a17      	ldr	r2, [pc, #92]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40014000 	.word	0x40014000

0800521c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e040      	b.n	80052b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb ff68 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	; 0x24
 8005248:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f82c 	bl	80052b8 <UART_SetConfig>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e022      	b.n	80052b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f956 	bl	8005524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9dd 	bl	8005668 <UART_CheckIdleState>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b8a      	ldr	r3, [pc, #552]	; (800550c <UART_SetConfig+0x254>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a78      	ldr	r2, [pc, #480]	; (8005510 <UART_SetConfig+0x258>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d120      	bne.n	8005376 <UART_SetConfig+0xbe>
 8005334:	4b77      	ldr	r3, [pc, #476]	; (8005514 <UART_SetConfig+0x25c>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d817      	bhi.n	8005370 <UART_SetConfig+0xb8>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <UART_SetConfig+0x90>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005359 	.word	0x08005359
 800534c:	08005365 	.word	0x08005365
 8005350:	0800536b 	.word	0x0800536b
 8005354:	0800535f 	.word	0x0800535f
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e01d      	b.n	800539a <UART_SetConfig+0xe2>
 800535e:	2302      	movs	r3, #2
 8005360:	77fb      	strb	r3, [r7, #31]
 8005362:	e01a      	b.n	800539a <UART_SetConfig+0xe2>
 8005364:	2304      	movs	r3, #4
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e017      	b.n	800539a <UART_SetConfig+0xe2>
 800536a:	2308      	movs	r3, #8
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e014      	b.n	800539a <UART_SetConfig+0xe2>
 8005370:	2310      	movs	r3, #16
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e011      	b.n	800539a <UART_SetConfig+0xe2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a67      	ldr	r2, [pc, #412]	; (8005518 <UART_SetConfig+0x260>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d102      	bne.n	8005386 <UART_SetConfig+0xce>
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e009      	b.n	800539a <UART_SetConfig+0xe2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a64      	ldr	r2, [pc, #400]	; (800551c <UART_SetConfig+0x264>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d102      	bne.n	8005396 <UART_SetConfig+0xde>
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e001      	b.n	800539a <UART_SetConfig+0xe2>
 8005396:	2310      	movs	r3, #16
 8005398:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a2:	d15b      	bne.n	800545c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80053a4:	7ffb      	ldrb	r3, [r7, #31]
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d827      	bhi.n	80053fa <UART_SetConfig+0x142>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xf8>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	080053dd 	.word	0x080053dd
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053fb 	.word	0x080053fb
 80053c0:	080053eb 	.word	0x080053eb
 80053c4:	080053fb 	.word	0x080053fb
 80053c8:	080053fb 	.word	0x080053fb
 80053cc:	080053fb 	.word	0x080053fb
 80053d0:	080053f3 	.word	0x080053f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe fe56 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 80053d8:	61b8      	str	r0, [r7, #24]
        break;
 80053da:	e013      	b.n	8005404 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053dc:	f7fe fe74 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 80053e0:	61b8      	str	r0, [r7, #24]
        break;
 80053e2:	e00f      	b.n	8005404 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e4:	4b4e      	ldr	r3, [pc, #312]	; (8005520 <UART_SetConfig+0x268>)
 80053e6:	61bb      	str	r3, [r7, #24]
        break;
 80053e8:	e00c      	b.n	8005404 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ea:	f7fe fdd3 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 80053ee:	61b8      	str	r0, [r7, #24]
        break;
 80053f0:	e008      	b.n	8005404 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f6:	61bb      	str	r3, [r7, #24]
        break;
 80053f8:	e004      	b.n	8005404 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	77bb      	strb	r3, [r7, #30]
        break;
 8005402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d074      	beq.n	80054f4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	005a      	lsls	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	fbb2 f3f3 	udiv	r3, r2, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b0f      	cmp	r3, #15
 8005426:	d916      	bls.n	8005456 <UART_SetConfig+0x19e>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542e:	d212      	bcs.n	8005456 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f023 030f 	bic.w	r3, r3, #15
 8005438:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	b29a      	uxth	r2, r3
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	4313      	orrs	r3, r2
 800544a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	89fa      	ldrh	r2, [r7, #14]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	e04e      	b.n	80054f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	77bb      	strb	r3, [r7, #30]
 800545a:	e04b      	b.n	80054f4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	2b08      	cmp	r3, #8
 8005460:	d827      	bhi.n	80054b2 <UART_SetConfig+0x1fa>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0x1b0>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	0800548d 	.word	0x0800548d
 800546c:	08005495 	.word	0x08005495
 8005470:	0800549d 	.word	0x0800549d
 8005474:	080054b3 	.word	0x080054b3
 8005478:	080054a3 	.word	0x080054a3
 800547c:	080054b3 	.word	0x080054b3
 8005480:	080054b3 	.word	0x080054b3
 8005484:	080054b3 	.word	0x080054b3
 8005488:	080054ab 	.word	0x080054ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7fe fdfa 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8005490:	61b8      	str	r0, [r7, #24]
        break;
 8005492:	e013      	b.n	80054bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005494:	f7fe fe18 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005498:	61b8      	str	r0, [r7, #24]
        break;
 800549a:	e00f      	b.n	80054bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800549c:	4b20      	ldr	r3, [pc, #128]	; (8005520 <UART_SetConfig+0x268>)
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e00c      	b.n	80054bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a2:	f7fe fd77 	bl	8003f94 <HAL_RCC_GetSysClockFreq>
 80054a6:	61b8      	str	r0, [r7, #24]
        break;
 80054a8:	e008      	b.n	80054bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ae:	61bb      	str	r3, [r7, #24]
        break;
 80054b0:	e004      	b.n	80054bc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	77bb      	strb	r3, [r7, #30]
        break;
 80054ba:	bf00      	nop
    }

    if (pclk != 0U)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d018      	beq.n	80054f4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	085a      	lsrs	r2, r3, #1
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	441a      	add	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d908      	bls.n	80054f0 <UART_SetConfig+0x238>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d204      	bcs.n	80054f0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	e001      	b.n	80054f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005500:	7fbb      	ldrb	r3, [r7, #30]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	efff69f3 	.word	0xefff69f3
 8005510:	40013800 	.word	0x40013800
 8005514:	40021000 	.word	0x40021000
 8005518:	40004400 	.word	0x40004400
 800551c:	40004800 	.word	0x40004800
 8005520:	007a1200 	.word	0x007a1200

08005524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01a      	beq.n	800563a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005622:	d10a      	bne.n	800563a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005678:	f7fb fe64 	bl	8001344 <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b08      	cmp	r3, #8
 800568a:	d10e      	bne.n	80056aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800568c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f82d 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e023      	b.n	80056f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d10e      	bne.n	80056d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f817 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e00d      	b.n	80056f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b09c      	sub	sp, #112	; 0x70
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	e0a5      	b.n	8005858 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	f000 80a1 	beq.w	8005858 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fb fe15 	bl	8001344 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <UART_WaitOnFlagUntilTimeout+0x32>
 8005726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005728:	2b00      	cmp	r3, #0
 800572a:	d13e      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005740:	667b      	str	r3, [r7, #100]	; 0x64
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800577e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800578c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e067      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d04f      	beq.n	8005858 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d147      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
 80057f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	613b      	str	r3, [r7, #16]
   return(result);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	66bb      	str	r3, [r7, #104]	; 0x68
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005824:	623a      	str	r2, [r7, #32]
 8005826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69f9      	ldr	r1, [r7, #28]
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	61bb      	str	r3, [r7, #24]
   return(result);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e010      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	429a      	cmp	r2, r3
 8005874:	f43f af4a 	beq.w	800570c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3770      	adds	r7, #112	; 0x70
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	; (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	; (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	; (80058c8 <__libc_init_array+0x44>)
 8005898:	f000 f820 	bl	80058dc <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	0800592c 	.word	0x0800592c
 80058c0:	0800592c 	.word	0x0800592c
 80058c4:	0800592c 	.word	0x0800592c
 80058c8:	08005930 	.word	0x08005930

080058cc <memset>:
 80058cc:	4402      	add	r2, r0
 80058ce:	4603      	mov	r3, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
