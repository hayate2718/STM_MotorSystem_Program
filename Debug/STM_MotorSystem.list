
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001833a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf5  00000000  00000000  00038376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0003b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  0003c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed3b  00000000  00000000  0003cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014108  00000000  00000000  0005bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af58d  00000000  00000000  0006fceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011f278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004184  00000000  00000000  0011f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005988 	.word	0x08005988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005988 	.word	0x08005988

080001c8 <_ZN3PID9PID_set_pEf>:
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
{
	return;
}

inline void PID::PID_set_p(float p){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	683a      	ldr	r2, [r7, #0]
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <_ZN15STM_MotorSystem12set_velocityEf>:
			TIM_HandleTypeDef *_encoder_timer,
			TIM_HandleTypeDef *_pwm_timer,
			uint32_t TIM_CHANNEL_n
			); //コンストラクタ

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
 80001ee:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_tar = velocity_tar;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	605a      	str	r2, [r3, #4]

	}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>:
	ALERT_FF2 = 0x0020,
	ALERT_FF1_FF2 = 0x0030,

}cmd;

USER_CAN::USER_CAN(CAN_HandleTypeDef * _use_hcan){
 8000204:	b580      	push	{r7, lr}
 8000206:	b092      	sub	sp, #72	; 0x48
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]

	this->_use_hcan = _use_hcan;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	609a      	str	r2, [r3, #8]

	CAN_FilterTypeDef filter;
	_filter = &filter;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f107 0208 	add.w	r2, r7, #8
 800021a:	601a      	str	r2, [r3, #0]

	CAN_TxHeaderTypeDef TxHeader;
	_TxHeader = &TxHeader;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000222:	605a      	str	r2, [r3, #4]

	filter.FilterActivation = 0; //filter enable
 8000224:	2300      	movs	r3, #0
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterBank = 0; //used filterbank 0
 8000228:	2300      	movs	r3, #0
 800022a:	61fb      	str	r3, [r7, #28]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 800022c:	2300      	movs	r3, #0
 800022e:	61bb      	str	r3, [r7, #24]
	filter.FilterMode = 0; //filter mode is mask mode
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
	filter.FilterScale = 0; //filterscale is dual 16bits
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterIdHigh = get_id_CAN();
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f825 	bl	8000288 <_ZN8USER_CAN10get_id_CANEv>
 800023e:	4603      	mov	r3, r0
 8000240:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdHigh = 15;
 8000242:	230f      	movs	r3, #15
 8000244:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(this->_use_hcan, _filter);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4619      	mov	r1, r3
 8000250:	4610      	mov	r0, r2
 8000252:	f001 fda8 	bl	8001da6 <HAL_CAN_ConfigFilter>

	TxHeader.DLC = 4; //データ長（4byte）
 8000256:	2304      	movs	r3, #4
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = 0; //標準識別子
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.RTR = 0; //データフレーム (現状モータシステムからホストにデータ要求はしないと思うから)
 800025e:	2300      	movs	r3, #0
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 8000262:	2300      	movs	r3, #0
 8000264:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	HAL_CAN_Start(this->_use_hcan);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fe64 	bl	8001f3a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(this->_use_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	2102      	movs	r1, #2
 8000278:	4618      	mov	r0, r3
 800027a:	f001 ffb4 	bl	80021e6 <HAL_CAN_ActivateNotification>

}
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4618      	mov	r0, r3
 8000282:	3748      	adds	r7, #72	; 0x48
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <_ZN8USER_CAN10get_id_CANEv>:
	_TxHeader->StdId = cmd+get_id_CAN();

	HAL_CAN_AddTxMessage(_use_hcan,_TxHeader, tx.low_data_raw,&mailbox);
}

uint8_t USER_CAN::get_id_CAN(){
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	id_set id;
	id.bit0 = HAL_GPIO_ReadPin(GPIO_idbit0,GPIO_PIN_idbit0);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	8a1b      	ldrh	r3, [r3, #16]
 8000298:	4619      	mov	r1, r3
 800029a:	4610      	mov	r0, r2
 800029c:	f002 fc7c 	bl	8002b98 <HAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	7b3b      	ldrb	r3, [r7, #12]
 80002aa:	f362 0300 	bfi	r3, r2, #0, #1
 80002ae:	733b      	strb	r3, [r7, #12]
	id.bit1 = HAL_GPIO_ReadPin(GPIO_idbit1,GPIO_PIN_idbit1);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	695a      	ldr	r2, [r3, #20]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	8b1b      	ldrh	r3, [r3, #24]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4610      	mov	r0, r2
 80002bc:	f002 fc6c 	bl	8002b98 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	7b3b      	ldrb	r3, [r7, #12]
 80002ca:	f362 0341 	bfi	r3, r2, #1, #1
 80002ce:	733b      	strb	r3, [r7, #12]
	id.bit2 = HAL_GPIO_ReadPin(GPIO_idbit2,GPIO_PIN_idbit2);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69da      	ldr	r2, [r3, #28]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	8c1b      	ldrh	r3, [r3, #32]
 80002d8:	4619      	mov	r1, r3
 80002da:	4610      	mov	r0, r2
 80002dc:	f002 fc5c 	bl	8002b98 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	7b3b      	ldrb	r3, [r7, #12]
 80002ea:	f362 0382 	bfi	r3, r2, #2, #1
 80002ee:	733b      	strb	r3, [r7, #12]
	id.bit3 = HAL_GPIO_ReadPin(GPIO_idbit3,GPIO_PIN_idbit3);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80002f8:	4619      	mov	r1, r3
 80002fa:	4610      	mov	r0, r2
 80002fc:	f002 fc4c 	bl	8002b98 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2da      	uxtb	r2, r3
 8000308:	7b3b      	ldrb	r3, [r7, #12]
 800030a:	f362 03c3 	bfi	r3, r2, #3, #1
 800030e:	733b      	strb	r3, [r7, #12]
	return id.all_data;
 8000310:	7b3b      	ldrb	r3, [r7, #12]
 8000312:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000316:	b2db      	uxtb	r3, r3
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <HAL_CAN_RxFifo0MsgPendingCallback>:

void USER_CAN::set_ide_CAN(uint32_t ide){
	_TxHeader->IDE = ide;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000320:	b580      	push	{r7, lr}
 8000322:	b08e      	sub	sp, #56	; 0x38
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;
	uint32_t cmd;
	STM_MotorSystem *ms = _ms;
 8000328:	4b81      	ldr	r3, [pc, #516]	; (8000530 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	f107 0214 	add.w	r2, r7, #20
 8000336:	2100      	movs	r1, #0
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f001 fe42 	bl	8001fc2 <HAL_CAN_GetRxMessage>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	bf0c      	ite	eq
 8000344:	2301      	moveq	r3, #1
 8000346:	2300      	movne	r3, #0
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	f000 80eb 	beq.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
		cmd = RxHeader.StdId & 0xfff0;
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000356:	4013      	ands	r3, r2
 8000358:	633b      	str	r3, [r7, #48]	; 0x30
		switch(cmd){
 800035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800035c:	f24f 1240 	movw	r2, #61760	; 0xf140
 8000360:	4293      	cmp	r3, r2
 8000362:	f000 80c3 	beq.w	80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>
 8000366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000368:	f24f 1240 	movw	r2, #61760	; 0xf140
 800036c:	4293      	cmp	r3, r2
 800036e:	f200 80da 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000374:	f24f 1230 	movw	r2, #61744	; 0xf130
 8000378:	4293      	cmp	r3, r2
 800037a:	f000 80b9 	beq.w	80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>
 800037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000380:	f24f 1230 	movw	r2, #61744	; 0xf130
 8000384:	4293      	cmp	r3, r2
 8000386:	f200 80ce 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038c:	f24f 1220 	movw	r2, #61728	; 0xf120
 8000390:	4293      	cmp	r3, r2
 8000392:	f000 80af 	beq.w	80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8000396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000398:	f24f 1220 	movw	r2, #61728	; 0xf120
 800039c:	4293      	cmp	r3, r2
 800039e:	f200 80c2 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80003a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003a4:	f24f 1210 	movw	r2, #61712	; 0xf110
 80003a8:	4293      	cmp	r3, r2
 80003aa:	f000 80a5 	beq.w	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
 80003ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003b0:	f24f 1210 	movw	r2, #61712	; 0xf110
 80003b4:	4293      	cmp	r3, r2
 80003b6:	f200 80b6 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80003ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003bc:	f24f 0240 	movw	r2, #61504	; 0xf040
 80003c0:	4293      	cmp	r3, r2
 80003c2:	f000 809b 	beq.w	80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
 80003c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c8:	f24f 0240 	movw	r2, #61504	; 0xf040
 80003cc:	4293      	cmp	r3, r2
 80003ce:	f200 80aa 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80003d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003d4:	f24f 0230 	movw	r2, #61488	; 0xf030
 80003d8:	4293      	cmp	r3, r2
 80003da:	f000 8091 	beq.w	8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 80003de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e0:	f24f 0230 	movw	r2, #61488	; 0xf030
 80003e4:	4293      	cmp	r3, r2
 80003e6:	f200 809e 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80003ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ec:	f24f 0220 	movw	r2, #61472	; 0xf020
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d071      	beq.n	80004d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 80003f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f6:	f24f 0220 	movw	r2, #61472	; 0xf020
 80003fa:	4293      	cmp	r3, r2
 80003fc:	f200 8093 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000402:	f24f 0210 	movw	r2, #61456	; 0xf010
 8000406:	4293      	cmp	r3, r2
 8000408:	d05e      	beq.n	80004c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 800040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040c:	f24f 0210 	movw	r2, #61456	; 0xf010
 8000410:	4293      	cmp	r3, r2
 8000412:	f200 8088 	bhi.w	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000418:	f24e 2210 	movw	r2, #57872	; 0xe210
 800041c:	4293      	cmp	r3, r2
 800041e:	d071      	beq.n	8000504 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 8000420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000422:	f24e 2210 	movw	r2, #57872	; 0xe210
 8000426:	4293      	cmp	r3, r2
 8000428:	d87d      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800042c:	f24e 1230 	movw	r2, #57648	; 0xe130
 8000430:	4293      	cmp	r3, r2
 8000432:	d069      	beq.n	8000508 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
 8000434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000436:	f24e 1230 	movw	r2, #57648	; 0xe130
 800043a:	4293      	cmp	r3, r2
 800043c:	d873      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800043e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000440:	f24e 1220 	movw	r2, #57632	; 0xe120
 8000444:	4293      	cmp	r3, r2
 8000446:	d061      	beq.n	800050c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8000448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800044a:	f24e 1220 	movw	r2, #57632	; 0xe120
 800044e:	4293      	cmp	r3, r2
 8000450:	d869      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000454:	f24e 1210 	movw	r2, #57616	; 0xe110
 8000458:	4293      	cmp	r3, r2
 800045a:	d059      	beq.n	8000510 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
 800045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045e:	f24e 1210 	movw	r2, #57616	; 0xe110
 8000462:	4293      	cmp	r3, r2
 8000464:	d85f      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 8000466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000468:	f24e 0240 	movw	r2, #57408	; 0xe040
 800046c:	4293      	cmp	r3, r2
 800046e:	d051      	beq.n	8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
 8000470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000472:	f24e 0240 	movw	r2, #57408	; 0xe040
 8000476:	4293      	cmp	r3, r2
 8000478:	d855      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800047c:	f24e 0230 	movw	r2, #57392	; 0xe030
 8000480:	4293      	cmp	r3, r2
 8000482:	d049      	beq.n	8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
 8000484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000486:	f24e 0230 	movw	r2, #57392	; 0xe030
 800048a:	4293      	cmp	r3, r2
 800048c:	d84b      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000490:	f24e 0220 	movw	r2, #57376	; 0xe020
 8000494:	4293      	cmp	r3, r2
 8000496:	d041      	beq.n	800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
 8000498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800049a:	f24e 0220 	movw	r2, #57376	; 0xe020
 800049e:	4293      	cmp	r3, r2
 80004a0:	d841      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004a4:	f24e 0210 	movw	r2, #57360	; 0xe010
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d039      	beq.n	8000520 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>
 80004ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ae:	f24e 0210 	movw	r2, #57360	; 0xe010
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d837      	bhi.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 80004b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b8:	f241 0210 	movw	r2, #4112	; 0x1010
 80004bc:	4293      	cmp	r3, r2
 80004be:	d031      	beq.n	8000524 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80004c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c2:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020

			case SYSTEM_INIT:
				break;

			case SYSTEM_START:
				break;
 80004c6:	e02e      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				ms->set_velocity(rx.low_data);
 80004c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80004cc:	eeb0 0a67 	vmov.f32	s0, s15
 80004d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004d2:	f7ff fe88 	bl	80001e6 <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 80004d6:	e026      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				ms->pid_velocity.PID_set_p(rx.low_data);
 80004d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004da:	3310      	adds	r3, #16
 80004dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80004e0:	eeb0 0a67 	vmov.f32	s0, s15
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fe6f 	bl	80001c8 <_ZN3PID9PID_set_pEf>
				break;
 80004ea:	e01c      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80004ec:	bf00      	nop
 80004ee:	e01a      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80004f0:	bf00      	nop
 80004f2:	e018      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80004f4:	bf00      	nop
 80004f6:	e016      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80004f8:	bf00      	nop
 80004fa:	e014      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 80004fc:	bf00      	nop
 80004fe:	e012      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000500:	bf00      	nop
 8000502:	e010      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000504:	bf00      	nop
 8000506:	e00e      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000508:	bf00      	nop
 800050a:	e00c      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 800050c:	bf00      	nop
 800050e:	e00a      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000510:	bf00      	nop
 8000512:	e008      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000514:	bf00      	nop
 8000516:	e006      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000518:	bf00      	nop
 800051a:	e004      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 800051c:	bf00      	nop
 800051e:	e002      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000520:	bf00      	nop
 8000522:	e000      	b.n	8000526 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
				break;
 8000524:	bf00      	nop
			}

		}
}
 8000526:	bf00      	nop
 8000528:	3738      	adds	r7, #56	; 0x38
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200001bc 	.word	0x200001bc

08000534 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>:
 *      Author: 0_hayate
 */

#include <ENCODER.hpp>

ENCODER::ENCODER(TIM_HandleTypeDef *_encoder_timer)
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
{
	this->_encoder_timer = _encoder_timer;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	605a      	str	r2, [r3, #4]
	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054c:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	0852      	lsrs	r2, r2, #1
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	085a      	lsrs	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]

	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	213c      	movs	r1, #60	; 0x3c
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fff5 	bl	8004558 <HAL_TIM_Encoder_Start>

	return;
}
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_ZN3PWMC1EP17TIM_HandleTypeDefm>:
 */


#include <PWM.hpp>

PWM::PWM(TIM_HandleTypeDef *_pwm_timer,uint32_t TIM_CHANNEL_n ){ //TIMxCHn n=1,2,3...
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	this->_pwm_timer = _pwm_timer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0c      	cmp	r3, #12
 800058e:	d835      	bhi.n	80005fc <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x84>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x20>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005cd 	.word	0x080005cd
 800059c:	080005fd 	.word	0x080005fd
 80005a0:	080005fd 	.word	0x080005fd
 80005a4:	080005fd 	.word	0x080005fd
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	080005fd 	.word	0x080005fd
 80005b0:	080005fd 	.word	0x080005fd
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	080005e5 	.word	0x080005e5
 80005bc:	080005fd 	.word	0x080005fd
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	080005fd 	.word	0x080005fd
 80005c8:	080005f1 	.word	0x080005f1
	switch(TIM_CHANNEL_n){
	case TIM_CHANNEL_1:
#ifndef ccr
#define ccr this->_pwm_timer->Instance->CCR1
#endif
		ccr = 0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80005d6:	e012      	b.n	80005fe <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x86>

	case TIM_CHANNEL_2:
#ifndef ccr
#define ccr this->_pwm_timer->Instance->CCR2
#endif
		ccr = 0;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80005e2:	e00c      	b.n	80005fe <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x86>

	case TIM_CHANNEL_3:
#ifndef ccr
#define ccr this->_pwm_timer->Instance->CCR3
#endif
		ccr = 0;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80005ee:	e006      	b.n	80005fe <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x86>

	case TIM_CHANNEL_4:
#ifndef ccr
#define ccr this->_pwm_timer->Instance->CCR4
#endif
		ccr = 0;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2200      	movs	r2, #0
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80005fa:	e000      	b.n	80005fe <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x86>

	default:
		break;
 80005fc:	bf00      	nop

	}

	HAL_TIM_PWM_Start(_pwm_timer, TIM_CHANNEL_n);
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	68b8      	ldr	r0, [r7, #8]
 8000602:	f003 fe17 	bl	8004234 <HAL_TIM_PWM_Start>
}
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6178      	str	r0, [r7, #20]
 8000618:	ed87 0a04 	vstr	s0, [r7, #16]
 800061c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000620:	ed87 1a02 	vstr	s2, [r7, #8]
 8000624:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f04f 0200 	mov.w	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
}
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem(ADC_HandleTypeDef *_hadc,
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
use_pwm(_pwm_timer,TIM_CHANNEL_n),
use_encoder(_encoder_timer),
velocity_ref(0),
velocity_tar(0),
current_ref(0),
volt(0)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f04f 0200 	mov.w	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f04f 0200 	mov.w	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3310      	adds	r3, #16
 800069a:	eddf 1a28 	vldr	s3, [pc, #160]	; 800073c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd4>
 800069e:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006a2:	eddf 0a27 	vldr	s1, [pc, #156]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006a6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffb0 	bl	8000610 <_ZN3PIDC1Effff>
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	332c      	adds	r3, #44	; 0x2c
 80006b4:	eddf 1a21 	vldr	s3, [pc, #132]	; 800073c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd4>
 80006b8:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006bc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006c0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000740 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xd8>
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffa3 	bl	8000610 <_ZN3PIDC1Effff>
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3348      	adds	r3, #72	; 0x48
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd97 	bl	8000204 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3374      	adds	r3, #116	; 0x74
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	69b9      	ldr	r1, [r7, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff4a 	bl	8000578 <_ZN3PWMC1EP17TIM_HandleTypeDefm>
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	337c      	adds	r3, #124	; 0x7c
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff22 	bl	8000534 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>
{
	//can id set
	use_can.GPIO_idbit0 = GPIOB;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xdc>)
 80006f4:	655a      	str	r2, [r3, #84]	; 0x54
	use_can.GPIO_idbit1 = GPIOB;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m+0xdc>)
 80006fa:	65da      	str	r2, [r3, #92]	; 0x5c
	use_can.GPIO_idbit2 = GPIOA;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000702:	665a      	str	r2, [r3, #100]	; 0x64
	use_can.GPIO_idbit3 = GPIOA;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800070a:	66da      	str	r2, [r3, #108]	; 0x6c
	use_can.GPIO_PIN_idbit0 = GPIO_PIN_1;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2202      	movs	r2, #2
 8000710:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	use_can.GPIO_PIN_idbit1 = GPIO_PIN_8;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800071a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	use_can.GPIO_PIN_idbit2 = GPIO_PIN_9;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	use_can.GPIO_PIN_idbit3 = GPIO_PIN_10;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70


}
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	38d1b717 	.word	0x38d1b717
 8000740:	00000000 	.word	0x00000000
 8000744:	48000400 	.word	0x48000400

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a4      	sub	sp, #144	; 0x90
 800074c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fd0f 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f825 	bl	80007a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 fa57 	bl	8000c08 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 800075a:	f000 f88f 	bl	800087c <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 800075e:	f000 f8f5 	bl	800094c <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000762:	f000 f92f 	bl	80009c4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000766:	f000 f98b 	bl	8000a80 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800076a:	f000 fa19 	bl	8000ba0 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms(&hadc2,&hcan,&htim2,&htim3,TIM_CHANNEL_3);
 800076e:	1d38      	adds	r0, r7, #4
 8000770:	2308      	movs	r3, #8
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <main+0x44>)
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <main+0x48>)
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <main+0x4c>)
 800077c:	4906      	ldr	r1, [pc, #24]	; (8000798 <main+0x50>)
 800077e:	f7ff ff73 	bl	8000668 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_m>
  _ms = &use_ms;
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <main+0x54>)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x40>
 800078a:	bf00      	nop
 800078c:	200000ec 	.word	0x200000ec
 8000790:	200000a0 	.word	0x200000a0
 8000794:	20000078 	.word	0x20000078
 8000798:	20000028 	.word	0x20000028
 800079c:	200001bc 	.word	0x200001bc

080007a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 f8e2 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 f9fc 	bl	8002bf8 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000810:	f000 fa74 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f003 f8e9 	bl	8003a08 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000846:	f000 fa59 	bl	8000cfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800084a:	2381      	movs	r3, #129	; 0x81
 800084c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800084e:	2301      	movs	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000856:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fb0c 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000870:	f000 fa44 	bl	8000cfc <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	; 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 8000894:	4a2c      	ldr	r2, [pc, #176]	; (8000948 <_ZL12MX_ADC2_Initv+0xcc>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008da:	2204      	movs	r2, #4
 80008dc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 80008ec:	f000 fca6 	bl	800123c <HAL_ADC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8000900:	f000 f9fc 	bl	8000cfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000904:	2302      	movs	r3, #2
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800090c:	2301      	movs	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <_ZL12MX_ADC2_Initv+0xc8>)
 8000922:	f000 fe1d 	bl	8001560 <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 8000936:	f000 f9e1 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000028 	.word	0x20000028
 8000948:	50000100 	.word	0x50000100

0800094c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000952:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <_ZL11MX_CAN_Initv+0x74>)
 8000954:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000958:	2204      	movs	r2, #4
 800095a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 800096a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800096e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000972:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000976:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000980:	2201      	movs	r2, #1
 8000982:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000986:	2201      	movs	r2, #1
 8000988:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 800098c:	2201      	movs	r2, #1
 800098e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 8000998:	2200      	movs	r2, #0
 800099a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <_ZL11MX_CAN_Initv+0x70>)
 800099e:	f001 f907 	bl	8001bb0 <HAL_CAN_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f9a3 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000078 	.word	0x20000078
 80009c0:	40006400 	.word	0x40006400

080009c4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2224      	movs	r2, #36	; 0x24
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 ffd0 	bl	8005978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a22:	2301      	movs	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a36:	f003 fce9 	bl	800440c <HAL_TIM_Encoder_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000a4a:	f000 f957 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a5c:	f004 fbc6 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000a70:	f000 f944 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000a0 	.word	0x200000a0

08000a80 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ab4:	4a39      	ldr	r2, [pc, #228]	; (8000b9c <_ZL12MX_TIM3_Initv+0x11c>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ab8:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ac4:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad8:	482f      	ldr	r0, [pc, #188]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000ada:	f003 faf3 	bl	80040c4 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000aee:	f000 f905 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000b00:	f003 fecc 	bl	800489c <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8000b14:	f000 f8f2 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b18:	481f      	ldr	r0, [pc, #124]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000b1a:	f003 fb2a 	bl	8004172 <HAL_TIM_PWM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8000b2e:	f000 f8e5 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4815      	ldr	r0, [pc, #84]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000b42:	f004 fb53 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000b56:	f000 f8d1 	bl	8000cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000b72:	f003 fd7f 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8000b86:	f000 f8b9 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <_ZL12MX_TIM3_Initv+0x118>)
 8000b8c:	f000 f9fa 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000b90:	bf00      	nop
 8000b92:	3738      	adds	r7, #56	; 0x38
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000ec 	.word	0x200000ec
 8000b9c:	40000400 	.word	0x40000400

08000ba0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000be4:	f004 fb70 	bl	80052c8 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 f880 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000138 	.word	0x20000138
 8000c04:	40013800 	.word	0x40013800

08000c08 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a34      	ldr	r2, [pc, #208]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xec>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f001 ffab 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2130      	movs	r1, #48	; 0x30
 8000c76:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <_ZL12MX_GPIO_Initv+0xf0>)
 8000c78:	f001 ffa6 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000c7c:	f240 730c 	movw	r3, #1804	; 0x70c
 8000c80:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f001 fe0e 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f001 fdff 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <_ZL12MX_GPIO_Initv+0xf0>)
 8000cca:	f001 fdf3 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cce:	2330      	movs	r3, #48	; 0x30
 8000cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <_ZL12MX_GPIO_Initv+0xf0>)
 8000ce6:	f001 fde5 	bl	80028b4 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0x74>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d124      	bne.n	8000dbc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da2:	2320      	movs	r3, #32
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f001 fd7c 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	50000100 	.word	0x50000100
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_CAN_MspInit+0xa0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d139      	bne.n	8000e62 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_CAN_MspInit+0xa4>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e30:	2309      	movs	r3, #9
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f001 fd39 	bl	80028b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2014      	movs	r0, #20
 8000e48:	f001 fcfd 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f001 fd16 	bl	800287e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2015      	movs	r0, #21
 8000e58:	f001 fcf5 	bl	8002846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000e5c:	2015      	movs	r0, #21
 8000e5e:	f001 fd0e 	bl	800287e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40006400 	.word	0x40006400
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_TIM_Base_MspInit+0x80>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10c      	bne.n	8000ea0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e9e:	e022      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_TIM_Base_MspInit+0x88>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
}
 8000ec2:	e010      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM15)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_TIM_Base_MspInit+0x84>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40012c00 	.word	0x40012c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40000400 	.word	0x40000400
 8000f00:	40014000 	.word	0x40014000

08000f04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f24:	d128      	bne.n	8000f78 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f56:	2303      	movs	r3, #3
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f66:	2301      	movs	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fc9e 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_TIM_MspPostInit+0x64>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11b      	bne.n	8000fde <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fda:	f001 fc6b 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_UART_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_UART_MspInit+0x80>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <HAL_UART_MspInit+0x80>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_UART_MspInit+0x80>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_UART_MspInit+0x80>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_UART_MspInit+0x80>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_UART_MspInit+0x80>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_UART_MspInit+0x84>)
 8001062:	f001 fc27 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013800 	.word	0x40013800
 8001074:	40021000 	.word	0x40021000
 8001078:	48000400 	.word	0x48000400

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f898 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <CAN_RX0_IRQHandler+0x10>)
 80010d6:	f001 f8ac 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000078 	.word	0x20000078

080010e4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <CAN_RX1_IRQHandler+0x10>)
 80010ea:	f001 f8a2 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000078 	.word	0x20000078

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f7ff ffd7 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 fbf1 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff fafb 	bl	8000748 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001154:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001160:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8001164:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001168:	200001c4 	.word	0x200001c4

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f001 fb55 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fdbc 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fb6d 	bl	800289a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f001 fb35 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	200001c0 	.word	0x200001c0

08001224 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;  
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200001c0 	.word	0x200001c0

0800123c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e172      	b.n	8001542 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d176      	bne.n	800135c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d152      	bne.n	800131c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fd5d 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fc1d 	bl	8001ae4 <ADC_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d12f      	bne.n	800131c <HAL_ADC_Init+0xe0>
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_ADC_Init+0x310>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a94      	ldr	r2, [pc, #592]	; (8001550 <HAL_ADC_Init+0x314>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001338:	d110      	bne.n	800135c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f023 0312 	bic.w	r3, r3, #18
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80df 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80da 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80d2 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_ADC_Init+0x318>)
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a0:	d102      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_ADC_Init+0x31c>)
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Init+0x172>
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x194>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11c      	bne.n	800140e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x1bc>
 80013f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	2a01      	cmp	r2, #1
 800141a:	d002      	beq.n	8001422 <HAL_ADC_Init+0x1e6>
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x1e8>
 8001422:	2200      	movs	r2, #0
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045a      	lsls	r2, r3, #17
 8001452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
 800145c:	e00d      	b.n	800147a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d007      	beq.n	8001492 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	4313      	orrs	r3, r2
 800148c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800148e:	4313      	orrs	r3, r2
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	d114      	bne.n	80014ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	039a      	lsls	r2, r3, #14
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014c6:	4313      	orrs	r3, r2
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_ADC_Init+0x320>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014da:	430b      	orrs	r3, r1
 80014dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10c      	bne.n	8001500 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f023 010f 	bic.w	r1, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020f 	bic.w	r2, r2, #15
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	e00a      	b.n	800153e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f023 0312 	bic.w	r3, r3, #18
 8001530:	f043 0210 	orr.w	r2, r3, #16
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001538:	2301      	movs	r3, #1
 800153a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800153e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001542:	4618      	mov	r0, r3
 8001544:	3768      	adds	r7, #104	; 0x68
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	fff0c007 	.word	0xfff0c007

08001560 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001560:	b480      	push	{r7}
 8001562:	b09b      	sub	sp, #108	; 0x6c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x22>
 800157e:	2302      	movs	r3, #2
 8001580:	e2a5      	b.n	8001ace <HAL_ADC_ConfigChannel+0x56e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f040 8289 	bne.w	8001aac <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d81c      	bhi.n	80015dc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	461a      	mov	r2, r3
 80015b6:	231f      	movs	r3, #31
 80015b8:	4093      	lsls	r3, r2
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4019      	ands	r1, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
 80015da:	e063      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d81e      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3b1e      	subs	r3, #30
 80015f8:	221f      	movs	r2, #31
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	4019      	ands	r1, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	3b1e      	subs	r3, #30
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
 8001620:	e040      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0e      	cmp	r3, #14
 8001628:	d81e      	bhi.n	8001668 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	3b3c      	subs	r3, #60	; 0x3c
 800163e:	221f      	movs	r2, #31
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	4019      	ands	r1, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	3b3c      	subs	r3, #60	; 0x3c
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	639a      	str	r2, [r3, #56]	; 0x38
 8001666:	e01d      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3b5a      	subs	r3, #90	; 0x5a
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	4019      	ands	r1, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3b5a      	subs	r3, #90	; 0x5a
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80e5 	bne.w	800187e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d91c      	bls.n	80016f6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6999      	ldr	r1, [r3, #24]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6898      	ldr	r0, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e019      	b.n	800172a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	3b01      	subs	r3, #1
 8001748:	2b03      	cmp	r3, #3
 800174a:	d84f      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x28c>
 800174c:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_ADC_ConfigChannel+0x1f4>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	08001787 	.word	0x08001787
 800175c:	080017a9 	.word	0x080017a9
 8001760:	080017cb 	.word	0x080017cb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176a:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <HAL_ADC_ConfigChannel+0x484>)
 800176c:	4013      	ands	r3, r2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	0691      	lsls	r1, r2, #26
 8001774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001776:	430a      	orrs	r2, r1
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001784:	e07e      	b.n	8001884 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800178c:	4b95      	ldr	r3, [pc, #596]	; (80019e4 <HAL_ADC_ConfigChannel+0x484>)
 800178e:	4013      	ands	r3, r2
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	0691      	lsls	r1, r2, #26
 8001796:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001798:	430a      	orrs	r2, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017a6:	e06d      	b.n	8001884 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017ae:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <HAL_ADC_ConfigChannel+0x484>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	0691      	lsls	r1, r2, #26
 80017b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ba:	430a      	orrs	r2, r1
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017c8:	e05c      	b.n	8001884 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017d0:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_ADC_ConfigChannel+0x484>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	0691      	lsls	r1, r2, #26
 80017da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017dc:	430a      	orrs	r2, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017ea:	e04b      	b.n	8001884 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	069b      	lsls	r3, r3, #26
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800180e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001832:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800183a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	069b      	lsls	r3, r3, #26
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001856:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	069b      	lsls	r3, r3, #26
 8001868:	429a      	cmp	r2, r3
 800186a:	d10a      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800187c:	e001      	b.n	8001882 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001882:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x344>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x344>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x346>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 810b 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d00f      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80018d2:	e049      	b.n	8001968 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	d91c      	bls.n	8001930 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6999      	ldr	r1, [r3, #24]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	3b1b      	subs	r3, #27
 8001908:	2207      	movs	r2, #7
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	4019      	ands	r1, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6898      	ldr	r0, [r3, #8]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3b1b      	subs	r3, #27
 8001922:	fa00 f203 	lsl.w	r2, r0, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	619a      	str	r2, [r3, #24]
 800192e:	e01b      	b.n	8001968 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6959      	ldr	r1, [r3, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	2207      	movs	r2, #7
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	4019      	ands	r1, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6898      	ldr	r0, [r3, #8]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	fa00 f203 	lsl.w	r2, r0, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_ADC_ConfigChannel+0x488>)
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d105      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001984:	2b11      	cmp	r3, #17
 8001986:	d105      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001998:	2b12      	cmp	r3, #18
 800199a:	f040 8092 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800199e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 808b 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b4:	d102      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x45c>
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_ADC_ConfigChannel+0x48c>)
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e002      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x462>
 80019bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10f      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x490>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x490>
 80019de:	2301      	movs	r3, #1
 80019e0:	e007      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x492>
 80019e2:	bf00      	nop
 80019e4:	83fff000 	.word	0x83fff000
 80019e8:	50000300 	.word	0x50000300
 80019ec:	50000100 	.word	0x50000100
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d150      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x4b8>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x4b8>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x4ba>
 8001a18:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d13c      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d11d      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x502>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2e:	d118      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_ADC_ConfigChannel+0x57c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_ADC_ConfigChannel+0x580>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9a      	lsrs	r2, r3, #18
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f9      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a60:	e02e      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b11      	cmp	r3, #17
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x522>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a72:	d106      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a80:	e01e      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d11a      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a96:	e013      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001aaa:	e00a      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	376c      	adds	r7, #108	; 0x6c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <ADC_Disable+0x2c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <ADC_Disable+0x2c>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <ADC_Disable+0x2e>
 8001b10:	2300      	movs	r3, #0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d047      	beq.n	8001ba6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030d 	and.w	r3, r3, #13
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10f      	bne.n	8001b44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0202 	orr.w	r2, r2, #2
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff fb72 	bl	8001224 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b42:	e029      	b.n	8001b98 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e023      	b.n	8001ba8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b60:	f7ff fb60 	bl	8001224 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d914      	bls.n	8001b98 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10d      	bne.n	8001b98 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0210 	orr.w	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e007      	b.n	8001ba8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d0dc      	beq.n	8001b60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0ed      	b.n	8001d9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff f8fc 	bl	8000dcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be4:	f7ff fb1e 	bl	8001224 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bea:	e012      	b.n	8001c12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bec:	f7ff fb1a 	bl	8001224 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d90b      	bls.n	8001c12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0c5      	b.n	8001d9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0e5      	beq.n	8001bec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0202 	bic.w	r2, r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c30:	f7ff faf8 	bl	8001224 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c36:	e012      	b.n	8001c5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c38:	f7ff faf4 	bl	8001224 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d90b      	bls.n	8001c5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2205      	movs	r2, #5
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e09f      	b.n	8001d9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e5      	bne.n	8001c38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7e5b      	ldrb	r3, [r3, #25]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e9b      	ldrb	r3, [r3, #26]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0220 	bic.w	r2, r2, #32
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7edb      	ldrb	r3, [r3, #27]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0210 	bic.w	r2, r2, #16
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e007      	b.n	8001d14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0210 	orr.w	r2, r2, #16
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7f1b      	ldrb	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0208 	bic.w	r2, r2, #8
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7f5b      	ldrb	r3, [r3, #29]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0204 	orr.w	r2, r2, #4
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	ea42 0103 	orr.w	r1, r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_ConfigFilter+0x26>
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	f040 80aa 	bne.w	8001f20 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2201      	movs	r2, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d123      	bne.n	8001e4e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	401a      	ands	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3248      	adds	r2, #72	; 0x48
 8001e2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	3348      	adds	r3, #72	; 0x48
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d122      	bne.n	8001e9c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3248      	adds	r2, #72	; 0x48
 8001e7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	3348      	adds	r3, #72	; 0x48
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001eb6:	e007      	b.n	8001ec8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f12:	f023 0201 	bic.w	r2, r3, #1
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e006      	b.n	8001f2e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d12e      	bne.n	8001fac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f66:	f7ff f95d 	bl	8001224 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f6c:	e012      	b.n	8001f94 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f6e:	f7ff f959 	bl	8001224 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d90b      	bls.n	8001f94 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e012      	b.n	8001fba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e5      	bne.n	8001f6e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e006      	b.n	8001fba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_GetRxMessage+0x24>
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 80f3 	bne.w	80021cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0e7      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d8      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0204 	and.w	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	331b      	adds	r3, #27
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0202 	and.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	331b      	adds	r3, #27
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	331b      	adds	r3, #27
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0a1a      	lsrs	r2, r3, #8
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0c1a      	lsrs	r2, r3, #16
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3302      	adds	r3, #2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e1a      	lsrs	r2, r3, #24
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3303      	adds	r3, #3
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3304      	adds	r3, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0a1a      	lsrs	r2, r3, #8
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3305      	adds	r3, #5
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4413      	add	r3, r2
 8002176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0c1a      	lsrs	r2, r3, #16
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3306      	adds	r3, #6
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e1a      	lsrs	r2, r3, #24
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3307      	adds	r3, #7
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e006      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_CAN_ActivateNotification+0x1e>
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d109      	bne.n	8002218 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6959      	ldr	r1, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e006      	b.n	8002226 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08a      	sub	sp, #40	; 0x28
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d07c      	beq.n	8002372 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f983 	bl	80025a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800229a:	e016      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e00c      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e002      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f989 	bl	80025dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d024      	beq.n	800231e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f963 	bl	80025b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80022ee:	e016      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e00c      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e002      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f969 	bl	80025f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d024      	beq.n	8002372 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f943 	bl	80025c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002342:	e016      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e00c      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e002      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f949 	bl	8002604 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2208      	movs	r2, #8
 80023b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f930 	bl	8002618 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fd ffa5 	bl	8000320 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2208      	movs	r2, #8
 8002414:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f912 	bl	8002640 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8f9 	bl	800262c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8fc 	bl	8002654 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2208      	movs	r2, #8
 8002476:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8f5 	bl	8002668 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d07b      	beq.n	8002580 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d072      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d043      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03e      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d02b      	beq.n	800255c <HAL_CAN_IRQHandler+0x32a>
 8002504:	2b60      	cmp	r3, #96	; 0x60
 8002506:	d82e      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d022      	beq.n	8002552 <HAL_CAN_IRQHandler+0x320>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d82a      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d019      	beq.n	8002548 <HAL_CAN_IRQHandler+0x316>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d826      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d010      	beq.n	800253e <HAL_CAN_IRQHandler+0x30c>
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d822      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002520:	2b10      	cmp	r3, #16
 8002522:	d002      	beq.n	800252a <HAL_CAN_IRQHandler+0x2f8>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d005      	beq.n	8002534 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002528:	e01d      	b.n	8002566 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002532:	e019      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800253c:	e014      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002546:	e00f      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002550:	e00a      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800255a:	e005      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002564:	e000      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            break;
 8002566:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002576:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f872 	bl	800267c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff29 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff3e 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff31 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	e14e      	b.n	8002b62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8140 	beq.w	8002b5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d005      	beq.n	80028f4 <HAL_GPIO_Init+0x40>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d130      	bne.n	8002956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292a:	2201      	movs	r2, #1
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0201 	and.w	r2, r3, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b03      	cmp	r3, #3
 8002960:	d017      	beq.n	8002992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d123      	bne.n	80029e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	6939      	ldr	r1, [r7, #16]
 80029e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 809a 	beq.w	8002b5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a28:	4b55      	ldr	r3, [pc, #340]	; (8002b80 <HAL_GPIO_Init+0x2cc>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <HAL_GPIO_Init+0x2cc>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <HAL_GPIO_Init+0x2cc>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a40:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a6a:	d013      	beq.n	8002a94 <HAL_GPIO_Init+0x1e0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_GPIO_Init+0x2d4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00d      	beq.n	8002a90 <HAL_GPIO_Init+0x1dc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <HAL_GPIO_Init+0x2d8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d007      	beq.n	8002a8c <HAL_GPIO_Init+0x1d8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a44      	ldr	r2, [pc, #272]	; (8002b90 <HAL_GPIO_Init+0x2dc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_GPIO_Init+0x1d4>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1e2>
 8002a88:	2305      	movs	r3, #5
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x1e2>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x1e2>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x1e2>
 8002a94:	2300      	movs	r3, #0
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aa6:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_GPIO_Init+0x2e0>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f aea9 	bne.w	80028c4 <HAL_GPIO_Init+0x10>
  }
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010000 	.word	0x40010000
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	48000c00 	.word	0x48000c00
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f000 bef4 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 816a 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c22:	4bb3      	ldr	r3, [pc, #716]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c2e:	4bb0      	ldr	r3, [pc, #704]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d159      	bne.n	8002cee <HAL_RCC_OscConfig+0xf6>
 8002c3a:	4bad      	ldr	r3, [pc, #692]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d152      	bne.n	8002cee <HAL_RCC_OscConfig+0xf6>
 8002c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x82>
 8002c74:	4b9e      	ldr	r3, [pc, #632]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0xae>
 8002c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ca2:	4b93      	ldr	r3, [pc, #588]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002caa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 810c 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x2fc>
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8106 	bne.w	8002ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f000 be86 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x110>
 8002cfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7c      	ldr	r2, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e030      	b.n	8002d6a <HAL_RCC_OscConfig+0x172>
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x134>
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a76      	ldr	r2, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b74      	ldr	r3, [pc, #464]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a73      	ldr	r2, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e01e      	b.n	8002d6a <HAL_RCC_OscConfig+0x172>
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCC_OscConfig+0x15a>
 8002d38:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6c      	ldr	r2, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e00b      	b.n	8002d6a <HAL_RCC_OscConfig+0x172>
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b64      	ldr	r3, [pc, #400]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a63      	ldr	r2, [pc, #396]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6a:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f023 020f 	bic.w	r2, r3, #15
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	495d      	ldr	r1, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d059      	beq.n	8002e3c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fa4c 	bl	8001224 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d92:	f7fe fa47 	bl	8001224 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d902      	bls.n	8002da8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	f000 be29 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
 8002da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002dbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_OscConfig+0x1e2>
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x20e>
 8002dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002df6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ab      	beq.n	8002d92 <HAL_RCC_OscConfig+0x19a>
 8002e3a:	e05c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f9f2 	bl	8001224 <HAL_GetTick>
 8002e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e46:	f7fe f9ed 	bl	8001224 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d902      	bls.n	8002e5c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f000 bdcf 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
 8002e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_OscConfig+0x296>
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x2c2>
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002eaa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_RCC_OscConfig+0x2f8>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ebe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ec2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ec6:	fa92 f2a2 	rbit	r2, r2
 8002eca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ece:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ab      	bne.n	8002e46 <HAL_RCC_OscConfig+0x24e>
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2fe>
 8002ef0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 816f 	beq.w	80031e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f06:	4bd0      	ldr	r3, [pc, #832]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f12:	4bcd      	ldr	r3, [pc, #820]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d16c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x400>
 8002f1e:	4bca      	ldr	r3, [pc, #808]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d166      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x400>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f3c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_OscConfig+0x362>
 8002f54:	4bbc      	ldr	r3, [pc, #752]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	e013      	b.n	8002f82 <HAL_RCC_OscConfig+0x38a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f7e:	4bb2      	ldr	r3, [pc, #712]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2202      	movs	r2, #2
 8002f84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f94:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f002 021f 	and.w	r2, r2, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f000 bd1b 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4ba0      	ldr	r3, [pc, #640]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	21f8      	movs	r1, #248	; 0xf8
 8002fd4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fdc:	fa91 f1a1 	rbit	r1, r1
 8002fe0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fe4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fe8:	fab1 f181 	clz	r1, r1
 8002fec:	b2c9      	uxtb	r1, r1
 8002fee:	408b      	lsls	r3, r1
 8002ff0:	4995      	ldr	r1, [pc, #596]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e0f5      	b.n	80031e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8085 	beq.w	800310e <HAL_RCC_OscConfig+0x516>
 8003004:	2301      	movs	r3, #1
 8003006:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003016:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe f8f8 	bl	8001224 <HAL_GetTick>
 8003034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe f8f3 	bl	8001224 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	f000 bcd5 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003062:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x488>
 800307a:	4b73      	ldr	r3, [pc, #460]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0x4b0>
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003098:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80030ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0af      	beq.n	800303a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	21f8      	movs	r1, #248	; 0xf8
 80030ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030f2:	fa91 f1a1 	rbit	r1, r1
 80030f6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030fe:	fab1 f181 	clz	r1, r1
 8003102:	b2c9      	uxtb	r1, r1
 8003104:	408b      	lsls	r3, r1
 8003106:	4950      	ldr	r1, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	e06a      	b.n	80031e4 <HAL_RCC_OscConfig+0x5ec>
 800310e:	2301      	movs	r3, #1
 8003110:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003120:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800312e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f873 	bl	8001224 <HAL_GetTick>
 800313e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe f86e 	bl	8001224 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d902      	bls.n	800315a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	f000 bc50 	b.w	80039fa <HAL_RCC_OscConfig+0xe02>
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800316c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x592>
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e013      	b.n	80031b2 <HAL_RCC_OscConfig+0x5ba>
 800318a:	2302      	movs	r3, #2
 800318c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800319c:	2302      	movs	r3, #2
 800319e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x650>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2202      	movs	r2, #2
 80031b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80031c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f002 021f 	and.w	r2, r2, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1af      	bne.n	8003144 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80da 	beq.w	80033a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d069      	beq.n	80032d2 <HAL_RCC_OscConfig+0x6da>
 80031fe:	2301      	movs	r3, #1
 8003200:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x654>)
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	461a      	mov	r2, r3
 8003224:	2301      	movs	r3, #1
 8003226:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fd fffc 	bl	8001224 <HAL_GetTick>
 800322c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003230:	e00e      	b.n	8003250 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003232:	f7fd fff7 	bl	8001224 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d906      	bls.n	8003250 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e3d9      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	10908120 	.word	0x10908120
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003262:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003266:	2202      	movs	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800327e:	2202      	movs	r2, #2
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003290:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4ba5      	ldr	r3, [pc, #660]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800329a:	2102      	movs	r1, #2
 800329c:	6019      	str	r1, [r3, #0]
 800329e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f1a3 	rbit	r1, r3
 80032a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032ac:	6019      	str	r1, [r3, #0]
  return result;
 80032ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0b0      	beq.n	8003232 <HAL_RCC_OscConfig+0x63a>
 80032d0:	e06a      	b.n	80033a8 <HAL_RCC_OscConfig+0x7b0>
 80032d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032e8:	601a      	str	r2, [r3, #0]
  return result;
 80032ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b8c      	ldr	r3, [pc, #560]	; (800352c <HAL_RCC_OscConfig+0x934>)
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	461a      	mov	r2, r3
 8003300:	2300      	movs	r3, #0
 8003302:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fd ff8e 	bl	8001224 <HAL_GetTick>
 8003308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e009      	b.n	8003322 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd ff89 	bl	8001224 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e36b      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 8003322:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003356:	2202      	movs	r2, #2
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003368:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336a:	4b6f      	ldr	r3, [pc, #444]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003372:	2102      	movs	r1, #2
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f1a3 	rbit	r1, r3
 8003380:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003384:	6019      	str	r1, [r3, #0]
  return result;
 8003386:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1b2      	bne.n	800330e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8158 	beq.w	8003668 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b5a      	ldr	r3, [pc, #360]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d112      	bne.n	80033f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61d3      	str	r3, [r2, #28]
 80033d6:	4b54      	ldr	r3, [pc, #336]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033de:	f107 0308 	add.w	r3, r7, #8
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCC_OscConfig+0x938>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11a      	bne.n	8003432 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x938>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCC_OscConfig+0x938>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003406:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003408:	f7fd ff0c 	bl	8001224 <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e009      	b.n	8003426 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd ff07 	bl	8001224 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2e9      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCC_OscConfig+0x938>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x852>
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4a39      	ldr	r2, [pc, #228]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6213      	str	r3, [r2, #32]
 8003448:	e02f      	b.n	80034aa <HAL_RCC_OscConfig+0x8b2>
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <HAL_RCC_OscConfig+0x876>
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a33      	ldr	r2, [pc, #204]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4a30      	ldr	r2, [pc, #192]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	e01d      	b.n	80034aa <HAL_RCC_OscConfig+0x8b2>
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x89a>
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x8b2>
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a24      	ldr	r2, [pc, #144]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a21      	ldr	r2, [pc, #132]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d06b      	beq.n	800358c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7fd feb6 	bl	8001224 <HAL_GetTick>
 80034b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fd feb1 	bl	8001224 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e291      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 80034d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034f2:	2202      	movs	r2, #2
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fa93 f2a3 	rbit	r2, r3
 8003500:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003504:	601a      	str	r2, [r3, #0]
  return result;
 8003506:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800350a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d109      	bne.n	8003534 <HAL_RCC_OscConfig+0x93c>
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <HAL_RCC_OscConfig+0x930>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x958>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	10908120 	.word	0x10908120
 8003530:	40007000 	.word	0x40007000
 8003534:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	4bbb      	ldr	r3, [pc, #748]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003554:	2102      	movs	r1, #2
 8003556:	6011      	str	r1, [r2, #0]
 8003558:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	fa92 f1a2 	rbit	r1, r2
 8003562:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003566:	6011      	str	r1, [r2, #0]
  return result;
 8003568:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d099      	beq.n	80034be <HAL_RCC_OscConfig+0x8c6>
 800358a:	e063      	b.n	8003654 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fd fe4a 	bl	8001224 <HAL_GetTick>
 8003590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd fe45 	bl	8001224 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e225      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 80035ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035b2:	2202      	movs	r2, #2
 80035b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035ca:	2202      	movs	r2, #2
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035dc:	601a      	str	r2, [r3, #0]
  return result;
 80035de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_OscConfig+0xa06>
 80035f8:	4b90      	ldr	r3, [pc, #576]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	e00d      	b.n	800361a <HAL_RCC_OscConfig+0xa22>
 80035fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003602:	2202      	movs	r2, #2
 8003604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b89      	ldr	r3, [pc, #548]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800361e:	2102      	movs	r1, #2
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	fa92 f1a2 	rbit	r1, r2
 800362c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003630:	6011      	str	r1, [r2, #0]
  return result;
 8003632:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	fab2 f282 	clz	r2, r2
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1a0      	bne.n	8003596 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003654:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b77      	ldr	r3, [pc, #476]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a76      	ldr	r2, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003666:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 81c2 	beq.w	80039f8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4b71      	ldr	r3, [pc, #452]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	f000 819c 	beq.w	80039ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b02      	cmp	r3, #2
 800368a:	f040 8114 	bne.w	80038b6 <HAL_RCC_OscConfig+0xcbe>
 800368e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fdae 	bl	8001224 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fd fda9 	bl	8001224 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e18b      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 80036e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036fa:	601a      	str	r2, [r3, #0]
  return result;
 80036fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003700:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0xb24>
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0xb5c>
 800371c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	fa93 f2a3 	rbit	r2, r3
 8003730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800373a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800375c:	6011      	str	r1, [r2, #0]
 800375e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	fa92 f1a2 	rbit	r1, r2
 8003768:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800376c:	6011      	str	r1, [r2, #0]
  return result;
 800376e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d19e      	bne.n	80036ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4925      	ldr	r1, [pc, #148]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037c4:	601a      	str	r2, [r3, #0]
  return result;
 80037c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	2301      	movs	r3, #1
 80037e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fd fd1f 	bl	8001224 <HAL_GetTick>
 80037e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ea:	e009      	b.n	8003800 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fd1a 	bl	8001224 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0fc      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 8003800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003818:	601a      	str	r2, [r3, #0]
  return result;
 800381a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800381e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <HAL_RCC_OscConfig+0xc48>
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <HAL_RCC_OscConfig+0xc44>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	e01e      	b.n	8003878 <HAL_RCC_OscConfig+0xc80>
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800385e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f2a3 	rbit	r2, r3
 800386e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCC_OscConfig+0xe0c>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800387c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fa92 f1a2 	rbit	r1, r2
 800388c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003890:	6011      	str	r1, [r2, #0]
  return result;
 8003892:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f042 0220 	orr.w	r2, r2, #32
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d09b      	beq.n	80037ec <HAL_RCC_OscConfig+0xbf4>
 80038b4:	e0a0      	b.n	80039f8 <HAL_RCC_OscConfig+0xe00>
 80038b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	601a      	str	r2, [r3, #0]
  return result;
 80038d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fc9a 	bl	8001224 <HAL_GetTick>
 80038f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f4:	e009      	b.n	800390a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fd fc95 	bl	8001224 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e077      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
 800390a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800390e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003922:	601a      	str	r2, [r3, #0]
  return result;
 8003924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d102      	bne.n	8003944 <HAL_RCC_OscConfig+0xd4c>
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_OscConfig+0xe0c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	e01b      	b.n	800397c <HAL_RCC_OscConfig+0xd84>
 8003944:	f107 0320 	add.w	r3, r7, #32
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f107 0320 	add.w	r3, r7, #32
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f107 0318 	add.w	r3, r7, #24
 8003962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f107 0318 	add.w	r3, r7, #24
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f2a3 	rbit	r2, r3
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0xe0c>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f107 0210 	add.w	r2, r7, #16
 8003980:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	f107 0210 	add.w	r2, r7, #16
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	fa92 f1a2 	rbit	r1, r2
 8003990:	f107 020c 	add.w	r2, r7, #12
 8003994:	6011      	str	r1, [r2, #0]
  return result;
 8003996:	f107 020c 	add.w	r2, r7, #12
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d19e      	bne.n	80038f6 <HAL_RCC_OscConfig+0xcfe>
 80039b8:	e01e      	b.n	80039f8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e018      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCC_OscConfig+0xe0c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d108      	bne.n	80039f4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b09e      	sub	sp, #120	; 0x78
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e162      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b90      	ldr	r3, [pc, #576]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d910      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0207 	bic.w	r2, r3, #7
 8003a36:	498b      	ldr	r1, [pc, #556]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e14a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	497f      	ldr	r1, [pc, #508]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80dc 	beq.w	8003c34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d13c      	bne.n	8003afe <HAL_RCC_ClockConfig+0xf6>
 8003a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_ClockConfig+0xa6>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e00f      	b.n	8003ace <HAL_RCC_ClockConfig+0xc6>
 8003aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	667b      	str	r3, [r7, #100]	; 0x64
 8003abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ad2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ad6:	fa92 f2a2 	rbit	r2, r2
 8003ada:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003adc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ade:	fab2 f282 	clz	r2, r2
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f042 0220 	orr.w	r2, r2, #32
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f002 021f 	and.w	r2, r2, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d17b      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0f3      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d13c      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x178>
 8003b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x128>
 8003b2a:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_ClockConfig+0x148>
 8003b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b54:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b58:	fa92 f2a2 	rbit	r2, r2
 8003b5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f002 021f 	and.w	r2, r2, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13a      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b2      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
 8003b80:	2302      	movs	r3, #2
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x1a0>
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	e00d      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1bc>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	61ba      	str	r2, [r7, #24]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	fa92 f2a2 	rbit	r2, r2
 8003bce:	617a      	str	r2, [r7, #20]
  return result;
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	fab2 f282 	clz	r2, r2
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f042 0220 	orr.w	r2, r2, #32
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f002 021f 	and.w	r2, r2, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e079      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	491a      	ldr	r1, [pc, #104]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fd fb0e 	bl	8001224 <HAL_GetTick>
 8003c08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fd fb0a 	bl	8001224 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e061      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d214      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4906      	ldr	r1, [pc, #24]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_RCC_ClockConfig+0x25c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e040      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x2de>
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	491a      	ldr	r1, [pc, #104]	; (8003cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4912      	ldr	r1, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003caa:	f000 f829 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cae:	4601      	mov	r1, r0
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb8:	22f0      	movs	r2, #240	; 0xf0
 8003cba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	fa92 f2a2 	rbit	r2, r2
 8003cc2:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	40d3      	lsrs	r3, r2
 8003cce:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x2ec>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <HAL_RCC_ClockConfig+0x2f0>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCC_ClockConfig+0x2f4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fa5c 	bl	800119c <HAL_InitTick>
  
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3778      	adds	r7, #120	; 0x78
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	080059a0 	.word	0x080059a0
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000004 	.word	0x20000004

08003d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b08b      	sub	sp, #44	; 0x2c
 8003d04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x30>
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x36>
 8003d2e:	e03c      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d32:	623b      	str	r3, [r7, #32]
      break;
 8003d34:	e03c      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	fa92 f2a2 	rbit	r2, r2
 8003d48:	607a      	str	r2, [r7, #4]
  return result;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	40d3      	lsrs	r3, r2
 8003d54:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	220f      	movs	r2, #15
 8003d64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	fa92 f2a2 	rbit	r2, r2
 8003d6c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	fab2 f282 	clz	r2, r2
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	40d3      	lsrs	r3, r2
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d7a:	5cd3      	ldrb	r3, [r2, r3]
 8003d7c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d88:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	e004      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	623b      	str	r3, [r7, #32]
      break;
 8003da8:	e002      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dac:	623b      	str	r3, [r7, #32]
      break;
 8003dae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db0:	6a3b      	ldr	r3, [r7, #32]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	372c      	adds	r7, #44	; 0x2c
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	00b71b00 	.word	0x00b71b00
 8003dc8:	080059b8 	.word	0x080059b8
 8003dcc:	080059c8 	.word	0x080059c8
 8003dd0:	003d0900 	.word	0x003d0900
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003df6:	f7ff ffef 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	fa92 f2a2 	rbit	r2, r2
 8003e10:	603a      	str	r2, [r7, #0]
  return result;
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	fab2 f282 	clz	r2, r2
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	40d3      	lsrs	r3, r2
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	080059b0 	.word	0x080059b0

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e3a:	f7ff ffcd 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e3e:	4601      	mov	r1, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	fa92 f2a2 	rbit	r2, r2
 8003e54:	603a      	str	r2, [r7, #0]
  return result;
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	fab2 f282 	clz	r2, r2
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	40d3      	lsrs	r3, r2
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	080059b0 	.word	0x080059b0

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b092      	sub	sp, #72	; 0x48
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80cd 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9c:	4b86      	ldr	r3, [pc, #536]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4a82      	ldr	r2, [pc, #520]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	61d3      	str	r3, [r2, #28]
 8003eb4:	4b80      	ldr	r3, [pc, #512]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a79      	ldr	r2, [pc, #484]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7fd f9a1 	bl	8001224 <HAL_GetTick>
 8003ee2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fd f99d 	bl	8001224 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	; 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0db      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b70      	ldr	r3, [pc, #448]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f04:	4b6c      	ldr	r3, [pc, #432]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d07d      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d076      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f74:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d045      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd f94e 	bl	8001224 <HAL_GetTick>
 8003f88:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd f94a 	bl	8001224 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e086      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	2302      	movs	r3, #2
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003fba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003fd0:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	e007      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	613a      	str	r2, [r7, #16]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	fa92 f2a2 	rbit	r2, r2
 8003ff0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f002 021f 	and.w	r2, r2, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0bd      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4926      	ldr	r1, [pc, #152]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800401e:	4313      	orrs	r3, r2
 8004020:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004022:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	491a      	ldr	r1, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004050:	4313      	orrs	r3, r2
 8004052:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	f023 0210 	bic.w	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4912      	ldr	r1, [pc, #72]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800406e:	4313      	orrs	r3, r2
 8004070:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	490b      	ldr	r1, [pc, #44]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800408c:	4313      	orrs	r3, r2
 800408e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3748      	adds	r7, #72	; 0x48
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	10908100 	.word	0x10908100

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e049      	b.n	800416a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fec2 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 fc94 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e049      	b.n	8004218 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f841 	bl	8004220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 fc3d 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_TIM_PWM_Start+0x24>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e03c      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d109      	bne.n	8004272 <HAL_TIM_PWM_Start+0x3e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e02f      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d109      	bne.n	800428c <HAL_TIM_PWM_Start+0x58>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e022      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d109      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x72>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	bf14      	ite	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	2300      	moveq	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e015      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d109      	bne.n	80042c0 <HAL_TIM_PWM_Start+0x8c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e008      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e088      	b.n	80043ec <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xb6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	e023      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xc6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f8:	e01b      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	e013      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start+0xe6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004318:	e00b      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b10      	cmp	r3, #16
 800431e:	d104      	bne.n	800432a <HAL_TIM_PWM_Start+0xf6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	e003      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff30 	bl	80051a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <HAL_TIM_PWM_Start+0x1c0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIM_PWM_Start+0x134>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_TIM_PWM_Start+0x1c4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_TIM_PWM_Start+0x134>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <HAL_TIM_PWM_Start+0x1c8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIM_PWM_Start+0x134>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a27      	ldr	r2, [pc, #156]	; (8004400 <HAL_TIM_PWM_Start+0x1cc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_TIM_PWM_Start+0x138>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_TIM_PWM_Start+0x13a>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_TIM_PWM_Start+0x1c0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_TIM_PWM_Start+0x176>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d009      	beq.n	80043aa <HAL_TIM_PWM_Start+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_TIM_PWM_Start+0x1d0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_PWM_Start+0x176>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <HAL_TIM_PWM_Start+0x1c4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d115      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_TIM_PWM_Start+0x1d4>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d015      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x1b4>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c2:	d011      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	e008      	b.n	80043e8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e000      	b.n	80043ea <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	40000400 	.word	0x40000400
 8004408:	00010007 	.word	0x00010007

0800440c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e097      	b.n	8004550 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc fd65 	bl	8000f04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004450:	f023 0307 	bic.w	r3, r3, #7
 8004454:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fae5 	bl	8004a30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	4313      	orrs	r3, r2
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044ac:	f023 030c 	bic.w	r3, r3, #12
 80044b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	4313      	orrs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	031b      	lsls	r3, r3, #12
 80044dc:	4313      	orrs	r3, r2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4313      	orrs	r3, r2
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004570:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004578:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004580:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d110      	bne.n	80045aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800458e:	7b7b      	ldrb	r3, [r7, #13]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e069      	b.n	800466c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a8:	e031      	b.n	800460e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d110      	bne.n	80045d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b6:	7b3b      	ldrb	r3, [r7, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e055      	b.n	800466c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d0:	e01d      	b.n	800460e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d108      	bne.n	80045ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045de:	7b7b      	ldrb	r3, [r7, #13]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045e4:	7b3b      	ldrb	r3, [r7, #12]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03e      	b.n	800466c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_Encoder_Start+0xc4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d008      	beq.n	800462c <HAL_TIM_Encoder_Start+0xd4>
 800461a:	e00f      	b.n	800463c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fdbb 	bl	80051a0 <TIM_CCxChannelCmd>
      break;
 800462a:	e016      	b.n	800465a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	2104      	movs	r1, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fdb3 	bl	80051a0 <TIM_CCxChannelCmd>
      break;
 800463a:	e00e      	b.n	800465a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fdab 	bl	80051a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	2104      	movs	r1, #4
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fda4 	bl	80051a0 <TIM_CCxChannelCmd>
      break;
 8004658:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e0ff      	b.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b14      	cmp	r3, #20
 800469e:	f200 80f0 	bhi.w	8004882 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004883 	.word	0x08004883
 80046b0:	08004883 	.word	0x08004883
 80046b4:	08004883 	.word	0x08004883
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004883 	.word	0x08004883
 80046c0:	08004883 	.word	0x08004883
 80046c4:	08004883 	.word	0x08004883
 80046c8:	0800477f 	.word	0x0800477f
 80046cc:	08004883 	.word	0x08004883
 80046d0:	08004883 	.word	0x08004883
 80046d4:	08004883 	.word	0x08004883
 80046d8:	080047bf 	.word	0x080047bf
 80046dc:	08004883 	.word	0x08004883
 80046e0:	08004883 	.word	0x08004883
 80046e4:	08004883 	.word	0x08004883
 80046e8:	08004801 	.word	0x08004801
 80046ec:	08004883 	.word	0x08004883
 80046f0:	08004883 	.word	0x08004883
 80046f4:	08004883 	.word	0x08004883
 80046f8:	08004841 	.word	0x08004841
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa0c 	bl	8004b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
      break;
 800473a:	e0a5      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fa72 	bl	8004c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6999      	ldr	r1, [r3, #24]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]
      break;
 800477c:	e084      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fad1 	bl	8004d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0208 	orr.w	r2, r2, #8
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0204 	bic.w	r2, r2, #4
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	61da      	str	r2, [r3, #28]
      break;
 80047bc:	e064      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fb2f 	bl	8004e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69d9      	ldr	r1, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	021a      	lsls	r2, r3, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
      break;
 80047fe:	e043      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fb72 	bl	8004ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0208 	orr.w	r2, r2, #8
 800481a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800483e:	e023      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fbb0 	bl	8004fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004880:	e002      	b.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
      break;
 8004886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop

0800489c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIM_ConfigClockSource+0x1c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0b6      	b.n	8004a26 <HAL_TIM_ConfigClockSource+0x18a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f4:	d03e      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0xd8>
 80048f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fa:	f200 8087 	bhi.w	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	f000 8086 	beq.w	8004a12 <HAL_TIM_ConfigClockSource+0x176>
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	d87f      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 800490c:	2b70      	cmp	r3, #112	; 0x70
 800490e:	d01a      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xaa>
 8004910:	2b70      	cmp	r3, #112	; 0x70
 8004912:	d87b      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 8004914:	2b60      	cmp	r3, #96	; 0x60
 8004916:	d050      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x11e>
 8004918:	2b60      	cmp	r3, #96	; 0x60
 800491a:	d877      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 800491c:	2b50      	cmp	r3, #80	; 0x50
 800491e:	d03c      	beq.n	800499a <HAL_TIM_ConfigClockSource+0xfe>
 8004920:	2b50      	cmp	r3, #80	; 0x50
 8004922:	d873      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d058      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x13e>
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d86f      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d064      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15e>
 8004930:	2b30      	cmp	r3, #48	; 0x30
 8004932:	d86b      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d060      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15e>
 8004938:	2b20      	cmp	r3, #32
 800493a:	d867      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d05c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15e>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d05a      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15e>
 8004944:	e062      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f000 fc03 	bl	8005160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	609a      	str	r2, [r3, #8]
      break;
 8004972:	e04f      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f000 fbec 	bl	8005160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004996:	609a      	str	r2, [r3, #8]
      break;
 8004998:	e03c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fb60 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2150      	movs	r1, #80	; 0x50
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fbb9 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 80049b8:	e02c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f000 fb7f 	bl	80050ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2160      	movs	r1, #96	; 0x60
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fba9 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 80049d8:	e01c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f000 fb40 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2140      	movs	r1, #64	; 0x40
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb99 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 80049f8:	e00c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fb90 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004a0a:	e003      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e000      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x28>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x28>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <TIM_Base_SetConfig+0xe0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <TIM_Base_SetConfig+0xe0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM_Base_SetConfig+0xe4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <TIM_Base_SetConfig+0xe8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <TIM_Base_SetConfig+0xec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <TIM_Base_SetConfig+0xe4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <TIM_Base_SetConfig+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0xec>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800

08004b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f023 0302 	bic.w	r3, r3, #2
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <TIM_OC1_SetConfig+0xfc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_OC1_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <TIM_OC1_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <TIM_OC1_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0308 	bic.w	r3, r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <TIM_OC1_SetConfig+0xfc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <TIM_OC1_SetConfig+0x100>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <TIM_OC1_SetConfig+0x104>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <TIM_OC1_SetConfig+0x108>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0210 	bic.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <TIM_OC2_SetConfig+0xf0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10d      	bne.n	8004cac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC2_SetConfig+0xf0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <TIM_OC2_SetConfig+0xf4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC2_SetConfig+0xf8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC2_SetConfig+0xfc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d113      	bne.n	8004cf4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cda:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10d      	bne.n	8004daa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <TIM_OC3_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <TIM_OC3_SetConfig+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <TIM_OC3_SetConfig+0xf8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC4_SetConfig+0xb8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC4_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC4_SetConfig+0xc0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC4_SetConfig+0xc4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d109      	bne.n	8004eb8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC5_SetConfig+0xac>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC5_SetConfig+0xb0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <TIM_OC5_SetConfig+0xb4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <TIM_OC5_SetConfig+0xb8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d109      	bne.n	8004f76 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <TIM_OC6_SetConfig+0xb0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC6_SetConfig+0xb4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC6_SetConfig+0xb8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_OC6_SetConfig+0xbc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d109      	bne.n	8005034 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800

0800506c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 030a 	bic.w	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b087      	sub	sp, #28
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f023 0210 	bic.w	r2, r3, #16
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	031b      	lsls	r3, r3, #12
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	f043 0307 	orr.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	431a      	orrs	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2201      	movs	r2, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e054      	b.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a24      	ldr	r2, [pc, #144]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d108      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005234:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d009      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10c      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4313      	orrs	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e040      	b.n	800535c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fb fe82 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f82c 	bl	8005364 <UART_SetConfig>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e022      	b.n	800535c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f956 	bl	80055d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f9dd 	bl	8005714 <UART_CheckIdleState>
 800535a:	4603      	mov	r3, r0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b8a      	ldr	r3, [pc, #552]	; (80055b8 <UART_SetConfig+0x254>)
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	430b      	orrs	r3, r1
 800539a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a78      	ldr	r2, [pc, #480]	; (80055bc <UART_SetConfig+0x258>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d120      	bne.n	8005422 <UART_SetConfig+0xbe>
 80053e0:	4b77      	ldr	r3, [pc, #476]	; (80055c0 <UART_SetConfig+0x25c>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d817      	bhi.n	800541c <UART_SetConfig+0xb8>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <UART_SetConfig+0x90>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005405 	.word	0x08005405
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005417 	.word	0x08005417
 8005400:	0800540b 	.word	0x0800540b
 8005404:	2300      	movs	r3, #0
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e01d      	b.n	8005446 <UART_SetConfig+0xe2>
 800540a:	2302      	movs	r3, #2
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e01a      	b.n	8005446 <UART_SetConfig+0xe2>
 8005410:	2304      	movs	r3, #4
 8005412:	77fb      	strb	r3, [r7, #31]
 8005414:	e017      	b.n	8005446 <UART_SetConfig+0xe2>
 8005416:	2308      	movs	r3, #8
 8005418:	77fb      	strb	r3, [r7, #31]
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0xe2>
 800541c:	2310      	movs	r3, #16
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e011      	b.n	8005446 <UART_SetConfig+0xe2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <UART_SetConfig+0x260>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d102      	bne.n	8005432 <UART_SetConfig+0xce>
 800542c:	2300      	movs	r3, #0
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0xe2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a64      	ldr	r2, [pc, #400]	; (80055c8 <UART_SetConfig+0x264>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d102      	bne.n	8005442 <UART_SetConfig+0xde>
 800543c:	2300      	movs	r3, #0
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e001      	b.n	8005446 <UART_SetConfig+0xe2>
 8005442:	2310      	movs	r3, #16
 8005444:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	d15b      	bne.n	8005508 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d827      	bhi.n	80054a6 <UART_SetConfig+0x142>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0xf8>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005497 	.word	0x08005497
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
 800547c:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fcb6 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8005484:	61b8      	str	r0, [r7, #24]
        break;
 8005486:	e013      	b.n	80054b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fe fcd4 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 800548c:	61b8      	str	r0, [r7, #24]
        break;
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b4e      	ldr	r3, [pc, #312]	; (80055cc <UART_SetConfig+0x268>)
 8005492:	61bb      	str	r3, [r7, #24]
        break;
 8005494:	e00c      	b.n	80054b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe fc33 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 800549a:	61b8      	str	r0, [r7, #24]
        break;
 800549c:	e008      	b.n	80054b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	61bb      	str	r3, [r7, #24]
        break;
 80054a4:	e004      	b.n	80054b0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77bb      	strb	r3, [r7, #30]
        break;
 80054ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d074      	beq.n	80055a0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	005a      	lsls	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b0f      	cmp	r3, #15
 80054d2:	d916      	bls.n	8005502 <UART_SetConfig+0x19e>
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054da:	d212      	bcs.n	8005502 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f023 030f 	bic.w	r3, r3, #15
 80054e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	89fb      	ldrh	r3, [r7, #14]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	89fa      	ldrh	r2, [r7, #14]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e04e      	b.n	80055a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	77bb      	strb	r3, [r7, #30]
 8005506:	e04b      	b.n	80055a0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d827      	bhi.n	800555e <UART_SetConfig+0x1fa>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <UART_SetConfig+0x1b0>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005539 	.word	0x08005539
 8005518:	08005541 	.word	0x08005541
 800551c:	08005549 	.word	0x08005549
 8005520:	0800555f 	.word	0x0800555f
 8005524:	0800554f 	.word	0x0800554f
 8005528:	0800555f 	.word	0x0800555f
 800552c:	0800555f 	.word	0x0800555f
 8005530:	0800555f 	.word	0x0800555f
 8005534:	08005557 	.word	0x08005557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005538:	f7fe fc5a 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 800553c:	61b8      	str	r0, [r7, #24]
        break;
 800553e:	e013      	b.n	8005568 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005540:	f7fe fc78 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8005544:	61b8      	str	r0, [r7, #24]
        break;
 8005546:	e00f      	b.n	8005568 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <UART_SetConfig+0x268>)
 800554a:	61bb      	str	r3, [r7, #24]
        break;
 800554c:	e00c      	b.n	8005568 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554e:	f7fe fbd7 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8005552:	61b8      	str	r0, [r7, #24]
        break;
 8005554:	e008      	b.n	8005568 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555a:	61bb      	str	r3, [r7, #24]
        break;
 800555c:	e004      	b.n	8005568 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	77bb      	strb	r3, [r7, #30]
        break;
 8005566:	bf00      	nop
    }

    if (pclk != 0U)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085a      	lsrs	r2, r3, #1
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	441a      	add	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	b29b      	uxth	r3, r3
 8005582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b0f      	cmp	r3, #15
 8005588:	d908      	bls.n	800559c <UART_SetConfig+0x238>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005590:	d204      	bcs.n	800559c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	e001      	b.n	80055a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	efff69f3 	.word	0xefff69f3
 80055bc:	40013800 	.word	0x40013800
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40004400 	.word	0x40004400
 80055c8:	40004800 	.word	0x40004800
 80055cc:	007a1200 	.word	0x007a1200

080055d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ce:	d10a      	bne.n	80056e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005724:	f7fb fd7e 	bl	8001224 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d10e      	bne.n	8005756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f82d 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e023      	b.n	800579e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d10e      	bne.n	8005782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f817 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e00d      	b.n	800579e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b09c      	sub	sp, #112	; 0x70
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b6:	e0a5      	b.n	8005904 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	f000 80a1 	beq.w	8005904 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fb fd2f 	bl	8001224 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d13e      	bne.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057ec:	667b      	str	r3, [r7, #100]	; 0x64
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e6      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	663b      	str	r3, [r7, #96]	; 0x60
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800582a:	64ba      	str	r2, [r7, #72]	; 0x48
 800582c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e067      	b.n	8005926 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d04f      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005872:	d147      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800587c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005892:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
 800589e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e6      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	613b      	str	r3, [r7, #16]
   return(result);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f023 0301 	bic.w	r3, r3, #1
 80058c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058d0:	623a      	str	r2, [r7, #32]
 80058d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e5      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e010      	b.n	8005926 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	429a      	cmp	r2, r3
 8005920:	f43f af4a 	beq.w	80057b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3770      	adds	r7, #112	; 0x70
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4d0d      	ldr	r5, [pc, #52]	; (8005968 <__libc_init_array+0x38>)
 8005934:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005936:	1b64      	subs	r4, r4, r5
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	2600      	movs	r6, #0
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	4d0b      	ldr	r5, [pc, #44]	; (8005970 <__libc_init_array+0x40>)
 8005942:	4c0c      	ldr	r4, [pc, #48]	; (8005974 <__libc_init_array+0x44>)
 8005944:	f000 f820 	bl	8005988 <_init>
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	2600      	movs	r6, #0
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	080059d8 	.word	0x080059d8
 800596c:	080059d8 	.word	0x080059d8
 8005970:	080059d8 	.word	0x080059d8
 8005974:	080059dc 	.word	0x080059dc

08005978 <memset>:
 8005978:	4402      	add	r2, r0
 800597a:	4603      	mov	r3, r0
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	f803 1b01 	strb.w	r1, [r3], #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
