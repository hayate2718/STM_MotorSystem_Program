
STM_MotorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008758  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008920  08008920  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008920  08008920  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008920  08008920  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000204  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002797d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c15  00000000  00000000  00047a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0004b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0004c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209bb  00000000  00000000  0004d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ca7  00000000  00000000  0006e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2f63  00000000  00000000  00084e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137dd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc0  00000000  00000000  00137e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088c8 	.word	0x080088c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080088c8 	.word	0x080088c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <_ZN3ADC9ADC_startEv>:
		configrable_const_num = ADC_supply_voltage / ADC_resolution / this->ADC_sens_gain;
	}

};

inline void ADC::ADC_start(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	if(ADC_f)return;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d121      	bne.n	8000c76 <_ZN3ADC9ADC_startEv+0x56>
	_cr->bit28 = 1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000c38:	78d3      	ldrb	r3, [r2, #3]
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	70d3      	strb	r3, [r2, #3]
	HAL_ADC_Start(_hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fd2e 	bl	80036a8 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(_hadc,1));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fe13 	bl	8003880 <HAL_ADC_PollForConversion>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d000      	beq.n	8000c6c <_ZN3ADC9ADC_startEv+0x4c>
 8000c6a:	e7ef      	b.n	8000c4c <_ZN3ADC9ADC_startEv+0x2c>
	ADC_f = 1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8000c74:	e000      	b.n	8000c78 <_ZN3ADC9ADC_startEv+0x58>
	if(ADC_f)return;
 8000c76:	bf00      	nop
}
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZN3ADC8ADC_stopEv>:

inline void ADC::ADC_stop(){
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	if(!ADC_f)return;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d011      	beq.n	8000cb4 <_ZN3ADC8ADC_stopEv+0x36>
	HAL_ADC_Stop(_hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fdbc 	bl	8003814 <HAL_ADC_Stop>
	_cr->bit1=1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000ca2:	7813      	ldrb	r3, [r2, #0]
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	7013      	strb	r3, [r2, #0]
	ADC_f = 0;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8000cb2:	e000      	b.n	8000cb6 <_ZN3ADC8ADC_stopEv+0x38>
	if(!ADC_f)return;
 8000cb4:	bf00      	nop
}
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZN3ADCC1EP19__ADC_HandleTypeDeff>:
 *      Author: 0_hayate
 */

#include <ADC.hpp>

ADC::ADC(ADC_HandleTypeDef *_hadc, float ADC_supply_voltage) :
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	ed87 0a01 	vstr	s0, [r7, #4]
		ADC_supply_voltage(ADC_supply_voltage),
		ADC_sens_gain(0.33),
		configrable_const_num(0),
		_hadc(_hadc),
        before_current(0),
		ADC_f(0)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4a41      	ldr	r2, [pc, #260]	; (8000dec <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x130>)
 8000ce6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
{
	_hadc->Init.Resolution = ADC_RESOLUTION_12B;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
	switch (_hadc->Init.Resolution) {
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b18      	cmp	r3, #24
 8000d1a:	d84c      	bhi.n	8000db6 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xfa>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0x68>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d89 	.word	0x08000d89
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000db7 	.word	0x08000db7
 8000d50:	08000db7 	.word	0x08000db7
 8000d54:	08000db7 	.word	0x08000db7
 8000d58:	08000db7 	.word	0x08000db7
 8000d5c:	08000db7 	.word	0x08000db7
 8000d60:	08000db7 	.word	0x08000db7
 8000d64:	08000da1 	.word	0x08000da1
 8000d68:	08000db7 	.word	0x08000db7
 8000d6c:	08000db7 	.word	0x08000db7
 8000d70:	08000db7 	.word	0x08000db7
 8000d74:	08000db7 	.word	0x08000db7
 8000d78:	08000db7 	.word	0x08000db7
 8000d7c:	08000db7 	.word	0x08000db7
 8000d80:	08000db7 	.word	0x08000db7
 8000d84:	08000dad 	.word	0x08000dad
	case ADC_RESOLUTION_12B:
		ADC_resolution = 1<<12;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d92:	e010      	b.n	8000db6 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xfa>

	case ADC_RESOLUTION_10B:
		ADC_resolution = 1<<10;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000d9e:	e00a      	b.n	8000db6 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xfa>

	case ADC_RESOLUTION_8B:
		ADC_resolution = 1<<8;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000daa:	e004      	b.n	8000db6 <_ZN3ADCC1EP19__ADC_HandleTypeDeff+0xfa>

	case ADC_RESOLUTION_6B:
		ADC_resolution = 1<<6;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
 8000db4:	bf00      	nop
	}

	__IO uint32_t *_isr_buf = &_hadc->Instance->ISR;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	617b      	str	r3, [r7, #20]
	_isr = (use_register*) _isr_buf;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	__IO uint32_t *_cr_buf = &_hadc->Instance->CR;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3308      	adds	r3, #8
 8000dca:	613b      	str	r3, [r7, #16]
	_cr = (use_register*) _cr_buf;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	calibration_current[100] = { 0 };
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	return;
}
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	3ea8f5c3 	.word	0x3ea8f5c3

08000df0 <_ZN3ADC15ADC_calibrationEv>:

void ADC::ADC_calibration() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	configrable_const_num = ADC_supply_voltage / ADC_resolution / ADC_sens_gain;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	ofset_current = 0;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ADC_start();
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fef9 	bl	8000c20 <_ZN3ADC9ADC_startEv>
	_isr->bit2 = 1; //EOCbitクリア
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000e34:	7813      	ldrb	r3, [r2, #0]
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 100; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b63      	cmp	r3, #99	; 0x63
 8000e44:	dc17      	bgt.n	8000e76 <_ZN3ADC15ADC_calibrationEv+0x86>
		while (!_isr->bit2); //EOCbitが再セットされるのをまつ
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d100      	bne.n	8000e5a <_ZN3ADC15ADC_calibrationEv+0x6a>
 8000e58:	e7f5      	b.n	8000e46 <_ZN3ADC15ADC_calibrationEv+0x56>
		calibration_current[i] = _hadc->Instance->DR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	b299      	uxth	r1, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 100; i++) {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e7e4      	b.n	8000e40 <_ZN3ADC15ADC_calibrationEv+0x50>
	}
	for (int j = 0; j < 100; j++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b63      	cmp	r3, #99	; 0x63
 8000e7e:	dc0e      	bgt.n	8000e9e <_ZN3ADC15ADC_calibrationEv+0xae>
		ofset_current += calibration_current[j];
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000e8e:	441a      	add	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for (int j = 0; j < 100; j++) {
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	e7ed      	b.n	8000e7a <_ZN3ADC15ADC_calibrationEv+0x8a>
	}
	ofset_current /= 100;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <_ZN3ADC15ADC_calibrationEv+0xf0>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	095a      	lsrs	r2, r3, #5
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	ADC_stop();
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fee3 	bl	8000c7e <_ZN3ADC8ADC_stopEv>
	before_current = ofset_current * configrable_const_num;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	51eb851f 	.word	0x51eb851f

08000ee4 <_ZN3ADC15ADC_get_currentEv>:

float ADC::ADC_get_current() { //電流センサ出力から現在の電流を計算して返す
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

	_isr->bit2 = 1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000ef2:	7813      	ldrb	r3, [r2, #0]
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	7013      	strb	r3, [r2, #0]
	while (!_isr->bit2);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d100      	bne.n	8000f0e <_ZN3ADC15ADC_get_currentEv+0x2a>
 8000f0c:	e7f5      	b.n	8000efa <_ZN3ADC15ADC_get_currentEv+0x16>
	current = _hadc->Instance->DR - ofset_current;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	current = current * configrable_const_num;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8000f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f44:	ee17 2a90 	vmov	r2, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//ADC_current_fillter();

	return current;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_ZN3ADC12ADC_set_gainEf>:
	void ADC_set_gain(float ADC_sens_gain){
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	ed87 0a00 	vstr	s0, [r7]
		this->ADC_sens_gain = ADC_sens_gain;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		configrable_const_num = ADC_supply_voltage / ADC_resolution / this->ADC_sens_gain;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8000f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_ZN15STM_MotorSystem12set_velocityEf>:

	void STM_MotorSystem_start();

	void STM_MotorSystem_stop();

	void set_velocity(float velocity_tar){ //通信系から目標速度をもらう
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_buf = velocity_tar;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]
		this->MotorSystem_mode_buf = VELOCITY_CONTROL;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	675a      	str	r2, [r3, #116]	; 0x74
	}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN15STM_MotorSystem10set_torqueEf>:

	void set_torque(float torque_tar){
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	ed87 0a00 	vstr	s0, [r7]
		torque_tar *=1/kt;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff2:	ed97 7a00 	vldr	s14, [r7]
 8000ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffa:	edc7 7a00 	vstr	s15, [r7]
		this->current_buf = torque_tar;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	619a      	str	r2, [r3, #24]
		this->MotorSystem_mode_buf = TORQUE_CONTROL;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f640 72ff 	movw	r2, #4095	; 0xfff
 800100a:	675a      	str	r2, [r3, #116]	; 0x74
	}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_ZN15STM_MotorSystem9set_angleEf>:

	void set_angle(float angle_tar){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	ed87 0a00 	vstr	s0, [r7]
		this->angle_buf = angle_tar;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
		this->MotorSystem_mode_buf = ANGLE_CONTROL;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8001030:	675a      	str	r2, [r3, #116]	; 0x74
	}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_ZN15STM_MotorSystem16com_get_velocityEv>:

	float com_get_velocity(){//通信系に現在の速度を返す
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
		return this->velocity_ref;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	ee07 3a90 	vmov	s15, r3
	}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_ZN15STM_MotorSystem15com_get_currentEv>:

	float get_velocity(); //エンコダ出力から現在の速度を計算して返す



	float com_get_current(){//通信系に現在の電流を返す
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
		return current_ref;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	ee07 3a90 	vmov	s15, r3
	}
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZN15STM_MotorSystem17com_get_sum_angleEv>:

	float get_angle(); //エンコダから-2π~0~2πの角度を返す

	float get_sum_angle(); //エンコダから総角度変化を返す

	float com_get_sum_angle(){ //現在の角度
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
		return get_angle();
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 ffa4 	bl	8001fd0 <_ZN15STM_MotorSystem9get_angleEv>
 8001088:	eef0 7a40 	vmov.f32	s15, s0
	}
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN15STM_MotorSystem8set_voltEf>:
	void motor_control();

	void set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir); //dir用のピンを設定
	void set_dir(GPIO_PinState dir); //dirを設定

	void set_volt(float volt){
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	ed87 0a00 	vstr	s0, [r7]
		this->volt = volt;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN15STM_MotorSystem6set_ktEf>:

	void set_kt(float kt){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	ed87 0a00 	vstr	s0, [r7]
		this->kt = kt;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
	}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_ZN15STM_MotorSystem7set_pprEf>:

	void set_ppr(float ppr){
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	ed87 0a00 	vstr	s0, [r7]
		this->ppr = ppr;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_ZN15STM_MotorSystem17set_current_limitEf>:

	void set_current_limit(float current_limit){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	ed87 0a00 	vstr	s0, [r7]
		this->current_limit = current_limit;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	61da      	str	r2, [r3, #28]
	}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN15STM_MotorSystem14set_velocity_pEf>:
		this->GPIO_PIN_coast = GPIO_PIN_coast;
		this->GPIO_coast = GPIO_coast;
	}


	void set_velocity_p(float velocity_p_buf){
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_p_buf = velocity_p_buf;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN15STM_MotorSystem14set_velocity_iEf>:

	void set_velocity_i(float velocity_i_buf){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_i_buf = velocity_i_buf;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN15STM_MotorSystem14set_velocity_dEf>:

	void set_velocity_d(float velocity_d_buf){
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	ed87 0a00 	vstr	s0, [r7]
		this->velocity_d_buf = velocity_d_buf;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN15STM_MotorSystem12set_torque_pEf>:



	void set_torque_p(float torque_p_buf){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	ed87 0a00 	vstr	s0, [r7]
		this->torque_p_buf = torque_p_buf;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
	}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_ZN15STM_MotorSystem12set_torque_iEf>:

	void set_torque_i(float torque_i_buf){
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	ed87 0a00 	vstr	s0, [r7]
		this->torque_i_buf = torque_i_buf;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZN15STM_MotorSystem12set_torque_dEf>:

	void set_torque_d(float torque_d_buf){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	ed87 0a00 	vstr	s0, [r7]
		this->torque_d_buf = torque_d_buf;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_ZN15STM_MotorSystem11set_angle_pEf>:



	void set_angle_p(float angle_p_buf){
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	ed87 0a00 	vstr	s0, [r7]
		this->angle_p_buf = angle_p_buf;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN15STM_MotorSystem11set_angle_iEf>:

	void set_angle_i(float angle_i_buf){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	ed87 0a00 	vstr	s0, [r7]
		this->angle_i_buf = angle_i_buf;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
	}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_ZN15STM_MotorSystem11set_angle_dEf>:

	void set_angle_d(float angle_d_buf){
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	ed87 0a00 	vstr	s0, [r7]
		this->angle_d_buf = angle_d_buf;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	659a      	str	r2, [r3, #88]	; 0x58
	}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_ZN15STM_MotorSystem9set_coastEv>:

inline void STM_MotorSystem::set_dir(GPIO_PinState dir){
	HAL_GPIO_WritePin (this->GPIO_dir,this->GPIO_PIN_dir,dir);
}

inline 	void STM_MotorSystem::set_coast(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	this->MotorSystem_mode_buf = COAST_CONTROL;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	675a      	str	r2, [r3, #116]	; 0x74
	this->STM_MotorSystem_start();
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f001 f92a 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN15STM_MotorSystem20STM_MotorSystem_stopEv>:

inline void STM_MotorSystem::STM_MotorSystem_stop(){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	MotorSystem_mode_buf = SYSTEM_STOP;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	675a      	str	r2, [r3, #116]	; 0x74
	STM_MotorSystem_start();
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 f91c 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>:

#include <CAN.hpp>
#include <STM_MotorSystem.hpp>


USER_CAN::USER_CAN(CAN_HandleTypeDef * _use_hcan){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

	this->_use_hcan = _use_hcan;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40


	filter.FilterActivation = 1; //filter enable = 1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	621a      	str	r2, [r3, #32]
	filter.FilterBank = 0; //used filterbank 0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
 	filter.FilterFIFOAssignment = 0; //rxdata to fifo0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
	filter.FilterMode = 0; //filter mode is mask mode
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
	filter.FilterScale = 0; //filterscale is dual 16bits
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
	filter.FilterMaskIdHigh = 0xf << 5; //filter mask
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001288:	609a      	str	r2, [r3, #8]
	filter.SlaveStartFilterBank = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24


	TxHeader.DLC = 4; //データ長（4byte）
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
	TxHeader.IDE = 0; //標準識別子
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
	TxHeader.RTR = 0; //データフレーム (現状モータシステムからホストにデータ要求はしないと思うから)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
	TxHeader.TransmitGlobalTime = DISABLE; //タイムスタンプ無効
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

}
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_ZN8USER_CAN10use_tx_CANEmf>:

void USER_CAN::use_tx_CAN(uint32_t cmd,float data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	ed87 0a01 	vstr	s0, [r7, #4]

	can_data tx;

	uint32_t mailbox;

	tx.low_data = data;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = cmd+get_id_CAN();
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f815 	bl	80012fa <_ZN8USER_CAN10get_id_CANEv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	441a      	add	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_CAN_AddTxMessage(_use_hcan,&TxHeader, tx.low_data_raw,&mailbox);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	f107 0218 	add.w	r2, r7, #24
 80012ee:	f003 f9e0 	bl	80046b2 <HAL_CAN_AddTxMessage>
}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_ZN8USER_CAN10get_id_CANEv>:

uint8_t USER_CAN::get_id_CAN(){
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	id_set id;
	id.bit0 = HAL_GPIO_ReadPin(GPIO_idbit0,GPIO_PIN_idbit0);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f004 f896 	bl	8005440 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	f362 0300 	bfi	r3, r2, #0, #1
 8001322:	733b      	strb	r3, [r7, #12]
	id.bit1 = HAL_GPIO_ReadPin(GPIO_idbit1,GPIO_PIN_idbit1);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f004 f885 	bl	8005440 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7b3b      	ldrb	r3, [r7, #12]
 8001340:	f362 0341 	bfi	r3, r2, #1, #1
 8001344:	733b      	strb	r3, [r7, #12]
	id.bit2 = HAL_GPIO_ReadPin(GPIO_idbit2,GPIO_PIN_idbit2);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f004 f874 	bl	8005440 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f362 0382 	bfi	r3, r2, #2, #1
 8001366:	733b      	strb	r3, [r7, #12]
	id.bit3 = HAL_GPIO_ReadPin(GPIO_idbit3,GPIO_PIN_idbit3);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f004 f863 	bl	8005440 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7b3b      	ldrb	r3, [r7, #12]
 8001384:	f362 03c3 	bfi	r3, r2, #3, #1
 8001388:	733b      	strb	r3, [r7, #12]
	return id.all_data;
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001390:	b2db      	uxtb	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_ZN8USER_CAN10filter_setEv>:
	this->GPIO_PIN_idbit1 = GPIO_PIN_idbit1;
	this->GPIO_PIN_idbit2 = GPIO_PIN_idbit2;
	this->GPIO_PIN_idbit3 = GPIO_PIN_idbit3;
}

void USER_CAN::filter_set(){
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]

	filter.FilterIdHigh = this->get_id_CAN() << 5;
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa9 	bl	80012fa <_ZN8USER_CAN10get_id_CANEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]

	filter.SlaveStartFilterBank = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(_use_hcan, &filter);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f868 	bl	8004496 <HAL_CAN_ConfigFilter>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>:

void USER_CAN::use_rx_CAN(CAN_HandleTypeDef *_hcan){
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08d      	sub	sp, #52	; 0x34
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	if(_hcan != _use_hcan){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 81eb 	bne.w	80017bc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3ec>
		return;
	}

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 80013e6:	4bde      	ldr	r3, [pc, #888]	; (8001760 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x390>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_RxHeaderTypeDef RxHeader;
	can_data rx;

	if(HAL_CAN_GetRxMessage(_use_hcan, CAN_RX_FIFO0, &RxHeader, rx.low_data_raw) == HAL_OK){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	f107 0210 	add.w	r2, r7, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	f003 fa35 	bl	8004868 <HAL_CAN_GetRxMessage>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 81eb 	beq.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
		switch(RxHeader.StdId & 0xfff0){
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001416:	4013      	ands	r3, r2
 8001418:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800141c:	f000 8159 	beq.w	80016d2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x302>
 8001420:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8001424:	f200 81df 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001428:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 800142c:	f000 8149 	beq.w	80016c2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2f2>
 8001430:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8001434:	f200 81d7 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001438:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 800143c:	f000 8139 	beq.w	80016b2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2e2>
 8001440:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 8001444:	f200 81cf 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001448:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800144c:	f000 8129 	beq.w	80016a2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2d2>
 8001450:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8001454:	f200 81c7 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001458:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800145c:	f000 8119 	beq.w	8001692 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2c2>
 8001460:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001464:	f200 81bf 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001468:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 800146c:	f000 8109 	beq.w	8001682 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2b2>
 8001470:	f5b3 6fee 	cmp.w	r3, #1904	; 0x770
 8001474:	f200 81b7 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001478:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 800147c:	f000 80f9 	beq.w	8001672 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x2a2>
 8001480:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 8001484:	f200 81af 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001488:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 800148c:	f000 80e9 	beq.w	8001662 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x292>
 8001490:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 8001494:	f200 81a7 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001498:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 800149c:	f000 80d9 	beq.w	8001652 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x282>
 80014a0:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80014a4:	f200 819f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014a8:	f5b3 6fe6 	cmp.w	r3, #1840	; 0x730
 80014ac:	f000 80c9 	beq.w	8001642 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x272>
 80014b0:	f5b3 6fe6 	cmp.w	r3, #1840	; 0x730
 80014b4:	f200 8197 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014b8:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80014bc:	f000 80b9 	beq.w	8001632 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x262>
 80014c0:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 80014c4:	f200 818f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014c8:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 80014cc:	f000 80a9 	beq.w	8001622 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x252>
 80014d0:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 80014d4:	f200 8187 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014d8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80014dc:	f000 8121 	beq.w	8001722 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x352>
 80014e0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80014e4:	f200 817f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80014ec:	f000 8111 	beq.w	8001712 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x342>
 80014f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80014f4:	f200 8177 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80014f8:	f5b3 6fc6 	cmp.w	r3, #1584	; 0x630
 80014fc:	f000 8101 	beq.w	8001702 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x332>
 8001500:	f5b3 6fc6 	cmp.w	r3, #1584	; 0x630
 8001504:	f200 816f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001508:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800150c:	f000 80f1 	beq.w	80016f2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x322>
 8001510:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8001514:	f200 8167 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001518:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800151c:	f000 80e1 	beq.w	80016e2 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x312>
 8001520:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8001524:	f200 815f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001528:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 800152c:	f000 8148 	beq.w	80017c0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3f0>
 8001530:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8001534:	f200 8157 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001538:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 800153c:	f000 80fc 	beq.w	8001738 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x368>
 8001540:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8001544:	f200 814f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001548:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800154c:	f000 813a 	beq.w	80017c4 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3f4>
 8001550:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8001554:	f200 8147 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001558:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800155c:	f000 8134 	beq.w	80017c8 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3f8>
 8001560:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001564:	f200 813f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001568:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 800156c:	f000 812e 	beq.w	80017cc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3fc>
 8001570:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 8001574:	f200 8137 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001578:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800157c:	f000 8102 	beq.w	8001784 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3b4>
 8001580:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8001584:	f200 812f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001588:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800158c:	f000 80ea 	beq.w	8001764 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x394>
 8001590:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001594:	f200 8127 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001598:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 800159c:	f000 8118 	beq.w	80017d0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x400>
 80015a0:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80015a4:	f200 811f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015a8:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 80015ac:	f000 8112 	beq.w	80017d4 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x404>
 80015b0:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 80015b4:	f200 8117 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80015bc:	f000 810c 	beq.w	80017d8 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x408>
 80015c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80015c4:	f200 810f 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015c8:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80015cc:	f000 8106 	beq.w	80017dc <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x40c>
 80015d0:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80015d4:	f200 8107 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015d8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80015dc:	f000 8100 	beq.w	80017e0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x410>
 80015e0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80015e4:	f200 80ff 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015e8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80015ec:	f000 80fa 	beq.w	80017e4 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x414>
 80015f0:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80015f4:	f200 80f7 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 80015f8:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80015fc:	f000 80a0 	beq.w	8001740 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x370>
 8001600:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001604:	f200 80ef 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001608:	2b30      	cmp	r3, #48	; 0x30
 800160a:	f000 80d3 	beq.w	80017b4 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3e4>
 800160e:	2b30      	cmp	r3, #48	; 0x30
 8001610:	f200 80e9 	bhi.w	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001614:	2b10      	cmp	r3, #16
 8001616:	f000 80c5 	beq.w	80017a4 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3d4>
 800161a:	2b20      	cmp	r3, #32
 800161c:	f000 80c6 	beq.w	80017ac <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x3dc>
 8001620:	e0e1      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
			case SET_VELOCITY:
				ms->set_velocity(rx.low_data);
 8001622:	edd7 7a02 	vldr	s15, [r7, #8]
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800162c:	f7ff fcc1 	bl	8000fb2 <_ZN15STM_MotorSystem12set_velocityEf>
				break;
 8001630:	e0d9      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_VELOCITY_P:
				ms->set_velocity_p(rx.low_data);
 8001632:	edd7 7a02 	vldr	s15, [r7, #8]
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800163c:	f7ff fd67 	bl	800110e <_ZN15STM_MotorSystem14set_velocity_pEf>
				break;
 8001640:	e0d1      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_VELOCITY_I:
				ms->set_velocity_i(rx.low_data);
 8001642:	edd7 7a02 	vldr	s15, [r7, #8]
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800164c:	f7ff fd6e 	bl	800112c <_ZN15STM_MotorSystem14set_velocity_iEf>
				break;
 8001650:	e0c9      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_VELOCITY_D:
				ms->set_velocity_d(rx.low_data);
 8001652:	edd7 7a02 	vldr	s15, [r7, #8]
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800165c:	f7ff fd75 	bl	800114a <_ZN15STM_MotorSystem14set_velocity_dEf>
				break;
 8001660:	e0c1      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_TORQUE:
				ms->set_torque(rx.low_data);
 8001662:	edd7 7a02 	vldr	s15, [r7, #8]
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800166c:	f7ff fcb4 	bl	8000fd8 <_ZN15STM_MotorSystem10set_torqueEf>
				break;
 8001670:	e0b9      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_TORQUE_P:
				ms->set_torque_p(rx.low_data);
 8001672:	edd7 7a02 	vldr	s15, [r7, #8]
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800167c:	f7ff fd74 	bl	8001168 <_ZN15STM_MotorSystem12set_torque_pEf>
				break;
 8001680:	e0b1      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_TORQUE_I:
				ms->set_torque_i(rx.low_data);
 8001682:	edd7 7a02 	vldr	s15, [r7, #8]
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800168c:	f7ff fd7b 	bl	8001186 <_ZN15STM_MotorSystem12set_torque_iEf>
				break;
 8001690:	e0a9      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_TORQUE_D:
				ms->set_torque_d(rx.low_data);
 8001692:	edd7 7a02 	vldr	s15, [r7, #8]
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800169c:	f7ff fd82 	bl	80011a4 <_ZN15STM_MotorSystem12set_torque_dEf>
				break;
 80016a0:	e0a1      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_ANGLE:
				ms->set_angle(rx.low_data);
 80016a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016ac:	f7ff fcb4 	bl	8001018 <_ZN15STM_MotorSystem9set_angleEf>
				break;
 80016b0:	e099      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_ANGLE_P:
				ms->set_angle_p(rx.low_data);
 80016b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016bc:	f7ff fd81 	bl	80011c2 <_ZN15STM_MotorSystem11set_angle_pEf>
				break;
 80016c0:	e091      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_ANGLE_I:
				ms->set_angle_i(rx.low_data);
 80016c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016cc:	f7ff fd88 	bl	80011e0 <_ZN15STM_MotorSystem11set_angle_iEf>
				break;
 80016d0:	e089      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_ANGLE_D:
				ms->set_angle_d(rx.low_data);
 80016d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016dc:	f7ff fd8f 	bl	80011fe <_ZN15STM_MotorSystem11set_angle_dEf>
				break;
 80016e0:	e081      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_VOLTAGE:
				ms->set_volt(rx.low_data);
 80016e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016ec:	f7ff fcd3 	bl	8001096 <_ZN15STM_MotorSystem8set_voltEf>
				break;
 80016f0:	e079      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_PPR:
				ms->set_ppr(rx.low_data);
 80016f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016fc:	f7ff fce9 	bl	80010d2 <_ZN15STM_MotorSystem7set_pprEf>
				break;
 8001700:	e071      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_KT:
				ms->set_kt(rx.low_data);
 8001702:	edd7 7a02 	vldr	s15, [r7, #8]
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800170c:	f7ff fcd2 	bl	80010b4 <_ZN15STM_MotorSystem6set_ktEf>
				break;
 8001710:	e069      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_CURRENT_LIMIT:
				ms->set_current_limit(rx.low_data);
 8001712:	edd7 7a02 	vldr	s15, [r7, #8]
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800171c:	f7ff fce8 	bl	80010f0 <_ZN15STM_MotorSystem17set_current_limitEf>
				break;
 8001720:	e061      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_ADC_GAIN:
				ms->use_adc.ADC_set_gain(rx.low_data);
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001728:	edd7 7a02 	vldr	s15, [r7, #8]
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc1a 	bl	8000f6a <_ZN3ADC12ADC_set_gainEf>
				break;
 8001736:	e056      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_COAST:
				ms->set_coast();
 8001738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800173a:	f7ff fd6f 	bl	800121c <_ZN15STM_MotorSystem9set_coastEv>
				break;
 800173e:	e052      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SET_RESET:
				break;

			case GET_VELOCITY:
				ms->use_can.use_tx_CAN(GET_VELOCITY,ms->com_get_velocity());
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 8001746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001748:	f7ff fc79 	bl	800103e <_ZN15STM_MotorSystem16com_get_velocityEv>
 800174c:	eef0 7a40 	vmov.f32	s15, s0
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fdad 	bl	80012b8 <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 800175e:	e042      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
 8001760:	2000008c 	.word	0x2000008c

			case GET_TORQUE_D:
				break;

			case GET_CURRENT:
				ms->use_can.use_tx_CAN(GET_CURRENT,ms->com_get_current());
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800176a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800176c:	f7ff fc76 	bl	800105c <_ZN15STM_MotorSystem15com_get_currentEv>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	f44f 6190 	mov.w	r1, #1152	; 0x480
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff fd9b 	bl	80012b8 <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 8001782:	e030      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case GET_SUM_ANGLE:
				ms->use_can.use_tx_CAN(GET_SUM_ANGLE,ms->com_get_sum_angle());
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	f103 04fc 	add.w	r4, r3, #252	; 0xfc
 800178a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800178c:	f7ff fc75 	bl	800107a <_ZN15STM_MotorSystem17com_get_sum_angleEv>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f44f 6192 	mov.w	r1, #1168	; 0x490
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fd8b 	bl	80012b8 <_ZN8USER_CAN10use_tx_CANEmf>
				break;
 80017a2:	e020      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case GET_ANGLE_D:
				break;

			case SYSTEM_INIT:
				ms->STM_MotorSystem_init();
 80017a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017a6:	f000 fe33 	bl	8002410 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>
				break;
 80017aa:	e01c      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case SYSTEM_START:
				ms->STM_MotorSystem_start();
 80017ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017ae:	f000 fe69 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
				break;
 80017b2:	e018      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>

			case MOTOR_SYSTEM_STOP:
				ms->STM_MotorSystem_stop();
 80017b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b6:	f7ff fd3f 	bl	8001238 <_ZN15STM_MotorSystem20STM_MotorSystem_stopEv>
 80017ba:	e014      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
		return;
 80017bc:	bf00      	nop
 80017be:	e012      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017c0:	bf00      	nop
 80017c2:	e010      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017c4:	bf00      	nop
 80017c6:	e00e      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017c8:	bf00      	nop
 80017ca:	e00c      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017cc:	bf00      	nop
 80017ce:	e00a      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017d0:	bf00      	nop
 80017d2:	e008      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017d4:	bf00      	nop
 80017d6:	e006      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef+0x416>
				break;
 80017e4:	bf00      	nop
			}

		}
}
 80017e6:	3734      	adds	r7, #52	; 0x34
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <HAL_CAN_RxFifo0MsgPendingCallback>:

#ifndef debug

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //受信割り込みコールバック
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 	STM_MotorSystem *ms = STM_MotorSystem::_ms;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	ms->use_can.use_rx_CAN(hcan);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	33fc      	adds	r3, #252	; 0xfc
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fde5 	bl	80013d0 <_ZN8USER_CAN10use_rx_CANEP19__CAN_HandleTypeDef>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000008c 	.word	0x2000008c

08001814 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>:
 *      Author: 0_hayate
 */

#include <ENCODER.hpp>

ENCODER::ENCODER(TIM_HandleTypeDef *_encoder_timer)
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
{
	this->_encoder_timer = _encoder_timer;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	609a      	str	r2, [r3, #8]
	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	0852      	lsrs	r2, r2, #1
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_count = arr/2;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	085a      	lsrs	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
	ofset_count = arr/2;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	085a      	lsrs	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	213c      	movs	r1, #60	; 0x3c
 8001850:	4618      	mov	r0, r3
 8001852:	f005 fb61 	bl	8006f18 <HAL_TIM_Encoder_Start>

	return;
}
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN7ENCODER9get_ofsetEv>:


uint32_t ENCODER::get_ofset(){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	return this->ofset_count;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_ZN7ENCODER12init_ENCODEREv>:

void ENCODER::init_ENCODER(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Stop(this->_encoder_timer,TIM_CHANNEL_ALL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	213c      	movs	r1, #60	; 0x3c
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fbd4 	bl	8007034 <HAL_TIM_Encoder_Stop>

	uint32_t arr;
	arr = this->_encoder_timer->Instance->ARR; //timerカウントの最大値
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	60fb      	str	r3, [r7, #12]
	this->_encoder_timer->Instance->CNT = arr/2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(this->_encoder_timer,TIM_CHANNEL_ALL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	213c      	movs	r1, #60	; 0x3c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 fb35 	bl	8006f18 <HAL_TIM_Encoder_Start>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <_ZN3PWMC1EP17TIM_HandleTypeDefm>:
 */


#include <PWM.hpp>

PWM::PWM(TIM_HandleTypeDef *_pwm_timer,uint32_t TIM_CHANNEL_n ){ //TIMxCHn n=1,2,3...
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	this->_pwm_timer = _pwm_timer;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	605a      	str	r2, [r3, #4]
	this->supply_voltage = 12;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xd8>)
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d84c      	bhi.n	8001970 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xb8>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <_ZN3PWMC1EP17TIM_HandleTypeDefm+0x24>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	08001911 	.word	0x08001911
 80018e0:	08001971 	.word	0x08001971
 80018e4:	08001971 	.word	0x08001971
 80018e8:	08001971 	.word	0x08001971
 80018ec:	08001929 	.word	0x08001929
 80018f0:	08001971 	.word	0x08001971
 80018f4:	08001971 	.word	0x08001971
 80018f8:	08001971 	.word	0x08001971
 80018fc:	08001941 	.word	0x08001941
 8001900:	08001971 	.word	0x08001971
 8001904:	08001971 	.word	0x08001971
 8001908:	08001971 	.word	0x08001971
 800190c:	08001959 	.word	0x08001959

	switch(TIM_CHANNEL_n){
	case TIM_CHANNEL_1:
		CCRn = & this->_pwm_timer->Instance->CCR1;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
		break;
 8001926:	e024      	b.n	8001972 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_2:
		CCRn = & this->_pwm_timer->Instance->CCR2;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
		break;
 800193e:	e018      	b.n	8001972 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_3:
		CCRn = & this->_pwm_timer->Instance->CCR3;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		break;
 8001956:	e00c      	b.n	8001972 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	case TIM_CHANNEL_4:
		CCRn = & this->_pwm_timer->Instance->CCR4;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	609a      	str	r2, [r3, #8]
		*CCRn = 0;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
		break;
 800196e:	e000      	b.n	8001972 <_ZN3PWMC1EP17TIM_HandleTypeDefm+0xba>

	default:
		break;
 8001970:	bf00      	nop

	}

	HAL_TIM_PWM_Start(_pwm_timer, TIM_CHANNEL_n);
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f005 f93d 	bl	8006bf4 <HAL_TIM_PWM_Start>

	this->arr = this->_pwm_timer->Instance->ARR;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	60da      	str	r2, [r3, #12]

}
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	41400000 	.word	0x41400000

08001994 <_ZN3PWM7PWM_outEf>:

void PWM::PWM_out(float voltage){
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	ed87 0a00 	vstr	s0, [r7]

	uint32_t buf;

	buf = arr / supply_voltage * voltage;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019b6:	edd7 7a00 	vldr	s15, [r7]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	60fb      	str	r3, [r7, #12]

	if(buf > arr){ //pwmdutyリミット
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d902      	bls.n	80019d8 <_ZN3PWM7PWM_outEf+0x44>
		buf = arr;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	60fb      	str	r3, [r7, #12]
	}

	*CCRn = buf;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_ZN3PWM8PWM_stopEv>:

void PWM::PWM_stop(){ //pwmタイマ自体は動作している。dutyを0にしているだけ
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	*CCRn = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZN3PID14PID_controllerEf>:
	float d;
	d = this->d;
	return d;
}

inline float PID::PID_controller(float error){
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	ed87 0a00 	vstr	s0, [r7]
	float MV = 0; //PIDコントローラ操作量
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]

	i_sum = i_sum + dt*(error+error_before)/2; //微小時間の間線形に動いていたとして
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	ed93 6a06 	vldr	s12, [r3, #24]
 8001a2c:	edd7 7a00 	vldr	s15, [r7]
 8001a30:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a38:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edc3 7a05 	vstr	s15, [r3, #20]

	p_mv = this->p*error;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	edd7 7a00 	vldr	s15, [r7]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edc3 7a07 	vstr	s15, [r3, #28]
	i_mv = this->i*i_sum;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edc3 7a08 	vstr	s15, [r3, #32]
	d_mv = this->d*(error-error_before)/dt;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a80:	edd7 6a00 	vldr	s13, [r7]
 8001a84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	MV = p_mv+i_mv+d_mv;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	edc7 7a03 	vstr	s15, [r7, #12]
	error_before = error;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	619a      	str	r2, [r3, #24]

	return MV;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	ee07 3a90 	vmov	s15, r3
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN7ENCODER9get_countEv>:

	void init_ENCODER();

};

inline uint32_t ENCODER::get_count(){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	ENCODER_count = _encoder_timer->Instance->CNT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
	return ENCODER_count;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>:
inline void STM_MotorSystem::set_dir(GPIO_PinState dir){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin (this->GPIO_dir,this->GPIO_PIN_dir,dir);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f003 fcad 	bl	8005470 <HAL_GPIO_WritePin>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZN15STM_MotorSystem13motor_controlEv>:

#include <STM_MotorSystem.hpp>

#define PI 3.141592f

void STM_MotorSystem::motor_control(){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	 * 機能追加の際はMotorSystem_start()内に初期化文を書き、タイマー割り込み周期ごとの処理をここに書く。
	 * 割り込み周期ごとの処理書く際、重複する処理はフォースルーで収束させる。
	 * 制御周期を長期に変化させたい場合は各caseにbreakを記述し、特定のcaseに達したら処理を行わせcontrol_switchを初期化する。
	 * 重複する処理や、制御周期を長期にしたい場合defaultに処理をおくか、breakさせるのがラクだが例外判定ができないため必ずdefaultには例外処理をおく(システム停止でなくてもよい)。
	 */
	control_switch++;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	switch(this->MotorSystem_mode){
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d012      	beq.n	8001b68 <_ZN15STM_MotorSystem13motor_controlEv+0x4a>
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	f080 809a 	bcs.w	8001c7e <_ZN15STM_MotorSystem13motor_controlEv+0x160>
 8001b4a:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d04d      	beq.n	8001bee <_ZN15STM_MotorSystem13motor_controlEv+0xd0>
 8001b52:	f5b3 4f71 	cmp.w	r3, #61696	; 0xf100
 8001b56:	f080 8092 	bcs.w	8001c7e <_ZN15STM_MotorSystem13motor_controlEv+0x160>
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d074      	beq.n	8001c48 <_ZN15STM_MotorSystem13motor_controlEv+0x12a>
 8001b5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02a      	beq.n	8001bbc <_ZN15STM_MotorSystem13motor_controlEv+0x9e>
 8001b66:	e08a      	b.n	8001c7e <_ZN15STM_MotorSystem13motor_controlEv+0x160>
	case VELOCITY_CONTROL:
		{switch(control_switch){
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d014      	beq.n	8001b9c <_ZN15STM_MotorSystem13motor_controlEv+0x7e>
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	dc1a      	bgt.n	8001bac <_ZN15STM_MotorSystem13motor_controlEv+0x8e>
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <_ZN15STM_MotorSystem13motor_controlEv+0x68>
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd16      	ble.n	8001bac <_ZN15STM_MotorSystem13motor_controlEv+0x8e>
 8001b7e:	3b02      	subs	r3, #2
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d813      	bhi.n	8001bac <_ZN15STM_MotorSystem13motor_controlEv+0x8e>
 8001b84:	e006      	b.n	8001b94 <_ZN15STM_MotorSystem13motor_controlEv+0x76>
		case 1:
			this->controller_velocity();
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f88f 	bl	8001caa <_ZN15STM_MotorSystem19controller_velocityEv>
			this->controller_torque();
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8d8 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 8001b92:	e012      	b.n	8001bba <_ZN15STM_MotorSystem13motor_controlEv+0x9c>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			this->controller_torque();
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8d4 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 8001b9a:	e00e      	b.n	8001bba <_ZN15STM_MotorSystem13motor_controlEv+0x9c>

		case 10:
			this->controller_torque();
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8d0 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			break;
 8001baa:	e006      	b.n	8001bba <_ZN15STM_MotorSystem13motor_controlEv+0x9c>

		default :
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	675a      	str	r2, [r3, #116]	; 0x74
			this->STM_MotorSystem_start();
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fc66 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001bb8:	bf00      	nop

		}}break;
 8001bba:	e072      	b.n	8001ca2 <_ZN15STM_MotorSystem13motor_controlEv+0x184>

	case TORQUE_CONTROL:
		this->current_tar = this->current_buf;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	615a      	str	r2, [r3, #20]
		{switch(control_switch){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <_ZN15STM_MotorSystem13motor_controlEv+0xc0>
		case 1:
			this->controller_torque();
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8b7 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			break;
 8001bdc:	e006      	b.n	8001bec <_ZN15STM_MotorSystem13motor_controlEv+0xce>

		default:
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	675a      	str	r2, [r3, #116]	; 0x74
			this->STM_MotorSystem_start();
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fc4d 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001bea:	bf00      	nop

		}}break;
 8001bec:	e059      	b.n	8001ca2 <_ZN15STM_MotorSystem13motor_controlEv+0x184>

	case ANGLE_CONTROL:
		{switch(control_switch){
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001bf4:	2b0a      	cmp	r3, #10
 8001bf6:	d017      	beq.n	8001c28 <_ZN15STM_MotorSystem13motor_controlEv+0x10a>
 8001bf8:	2b0a      	cmp	r3, #10
 8001bfa:	dc1d      	bgt.n	8001c38 <_ZN15STM_MotorSystem13motor_controlEv+0x11a>
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d005      	beq.n	8001c0c <_ZN15STM_MotorSystem13motor_controlEv+0xee>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dd19      	ble.n	8001c38 <_ZN15STM_MotorSystem13motor_controlEv+0x11a>
 8001c04:	3b02      	subs	r3, #2
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d816      	bhi.n	8001c38 <_ZN15STM_MotorSystem13motor_controlEv+0x11a>
 8001c0a:	e009      	b.n	8001c20 <_ZN15STM_MotorSystem13motor_controlEv+0x102>
		case 1:
			this->controller_angle();
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f916 	bl	8001e3e <_ZN15STM_MotorSystem16controller_angleEv>
			this->controller_velocity();
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f849 	bl	8001caa <_ZN15STM_MotorSystem19controller_velocityEv>
			this->controller_torque();
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f892 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 8001c1e:	e012      	b.n	8001c46 <_ZN15STM_MotorSystem13motor_controlEv+0x128>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			this->controller_torque();
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f88e 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			break;
 8001c26:	e00e      	b.n	8001c46 <_ZN15STM_MotorSystem13motor_controlEv+0x128>

		case 10:
			this->controller_torque();
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f88a 	bl	8001d42 <_ZN15STM_MotorSystem17controller_torqueEv>
			control_switch = 0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			break;
 8001c36:	e006      	b.n	8001c46 <_ZN15STM_MotorSystem13motor_controlEv+0x128>

		default :
			this->MotorSystem_mode_buf = SYSTEM_STOP;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	675a      	str	r2, [r3, #116]	; 0x74
			this->STM_MotorSystem_start();
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fc20 	bl	8002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>
			break;
 8001c44:	bf00      	nop

		}}break;
 8001c46:	e02c      	b.n	8001ca2 <_ZN15STM_MotorSystem13motor_controlEv+0x184>

	case COAST_CONTROL:
		HAL_TIM_Base_Stop_IT(_control_timer);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 ff41 	bl	8006ad4 <HAL_TIM_Base_Stop_IT>
		this->use_pwm.PWM_stop();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fec7 	bl	80019ec <_ZN3PWM8PWM_stopEv>
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f003 fc00 	bl	8005470 <HAL_GPIO_WritePin>
		this->use_adc.ADC_stop();
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f801 	bl	8000c7e <_ZN3ADC8ADC_stopEv>
		break;
 8001c7c:	e011      	b.n	8001ca2 <_ZN15STM_MotorSystem13motor_controlEv+0x184>

	default:
		HAL_TIM_Base_Stop_IT(_control_timer);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 ff26 	bl	8006ad4 <HAL_TIM_Base_Stop_IT>
		this->use_pwm.PWM_stop();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff feac 	bl	80019ec <_ZN3PWM8PWM_stopEv>
		this->use_adc.ADC_stop();
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe ffef 	bl	8000c7e <_ZN3ADC8ADC_stopEv>
		break;
 8001ca0:	bf00      	nop

	}
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN15STM_MotorSystem19controller_velocityEv>:




void STM_MotorSystem::controller_velocity(){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	this->velocity_ref = this->get_velocity();
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8f0 	bl	8001e98 <_ZN15STM_MotorSystem12get_velocityEv>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
	float e_velocity;
	this->velocity_tar = this->velocity_buf;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	605a      	str	r2, [r3, #4]

	if(fabsf(velocity_tar) > velocity_limit){
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	dd14      	ble.n	8001d0e <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			if(velocity_tar > 0){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	dd04      	ble.n	8001cfe <_ZN15STM_MotorSystem19controller_velocityEv+0x54>
				velocity_tar = velocity_limit;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	e007      	b.n	8001d0e <_ZN15STM_MotorSystem19controller_velocityEv+0x64>
			}else{
				velocity_tar = -1*velocity_limit;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d04:	eef1 7a67 	vneg.f32	s15, s15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edc3 7a01 	vstr	s15, [r3, #4]
			}
		}

	e_velocity = this->velocity_tar - this->velocity_ref;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	edc7 7a03 	vstr	s15, [r7, #12]

	current_tar = this->pid_velocity.PID_controller(e_velocity);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3384      	adds	r3, #132	; 0x84
 8001d26:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fe6c 	bl	8001a08 <_ZN3PID14PID_controllerEf>
 8001d30:	eef0 7a40 	vmov.f32	s15, s0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	edc3 7a05 	vstr	s15, [r3, #20]

	return;
 8001d3a:	bf00      	nop
}
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_ZN15STM_MotorSystem17controller_torqueEv>:



void STM_MotorSystem::controller_torque(){
 8001d42:	b580      	push	{r7, lr}
 8001d44:	ed2d 8b02 	vpush	{d8}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	float e_current;
	float volt_tar;

	if(fabsf(current_tar) > current_limit){
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d54:	eeb0 7ae7 	vabs.f32	s14, s15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd14      	ble.n	8001d92 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				if(current_tar > 0){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dd04      	ble.n	8001d82 <_ZN15STM_MotorSystem17controller_torqueEv+0x40>
					current_tar = current_limit;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	e007      	b.n	8001d92 <_ZN15STM_MotorSystem17controller_torqueEv+0x50>
				}else{
					current_tar = -1*current_limit;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d88:	eef1 7a67 	vneg.f32	s15, s15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a05 	vstr	s15, [r3, #20]
				}
			}

	e_current = current_tar - this->get_current();
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	ed93 8a05 	vldr	s16, [r3, #20]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f901 	bl	8001fa0 <_ZN15STM_MotorSystem11get_currentEv>
 8001d9e:	eef0 7a40 	vmov.f32	s15, s0
 8001da2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001da6:	edc7 7a03 	vstr	s15, [r7, #12]

	volt_tar = this->pid_torque.PID_controller(e_current);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	33ac      	adds	r3, #172	; 0xac
 8001dae:	ed97 0a03 	vldr	s0, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fe28 	bl	8001a08 <_ZN3PID14PID_controllerEf>
 8001db8:	ed87 0a02 	vstr	s0, [r7, #8]
	volt_tar += velocity_tar*kt + this->velocity_ref*kt; //フィードフォワードとフィードバックをたす
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 6a00 	vldr	s13, [r3]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	edc7 7a02 	vstr	s15, [r7, #8]

	if(volt_tar >= 0){ //モータの回転方向を決める
 8001dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	db04      	blt.n	8001e04 <_ZN15STM_MotorSystem17controller_torqueEv+0xc2>
			dir_f = GPIO_PIN_RESET;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001e02:	e003      	b.n	8001e0c <_ZN15STM_MotorSystem17controller_torqueEv+0xca>
		}else{
			dir_f = GPIO_PIN_SET;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

	this->use_pwm.PWM_out(fabsf(volt_tar));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eef0 7ae7 	vabs.f32	s15, s15
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fdb8 	bl	8001994 <_ZN3PWM7PWM_outEf>
	set_dir(dir_f);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe63 	bl	8001af8 <_ZN15STM_MotorSystem7set_dirE13GPIO_PinState>

	return;
 8001e32:	bf00      	nop
}
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	ecbd 8b02 	vpop	{d8}
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZN15STM_MotorSystem16controller_angleEv>:


void STM_MotorSystem::controller_angle(){
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	this->angle_ref = this->get_angle();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8c2 	bl	8001fd0 <_ZN15STM_MotorSystem9get_angleEv>
 8001e4c:	eef0 7a40 	vmov.f32	s15, s0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	edc3 7a08 	vstr	s15, [r3, #32]
	float e_angle;
	this->angle_tar = this->angle_buf;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

	e_angle = this->angle_tar - this->angle_ref;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	edc7 7a03 	vstr	s15, [r7, #12]

	velocity_buf = this->pid_angle.PID_controller(e_angle);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	33d4      	adds	r3, #212	; 0xd4
 8001e76:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fdc4 	bl	8001a08 <_ZN3PID14PID_controllerEf>
 8001e80:	eef0 7a40 	vmov.f32	s15, s0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edc3 7a02 	vstr	s15, [r3, #8]

	return;
 8001e8a:	bf00      	nop
}
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	0000      	movs	r0, r0
 8001e94:	0000      	movs	r0, r0
	...

08001e98 <_ZN15STM_MotorSystem12get_velocityEv>:



float STM_MotorSystem::get_velocity(){
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	int64_t buf;
	float velocity;

	buf = this->use_encoder.get_count();
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe14 	bl	8001ad4 <_ZN7ENCODER9get_countEv>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	buf -= before_encoder_cnt;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ec6:	1a84      	subs	r4, r0, r2
 8001ec8:	eb61 0503 	sbc.w	r5, r1, r3
 8001ecc:	e9c7 4504 	strd	r4, r5, [r7, #16]
	before_encoder_cnt += buf;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	671a      	str	r2, [r3, #112]	; 0x70
	velocity = buf;
 8001edc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee0:	f7fe fe60 	bl	8000ba4 <__aeabi_l2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
	velocity *=1570.796/ppr;
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7fe fad1 	bl	8000490 <__aeabi_f2d>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe faca 	bl	8000490 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	a121      	add	r1, pc, #132	; (adr r1, 8001f88 <_ZN15STM_MotorSystem12get_velocityEv+0xf0>)
 8001f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f06:	f7fe fc45 	bl	8000794 <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe fb15 	bl	8000540 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fd21 	bl	8000964 <__aeabi_d2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	60fb      	str	r3, [r7, #12]

	velocity = velocity*0.7+0.3*before_vel;
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7fe fab2 	bl	8000490 <__aeabi_f2d>
 8001f2c:	a318      	add	r3, pc, #96	; (adr r3, 8001f90 <_ZN15STM_MotorSystem12get_velocityEv+0xf8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb05 	bl	8000540 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe faa4 	bl	8000490 <__aeabi_f2d>
 8001f48:	a313      	add	r3, pc, #76	; (adr r3, 8001f98 <_ZN15STM_MotorSystem12get_velocityEv+0x100>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe faf7 	bl	8000540 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe f93b 	bl	80001d4 <__adddf3>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fcfd 	bl	8000964 <__aeabi_d2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	60fb      	str	r3, [r7, #12]
	before_vel = velocity;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c

	return velocity;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	ee07 3a90 	vmov	s15, r3
}
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bdb0      	pop	{r4, r5, r7, pc}
 8001f84:	f3af 8000 	nop.w
 8001f88:	1a9fbe77 	.word	0x1a9fbe77
 8001f8c:	40988b2f 	.word	0x40988b2f
 8001f90:	66666666 	.word	0x66666666
 8001f94:	3fe66666 	.word	0x3fe66666
 8001f98:	33333333 	.word	0x33333333
 8001f9c:	3fd33333 	.word	0x3fd33333

08001fa0 <_ZN15STM_MotorSystem11get_currentEv>:


float STM_MotorSystem::get_current(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	this->current_ref = use_adc.ADC_get_current();
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ff98 	bl	8000ee4 <_ZN3ADC15ADC_get_currentEv>
 8001fb4:	eef0 7a40 	vmov.f32	s15, s0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edc3 7a04 	vstr	s15, [r3, #16]
	return current_ref;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
}
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN15STM_MotorSystem9get_angleEv>:

float STM_MotorSystem::get_angle(){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	float angle = this->get_sum_angle();
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f815 	bl	8002008 <_ZN15STM_MotorSystem13get_sum_angleEv>
 8001fde:	ed87 0a03 	vstr	s0, [r7, #12]
	angle = fmodf(angle,2*PI);
 8001fe2:	eddf 0a08 	vldr	s1, [pc, #32]	; 8002004 <_ZN15STM_MotorSystem9get_angleEv+0x34>
 8001fe6:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fea:	f006 fb8d 	bl	8008708 <fmodf>
 8001fee:	ed87 0a03 	vstr	s0, [r7, #12]
	return angle;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	ee07 3a90 	vmov	s15, r3
}
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40c90fd8 	.word	0x40c90fd8

08002008 <_ZN15STM_MotorSystem13get_sum_angleEv>:

float STM_MotorSystem::get_sum_angle(){
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	ed2d 8b02 	vpush	{d8}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	float angle;
	angle = PI/(2*ppr)*(use_encoder.get_count()-use_encoder.get_ofset());
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800201a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800201e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002068 <_ZN15STM_MotorSystem13get_sum_angleEv+0x60>
 8002022:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fd51 	bl	8001ad4 <_ZN7ENCODER9get_countEv>
 8002032:	4604      	mov	r4, r0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc10 	bl	8001860 <_ZN7ENCODER9get_ofsetEv>
 8002040:	4603      	mov	r3, r0
 8002042:	1ae3      	subs	r3, r4, r3
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002050:	edc7 7a03 	vstr	s15, [r7, #12]
	return angle;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	ee07 3a90 	vmov	s15, r3
}
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	ecbd 8b02 	vpop	{d8}
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	40490fd8 	.word	0x40490fd8

0800206c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){ //tim1割り込みコールバック
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

	STM_MotorSystem * ms = STM_MotorSystem::_ms;
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
	ms->motor_control();
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fd4f 	bl	8001b1e <_ZN15STM_MotorSystem13motor_controlEv>
	return;
 8002080:	bf00      	nop
}
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000008c 	.word	0x2000008c

0800208c <_ZN3PIDC1Effff>:
inline PID::PID(float p,float i,float d,float dt):
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6178      	str	r0, [r7, #20]
 8002094:	ed87 0a04 	vstr	s0, [r7, #16]
 8002098:	edc7 0a03 	vstr	s1, [r7, #12]
 800209c:	ed87 1a02 	vstr	s2, [r7, #8]
 80020a0:	edc7 1a01 	vstr	s3, [r7, #4]
		p(p),i(i),d(d),dt(dt),error(0),i_sum(0),error_before(0),p_mv(0),i_mv(0),d_mv(0)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_ZN3PID9PID_set_pEf>:
inline void PID::PID_set_p(float p){
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	ed87 0a00 	vstr	s0, [r7]
	this->p = p;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_ZN3PID9PID_set_iEf>:
inline void PID::PID_set_i(float i){
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	ed87 0a00 	vstr	s0, [r7]
	this->i = i;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	605a      	str	r2, [r3, #4]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_ZN3PID9PID_set_dEf>:
inline void PID::PID_set_d(float d){
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	ed87 0a00 	vstr	s0, [r7]
	this->d = d;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_ZN3PID10PID_set_dtEf>:
inline void PID::PID_set_dt(float dt){
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	ed87 0a00 	vstr	s0, [r7]
	this->dt = dt;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	60da      	str	r2, [r3, #12]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZN3PID9PID_resetEv>:

inline void PID::PID_reset(){
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	i_sum = 0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
	error_before = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>:
	void set_coast_pin(GPIO_TypeDef *GPIO_coast,uint16_t GPIO_PIN_coast){
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	4613      	mov	r3, r2
 80021a2:	80fb      	strh	r3, [r7, #6]
		this->GPIO_PIN_coast = GPIO_PIN_coast;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		this->GPIO_coast = GPIO_coast;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	669a      	str	r2, [r3, #104]	; 0x68
	}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>:
inline void STM_MotorSystem::set_dir_pin(GPIO_TypeDef *GPIO_dir,uint16_t GPIO_PIN_dir){
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
	this->GPIO_PIN_dir = GPIO_PIN_dir;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	this->GPIO_dir = GPIO_dir;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>:
 *      Author: 0_hayate
 */

#include <STM_MotorSystem.hpp>

STM_MotorSystem::STM_MotorSystem(
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
pid_torque(0,0,0,0.0001),
pid_angle(0,0,0,0.001),
use_can(_hcan),
use_pwm(_pwm_timer,TIM_CHANNEL_n),
use_encoder(_encoder_timer),
use_adc(_hadc,3.3)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x200>)
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	65da      	str	r2, [r3, #92]	; 0x5c
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3384      	adds	r3, #132	; 0x84
 8002258:	eddf 1a64 	vldr	s3, [pc, #400]	; 80023ec <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x204>
 800225c:	ed9f 1a64 	vldr	s2, [pc, #400]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002260:	eddf 0a63 	vldr	s1, [pc, #396]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002264:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff0f 	bl	800208c <_ZN3PIDC1Effff>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	33ac      	adds	r3, #172	; 0xac
 8002272:	eddf 1a5e 	vldr	s3, [pc, #376]	; 80023ec <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x204>
 8002276:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 800227a:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 800227e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff02 	bl	800208c <_ZN3PIDC1Effff>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	33d4      	adds	r3, #212	; 0xd4
 800228c:	eddf 1a59 	vldr	s3, [pc, #356]	; 80023f4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x20c>
 8002290:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002294:	eddf 0a56 	vldr	s1, [pc, #344]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 8002298:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80023f0 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x208>
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fef5 	bl	800208c <_ZN3PIDC1Effff>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	33fc      	adds	r3, #252	; 0xfc
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ffd3 	bl	8001254 <_ZN8USER_CANC1EP19__CAN_HandleTypeDef>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fafd 	bl	80018b8 <_ZN3PWMC1EP17TIM_HandleTypeDefm>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80022c4:	6839      	ldr	r1, [r7, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff faa4 	bl	8001814 <_ZN7ENCODERC1EP17TIM_HandleTypeDef>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022d2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80023f8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x210>
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fcef 	bl	8000cbc <_ZN3ADCC1EP19__ADC_HandleTypeDeff>

{

	_ms = this;
 80022de:	4a47      	ldr	r2, [pc, #284]	; (80023fc <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x214>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6013      	str	r3, [r2, #0]

	this->_control_timer = _control_timer;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	67da      	str	r2, [r3, #124]	; 0x7c


	//can id set
	use_can.GPIO_idbit0 = GPIOB;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x218>)
 80022ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	use_can.GPIO_idbit1 = GPIOB;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a42      	ldr	r2, [pc, #264]	; (8002400 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x218>)
 80022f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	use_can.GPIO_idbit2 = GPIOA;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002300:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	use_can.GPIO_idbit3 = GPIOA;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800230a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	use_can.GPIO_PIN_idbit0 = GPIO_PIN_1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	use_can.GPIO_PIN_idbit1 = GPIO_PIN_8;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800231c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	use_can.GPIO_PIN_idbit2 = GPIO_PIN_9;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002326:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	use_can.GPIO_PIN_idbit3 = GPIO_PIN_10;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002330:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c

	use_can.filter_set();
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	33fc      	adds	r3, #252	; 0xfc
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f82e 	bl	800139a <_ZN8USER_CAN10filter_setEv>

	//can通信有効化
	HAL_CAN_Start(_hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f002 f973 	bl	800462a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(_hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8002344:	2102      	movs	r1, #2
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f002 fba0 	bl	8004a8c <HAL_CAN_ActivateNotification>


	//pid init
	pid_velocity.PID_set_dt(0.001);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3384      	adds	r3, #132	; 0x84
 8002350:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023f4 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x20c>
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fefd 	bl	8002154 <_ZN3PID10PID_set_dtEf>
	pid_torque.PID_set_dt(0.0001);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	33ac      	adds	r3, #172	; 0xac
 800235e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80023ec <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x204>
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fef6 	bl	8002154 <_ZN3PID10PID_set_dtEf>

	this->velocity_p_buf = 0;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	639a      	str	r2, [r3, #56]	; 0x38
	this->velocity_i_buf = 0;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c
	this->velocity_d_buf = 0;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

	this->torque_p_buf = 0;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
	this->torque_i_buf = 0;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	649a      	str	r2, [r3, #72]	; 0x48
	this->torque_d_buf = 0;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	64da      	str	r2, [r3, #76]	; 0x4c

	//速度制御用エンコダバッファ初期化
	before_encoder_cnt = use_encoder.get_ofset();
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa5e 	bl	8001860 <_ZN7ENCODER9get_ofsetEv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	671a      	str	r2, [r3, #112]	; 0x70

	//速度、電流制限
	velocity_limit = 100; //ここはそこまで問題じゃない
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a15      	ldr	r2, [pc, #84]	; (8002404 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x21c>)
 80023ae:	60da      	str	r2, [r3, #12]
	current_limit = 10; //こっちはちゃんと設定しないと積分がバグる。とくにストールとかさせたとき
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x220>)
 80023b4:	61da      	str	r2, [r3, #28]

	//a3921のdirピンの操作ピン設定
	set_dir_pin(GPIOB,GPIO_PIN_4);
 80023b6:	2210      	movs	r2, #16
 80023b8:	4911      	ldr	r1, [pc, #68]	; (8002400 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x218>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff feff 	bl	80021be <_ZN15STM_MotorSystem11set_dir_pinEP12GPIO_TypeDeft>

	//coast機能ピン設定
	set_coast_pin(GPIOA,GPIO_PIN_7);
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fee5 	bl	8002196 <_ZN15STM_MotorSystem13set_coast_pinEP12GPIO_TypeDeft>

	//電流センサゲインセット
	this->use_adc.ADC_set_gain(0.025);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800240c <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_+0x224>
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fdc7 	bl	8000f6a <_ZN3ADC12ADC_set_gainEf>


}
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	41400000 	.word	0x41400000
 80023ec:	38d1b717 	.word	0x38d1b717
 80023f0:	00000000 	.word	0x00000000
 80023f4:	3a83126f 	.word	0x3a83126f
 80023f8:	40533333 	.word	0x40533333
 80023fc:	2000008c 	.word	0x2000008c
 8002400:	48000400 	.word	0x48000400
 8002404:	42c80000 	.word	0x42c80000
 8002408:	41200000 	.word	0x41200000
 800240c:	3ccccccd 	.word	0x3ccccccd

08002410 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv>:

void STM_MotorSystem::STM_MotorSystem_init(){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

	if(!init_f){
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11e      	bne.n	8002460 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv+0x50>

		this->use_pwm.PWM_stop(); //PWMdutyを0にする
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fadf 	bl	80019ec <_ZN3PWM8PWM_stopEv>

		this->use_encoder.init_ENCODER(); //エンコダカウント初期化
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fa1f 	bl	8001878 <_ZN7ENCODER12init_ENCODEREv>

		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET); //coast無効化
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002444:	2200      	movs	r2, #0
 8002446:	4619      	mov	r1, r3
 8002448:	f003 f812 	bl	8005470 <HAL_GPIO_WritePin>

		this->use_adc.ADC_calibration(); //adcのキャリブレーション
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fccc 	bl	8000df0 <_ZN3ADC15ADC_calibrationEv>

		init_f = 1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	}

	this->MotorSystem_mode_buf = SYSTEM_STOP; //システムをストップモードにセット
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	675a      	str	r2, [r3, #116]	; 0x74

	this->use_can.use_tx_CAN(SYSTEM_INIT, 0);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	33fc      	adds	r3, #252	; 0xfc
 800246a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002480 <_ZN15STM_MotorSystem20STM_MotorSystem_initEv+0x70>
 800246e:	2110      	movs	r1, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe ff21 	bl	80012b8 <_ZN8USER_CAN10use_tx_CANEmf>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	00000000 	.word	0x00000000

08002484 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv>:


void STM_MotorSystem::STM_MotorSystem_start(){ //スタート毎にモードの初期化が行われる
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(_control_timer);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fb1f 	bl	8006ad4 <HAL_TIM_Base_Stop_IT>
	_control_timer->Instance->CNT = 0; //割り込みタイマカウント初期化
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(_control_timer, TIM_FLAG_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0201 	mvn.w	r2, #1
 80024aa:	611a      	str	r2, [r3, #16]
	this->control_switch = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

	HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_RESET); //coast無効化
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	f002 ffd5 	bl	8005470 <HAL_GPIO_WritePin>

	pid_velocity.PID_reset();
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3384      	adds	r3, #132	; 0x84
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe51 	bl	8002172 <_ZN3PID9PID_resetEv>
	pid_torque.PID_reset();
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	33ac      	adds	r3, #172	; 0xac
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fe4c 	bl	8002172 <_ZN3PID9PID_resetEv>

	switch(MotorSystem_mode_buf){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01b      	beq.n	800251e <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x9a>
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	f080 815f 	bcs.w	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
 80024ee:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f000 80ab 	beq.w	800264e <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x1ca>
 80024f8:	f5b3 4f71 	cmp.w	r3, #61696	; 0xf100
 80024fc:	f080 8156 	bcs.w	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
 8002500:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002504:	4293      	cmp	r3, r2
 8002506:	d069      	beq.n	80025dc <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x158>
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250c:	f080 814e 	bcs.w	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8118 	beq.w	8002746 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x2c2>
 8002516:	2bff      	cmp	r3, #255	; 0xff
 8002518:	f000 812a 	beq.w	8002770 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x2ec>
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
		this->use_adc.ADC_stop();
		HAL_TIM_Base_Start_IT(_control_timer);
		break;
	}
}
 800251c:	e146      	b.n	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
		this->MotorSystem_mode = VELOCITY_CONTROL;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	679a      	str	r2, [r3, #120]	; 0x78
		before_vel = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	65da      	str	r2, [r3, #92]	; 0x5c
		before_encoder_cnt = this->use_encoder.get_count();
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff facd 	bl	8001ad4 <_ZN7ENCODER9get_countEv>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	671a      	str	r2, [r3, #112]	; 0x70
		pid_velocity.PID_set_p(velocity_p_buf); //pid gain set
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	4610      	mov	r0, r2
 8002552:	f7ff fdd2 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_velocity.PID_set_i(velocity_i_buf);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002562:	eeb0 0a67 	vmov.f32	s0, s15
 8002566:	4610      	mov	r0, r2
 8002568:	f7ff fdd6 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_velocity.PID_set_d(velocity_d_buf);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002578:	eeb0 0a67 	vmov.f32	s0, s15
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fdda 	bl	8002136 <_ZN3PID9PID_set_dEf>
		pid_torque.PID_set_p(torque_p_buf);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	4610      	mov	r0, r2
 8002594:	f7ff fdb1 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7ff fdb5 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	4610      	mov	r0, r2
 80025c0:	f7ff fdb9 	bl	8002136 <_ZN3PID9PID_set_dEf>
		this->use_adc.ADC_start();
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fb28 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fa21 	bl	8006a1c <HAL_TIM_Base_Start_IT>
		break;
 80025da:	e0e7      	b.n	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
		this->MotorSystem_mode = TORQUE_CONTROL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f640 72ff 	movw	r2, #4095	; 0xfff
 80025e2:	679a      	str	r2, [r3, #120]	; 0x78
		pid_torque.PID_set_p(torque_p_buf);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7ff fd80 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002606:	eeb0 0a67 	vmov.f32	s0, s15
 800260a:	4610      	mov	r0, r2
 800260c:	f7ff fd84 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff fd88 	bl	8002136 <_ZN3PID9PID_set_dEf>
		this->velocity_tar = 0; //トルクコントロールモードでのフィードフォワード無効化
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
		this->velocity_ref = 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
		this->use_adc.ADC_start();
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe faef 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002646:	4618      	mov	r0, r3
 8002648:	f004 f9e8 	bl	8006a1c <HAL_TIM_Base_Start_IT>
		break;
 800264c:	e0ae      	b.n	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
		this->MotorSystem_mode = ANGLE_CONTROL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f24f 02ff 	movw	r2, #61695	; 0xf0ff
 8002654:	679a      	str	r2, [r3, #120]	; 0x78
		before_vel = 0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
		before_encoder_cnt = this->use_encoder.get_count(); //追加
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fa35 	bl	8001ad4 <_ZN7ENCODER9get_countEv>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	671a      	str	r2, [r3, #112]	; 0x70
		pid_angle.PID_set_p(angle_p_buf); //pid gain set
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800267c:	eeb0 0a67 	vmov.f32	s0, s15
 8002680:	4610      	mov	r0, r2
 8002682:	f7ff fd3a 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_angle.PID_set_i(angle_i_buf);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	4610      	mov	r0, r2
 8002698:	f7ff fd3e 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_angle.PID_set_d(angle_d_buf);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80026a8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff fd42 	bl	8002136 <_ZN3PID9PID_set_dEf>
		pid_velocity.PID_set_p(velocity_p_buf); //pid gain set
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff fd19 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_velocity.PID_set_i(0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3384      	adds	r3, #132	; 0x84
 80026cc:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80027b4 <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x330>
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fd21 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_velocity.PID_set_d(velocity_d_buf);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	4610      	mov	r0, r2
 80026e8:	f7ff fd25 	bl	8002136 <_ZN3PID9PID_set_dEf>
		pid_torque.PID_set_p(torque_p_buf);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7ff fcfc 	bl	80020fa <_ZN3PID9PID_set_pEf>
		pid_torque.PID_set_i(torque_i_buf);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800270e:	eeb0 0a67 	vmov.f32	s0, s15
 8002712:	4610      	mov	r0, r2
 8002714:	f7ff fd00 	bl	8002118 <_ZN3PID9PID_set_iEf>
		pid_torque.PID_set_d(torque_d_buf);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fd04 	bl	8002136 <_ZN3PID9PID_set_dEf>
		this->use_adc.ADC_start();
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fa73 	bl	8000c20 <_ZN3ADC9ADC_startEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f96c 	bl	8006a1c <HAL_TIM_Base_Start_IT>
		break;
 8002744:	e032      	b.n	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
		this->MotorSystem_mode = SYSTEM_STOP;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	679a      	str	r2, [r3, #120]	; 0x78
		this->use_pwm.PWM_stop();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f94a 	bl	80019ec <_ZN3PWM8PWM_stopEv>
		this->use_adc.ADC_stop();
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fa8d 	bl	8000c7e <_ZN3ADC8ADC_stopEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f957 	bl	8006a1c <HAL_TIM_Base_Start_IT>
		break;
 800276e:	e01d      	b.n	80027ac <_ZN15STM_MotorSystem21STM_MotorSystem_startEv+0x328>
		this->MotorSystem_mode = COAST_CONTROL;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	679a      	str	r2, [r3, #120]	; 0x78
		this->use_pwm.PWM_stop();
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f935 	bl	80019ec <_ZN3PWM8PWM_stopEv>
		HAL_GPIO_WritePin(this->GPIO_coast,this->GPIO_PIN_coast,GPIO_PIN_SET);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800278c:	2201      	movs	r2, #1
 800278e:	4619      	mov	r1, r3
 8002790:	f002 fe6e 	bl	8005470 <HAL_GPIO_WritePin>
		this->use_adc.ADC_stop();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fa6f 	bl	8000c7e <_ZN3ADC8ADC_stopEv>
		HAL_TIM_Base_Start_IT(_control_timer);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 f939 	bl	8006a1c <HAL_TIM_Base_Start_IT>
		break;
 80027aa:	bf00      	nop
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00000000 	.word	0x00000000

080027b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80027be:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c0:	f000 fd7a 	bl	80032b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c4:	f000 f826 	bl	8002814 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c8:	f000 fac6 	bl	8002d58 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 80027cc:	f000 f894 	bl	80028f8 <_ZL12MX_ADC2_Initv>
  MX_CAN_Init();
 80027d0:	f000 f8fa 	bl	80029c8 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 80027d4:	f000 f996 	bl	8002b04 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80027d8:	f000 f9f2 	bl	8002bc0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80027dc:	f000 fa88 	bl	8002cf0 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80027e0:	f000 f92e 	bl	8002a40 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  STM_MotorSystem use_ms(&hadc2,&hcan,&htim2,&htim3,TIM_CHANNEL_3,&htim1);
 80027e4:	4638      	mov	r0, r7
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <main+0x48>)
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2308      	movs	r3, #8
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <main+0x4c>)
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <main+0x50>)
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <main+0x54>)
 80027f6:	4906      	ldr	r1, [pc, #24]	; (8002810 <main+0x58>)
 80027f8:	f7ff fcf6 	bl	80021e8 <_ZN15STM_MotorSystemC1EP19__ADC_HandleTypeDefP19__CAN_HandleTypeDefP17TIM_HandleTypeDefS5_mS5_>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <main+0x44>
 80027fe:	bf00      	nop
 8002800:	20000108 	.word	0x20000108
 8002804:	200001a0 	.word	0x200001a0
 8002808:	20000154 	.word	0x20000154
 800280c:	200000e0 	.word	0x200000e0
 8002810:	20000090 	.word	0x20000090

08002814 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b096      	sub	sp, #88	; 0x58
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800281e:	2228      	movs	r2, #40	; 0x28
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f006 f848 	bl	80088b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002848:	2301      	movs	r3, #1
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800284c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002856:	2301      	movs	r3, #1
 8002858:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285a:	2302      	movs	r3, #2
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002864:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fe16 	bl	80054a0 <HAL_RCC_OscConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8002884:	f000 fae2 	bl	8002e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002888:	230f      	movs	r3, #15
 800288a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288c:	2302      	movs	r3, #2
 800288e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fd03 	bl	80062b0 <HAL_RCC_ClockConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80028ba:	f000 fac7 	bl	8002e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80028be:	f241 0381 	movw	r3, #4225	; 0x1081
 80028c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80028c4:	2301      	movs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80028c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 ff23 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80028ea:	f000 faaf 	bl	8002e4c <Error_Handler>
  }
}
 80028ee:	bf00      	nop
 80028f0:	3758      	adds	r7, #88	; 0x58
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028fe:	463b      	mov	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002910:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <_ZL12MX_ADC2_Initv+0xcc>)
 8002912:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002928:	2201      	movs	r2, #1
 800292a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002936:	2200      	movs	r2, #0
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800293c:	2201      	movs	r2, #1
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002948:	2201      	movs	r2, #1
 800294a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002956:	2204      	movs	r2, #4
 8002958:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800295c:	2200      	movs	r2, #0
 800295e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002966:	4816      	ldr	r0, [pc, #88]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 8002968:	f000 fd0c 	bl	8003384 <HAL_ADC_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 800297c:	f000 fa66 	bl	8002e4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002980:	2302      	movs	r3, #2
 8002982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002984:	2301      	movs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800298c:	2303      	movs	r3, #3
 800298e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <_ZL12MX_ADC2_Initv+0xc8>)
 800299e:	f001 f83d 	bl	8003a1c <HAL_ADC_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 80029b2:	f000 fa4b 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000090 	.word	0x20000090
 80029c4:	50000100 	.word	0x50000100

080029c8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <_ZL11MX_CAN_Initv+0x74>)
 80029d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029e6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80029ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a18:	4807      	ldr	r0, [pc, #28]	; (8002a38 <_ZL11MX_CAN_Initv+0x70>)
 8002a1a:	f001 fc41 	bl	80042a0 <HAL_CAN_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8002a2e:	f000 fa0d 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200000e0 	.word	0x200000e0
 8002a3c:	40006400 	.word	0x40006400

08002a40 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <_ZL12MX_TIM1_Initv+0xc0>)
 8002a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a66:	2202      	movs	r2, #2
 8002a68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a72:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a8a:	481c      	ldr	r0, [pc, #112]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002a8c:	f003 ff6e 	bl	800696c <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002aa0:	f000 f9d4 	bl	8002e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4812      	ldr	r0, [pc, #72]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002ab2:	f004 fd99 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8002ac6:	f000 f9c1 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <_ZL12MX_TIM1_Initv+0xbc>)
 8002adc:	f005 fa54 	bl	8007f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002af0:	f000 f9ac 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000108 	.word	0x20000108
 8002b00:	40012c00 	.word	0x40012c00

08002b04 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	; 0x30
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 fed0 	bl	80088b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b52:	2301      	movs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b62:	2301      	movs	r3, #1
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	4619      	mov	r1, r3
 8002b74:	4811      	ldr	r0, [pc, #68]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b76:	f004 f929 	bl	8006dcc <HAL_TIM_Encoder_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8002b8a:	f000 f95f 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4808      	ldr	r0, [pc, #32]	; (8002bbc <_ZL12MX_TIM2_Initv+0xb8>)
 8002b9c:	f005 f9f4 	bl	8007f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002bb0:	f000 f94c 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bb4:	bf00      	nop
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000154 	.word	0x20000154

08002bc0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be0:	463b      	mov	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	; (8002cec <_ZL12MX_TIM3_Initv+0x12c>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c12:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c18:	4833      	ldr	r0, [pc, #204]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c1a:	f003 fea7 	bl	800696c <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8002c2e:	f000 f90d 	bl	8002e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	482a      	ldr	r0, [pc, #168]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c40:	f004 fcd2 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8002c54:	f000 f8fa 	bl	8002e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c58:	4823      	ldr	r0, [pc, #140]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c5a:	f003 ff6a 	bl	8006b32 <HAL_TIM_PWM_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8002c6e:	f000 f8ed 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4819      	ldr	r0, [pc, #100]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002c82:	f005 f981 	bl	8007f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002c96:	f000 f8d9 	bl	8002e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c9a:	2360      	movs	r3, #96	; 0x60
 8002c9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002caa:	463b      	mov	r3, r7
 8002cac:	2208      	movs	r2, #8
 8002cae:	4619      	mov	r1, r3
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002cb2:	f004 fb85 	bl	80073c0 <HAL_TIM_PWM_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8002cc6:	f000 f8c1 	bl	8002e4c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cda:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <_ZL12MX_TIM3_Initv+0x128>)
 8002cdc:	f000 f9ec 	bl	80030b8 <HAL_TIM_MspPostInit>

}
 8002ce0:	bf00      	nop
 8002ce2:	3738      	adds	r7, #56	; 0x38
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200001a0 	.word	0x200001a0
 8002cec:	40000400 	.word	0x40000400

08002cf0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002cf6:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002cfc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d16:	220c      	movs	r2, #12
 8002d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d32:	4807      	ldr	r0, [pc, #28]	; (8002d50 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002d34:	f005 f9b4 	bl	80080a0 <HAL_UART_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002d48:	f000 f880 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200001ec 	.word	0x200001ec
 8002d54:	40013800 	.word	0x40013800

08002d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4a34      	ldr	r2, [pc, #208]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d78:	6153      	str	r3, [r2, #20]
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a2e      	ldr	r2, [pc, #184]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6153      	str	r3, [r2, #20]
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <_ZL12MX_GPIO_Initv+0xec>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbe:	f002 fb57 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2130      	movs	r1, #48	; 0x30
 8002dc6:	4820      	ldr	r0, [pc, #128]	; (8002e48 <_ZL12MX_GPIO_Initv+0xf0>)
 8002dc8:	f002 fb52 	bl	8005470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002dcc:	f240 730c 	movw	r3, #1804	; 0x70c
 8002dd0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	4619      	mov	r1, r3
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f002 f9ba 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e02:	f002 f9ab 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e06:	2302      	movs	r3, #2
 8002e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4619      	mov	r1, r3
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <_ZL12MX_GPIO_Initv+0xf0>)
 8002e1a:	f002 f99f 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e1e:	2330      	movs	r3, #48	; 0x30
 8002e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	4619      	mov	r1, r3
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <_ZL12MX_GPIO_Initv+0xf0>)
 8002e36:	f002 f991 	bl	800515c <HAL_GPIO_Init>

}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	48000400 	.word	0x48000400

08002e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
}
 8002e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <Error_Handler+0x8>
	...

08002e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_MspInit+0x44>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <HAL_MspInit+0x44>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6193      	str	r3, [r2, #24]
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_MspInit+0x44>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_MspInit+0x44>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <HAL_MspInit+0x44>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_MspInit+0x44>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <HAL_ADC_MspInit+0x74>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d124      	bne.n	8002f0c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6153      	str	r3, [r2, #20]
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	6153      	str	r3, [r2, #20]
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_ADC_MspInit+0x78>)
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f08:	f002 f928 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	50000100 	.word	0x50000100
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_CAN_MspInit+0xa0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d139      	bne.n	8002fb2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	6153      	str	r3, [r2, #20]
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_CAN_MspInit+0xa4>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002f80:	2309      	movs	r3, #9
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8e:	f002 f8e5 	bl	800515c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 2, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2102      	movs	r1, #2
 8002f96:	2014      	movs	r0, #20
 8002f98:	f002 f8a9 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8002f9c:	2014      	movs	r0, #20
 8002f9e:	f002 f8c2 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 3, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2103      	movs	r1, #3
 8002fa6:	2015      	movs	r0, #21
 8002fa8:	f002 f8a1 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8002fac:	2015      	movs	r0, #21
 8002fae:	f002 f8ba 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40006400 	.word	0x40006400
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_TIM_Base_MspInit+0x68>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d114      	bne.n	8003000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 8002fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fe0:	6193      	str	r3, [r2, #24]
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	2019      	movs	r0, #25
 8002ff4:	f002 f87b 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ff8:	2019      	movs	r0, #25
 8002ffa:	f002 f894 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ffe:	e010      	b.n	8003022 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <HAL_TIM_Base_MspInit+0x70>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10b      	bne.n	8003022 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	61d3      	str	r3, [r2, #28]
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_TIM_Base_MspInit+0x6c>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40000400 	.word	0x40000400

08003038 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d128      	bne.n	80030ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	6153      	str	r3, [r2, #20]
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800308a:	2303      	movs	r3, #3
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800309a:	2301      	movs	r3, #1
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a8:	f002 f858 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030ac:	bf00      	nop
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_TIM_MspPostInit+0x64>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d11b      	bne.n	8003112 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_TIM_MspPostInit+0x68>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_TIM_MspPostInit+0x68>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6153      	str	r3, [r2, #20]
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_TIM_MspPostInit+0x68>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030f2:	2301      	movs	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003102:	2302      	movs	r3, #2
 8003104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	4619      	mov	r1, r3
 800310c:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_TIM_MspPostInit+0x6c>)
 800310e:	f002 f825 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40000400 	.word	0x40000400
 8003120:	40021000 	.word	0x40021000
 8003124:	48000400 	.word	0x48000400

08003128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_UART_MspInit+0x7c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d127      	bne.n	800319a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_UART_MspInit+0x80>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_UART_MspInit+0x80>)
 8003150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003154:	6193      	str	r3, [r2, #24]
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_UART_MspInit+0x80>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_UART_MspInit+0x80>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_UART_MspInit+0x80>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6153      	str	r3, [r2, #20]
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_UART_MspInit+0x80>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800317a:	23c0      	movs	r3, #192	; 0xc0
 800317c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800318a:	2307      	movs	r3, #7
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	4805      	ldr	r0, [pc, #20]	; (80031ac <HAL_UART_MspInit+0x84>)
 8003196:	f001 ffe1 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40021000 	.word	0x40021000
 80031ac:	48000400 	.word	0x48000400

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <NMI_Handler+0x4>

080031b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <MemManage_Handler+0x4>

080031c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <UsageFault_Handler+0x4>

080031ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f8a2 	bl	8003344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <CAN_RX0_IRQHandler+0x10>)
 800320a:	f001 fc65 	bl	8004ad8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200000e0 	.word	0x200000e0

08003218 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <CAN_RX1_IRQHandler+0x10>)
 800321e:	f001 fc5b 	bl	8004ad8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200000e0 	.word	0x200000e0

0800322c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003232:	f003 ffa6 	bl	8007182 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000108 	.word	0x20000108

08003240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800326a:	490e      	ldr	r1, [pc, #56]	; (80032a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <LoopForever+0xe>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <LoopForever+0x16>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800328e:	f7ff ffd7 	bl	8003240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f005 faed 	bl	8008870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003296:	f7ff fa8f 	bl	80027b8 <main>

0800329a <LoopForever>:

LoopForever:
    b LoopForever
 800329a:	e7fe      	b.n	800329a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800329c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032a8:	08008928 	.word	0x08008928
  ldr r2, =_sbss
 80032ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032b0:	20000274 	.word	0x20000274

080032b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC1_2_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_Init+0x28>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_Init+0x28>)
 80032c2:	f043 0310 	orr.w	r3, r3, #16
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c8:	2003      	movs	r0, #3
 80032ca:	f001 ff05 	bl	80050d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ce:	200f      	movs	r0, #15
 80032d0:	f000 f808 	bl	80032e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d4:	f7ff fdc0 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000

080032e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x54>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_InitTick+0x58>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f001 ff1d 	bl	8005142 <HAL_SYSTICK_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00e      	b.n	8003330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d80a      	bhi.n	800332e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003318:	2200      	movs	r2, #0
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f001 fee5 	bl	80050ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <HAL_InitTick+0x5c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000000 	.word	0x20000000
 800333c:	20000008 	.word	0x20000008
 8003340:	20000004 	.word	0x20000004

08003344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x20>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_IncTick+0x24>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_IncTick+0x24>)
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000008 	.word	0x20000008
 8003368:	20000270 	.word	0x20000270

0800336c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_GetTick+0x14>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000270 	.word	0x20000270

08003384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b09a      	sub	sp, #104	; 0x68
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e172      	b.n	800368a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d176      	bne.n	80034a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d152      	bne.n	8003464 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fd61 	bl	8002ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13b      	bne.n	8003464 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fe3b 	bl	8004068 <ADC_Disable>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12f      	bne.n	8003464 <HAL_ADC_Init+0xe0>
 8003404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003408:	2b00      	cmp	r3, #0
 800340a:	d12b      	bne.n	8003464 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	f043 0202 	orr.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800342e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800343e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003440:	4b94      	ldr	r3, [pc, #592]	; (8003694 <HAL_ADC_Init+0x310>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a94      	ldr	r2, [pc, #592]	; (8003698 <HAL_ADC_Init+0x314>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9a      	lsrs	r2, r3, #18
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003456:	e002      	b.n	800345e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d110      	bne.n	80034a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f023 0312 	bic.w	r3, r3, #18
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 80df 	bne.w	8003670 <HAL_ADC_Init+0x2ec>
 80034b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80da 	bne.w	8003670 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 80d2 	bne.w	8003670 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034dc:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_ADC_Init+0x318>)
 80034de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e8:	d102      	bne.n	80034f0 <HAL_ADC_Init+0x16c>
 80034ea:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <HAL_ADC_Init+0x31c>)
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_Init+0x172>
 80034f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_ADC_Init+0x192>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_ADC_Init+0x192>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_ADC_Init+0x194>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11c      	bne.n	8003556 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800351c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_ADC_Init+0x1ba>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Init+0x1ba>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_ADC_Init+0x1bc>
 800353e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7e5b      	ldrb	r3, [r3, #25]
 800355a:	035b      	lsls	r3, r3, #13
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003560:	2a01      	cmp	r2, #1
 8003562:	d002      	beq.n	800356a <HAL_ADC_Init+0x1e6>
 8003564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003568:	e000      	b.n	800356c <HAL_ADC_Init+0x1e8>
 800356a:	2200      	movs	r2, #0
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800357c:	4313      	orrs	r3, r2
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d11b      	bne.n	80035c2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7e5b      	ldrb	r3, [r3, #25]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	3b01      	subs	r3, #1
 8003598:	045a      	lsls	r2, r3, #17
 800359a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800359c:	4313      	orrs	r3, r2
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	663b      	str	r3, [r7, #96]	; 0x60
 80035a4:	e00d      	b.n	80035c2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d007      	beq.n	80035da <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4313      	orrs	r3, r2
 80035d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d6:	4313      	orrs	r3, r2
 80035d8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	039a      	lsls	r2, r3, #14
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4313      	orrs	r3, r2
 800360c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800360e:	4313      	orrs	r3, r2
 8003610:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_ADC_Init+0x320>)
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003622:	430b      	orrs	r3, r1
 8003624:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10c      	bne.n	8003648 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f023 010f 	bic.w	r1, r3, #15
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
 8003646:	e007      	b.n	8003658 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020f 	bic.w	r2, r2, #15
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
 800366e:	e00a      	b.n	8003686 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f023 0312 	bic.w	r3, r3, #18
 8003678:	f043 0210 	orr.w	r2, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003686:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800368a:	4618      	mov	r0, r3
 800368c:	3768      	adds	r7, #104	; 0x68
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000
 8003698:	431bde83 	.word	0x431bde83
 800369c:	50000300 	.word	0x50000300
 80036a0:	50000100 	.word	0x50000100
 80036a4:	fff0c007 	.word	0xfff0c007

080036a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 809c 	bne.w	80037fc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_Start+0x2a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e097      	b.n	8003802 <HAL_ADC_Start+0x15a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fc60 	bl	8003fa0 <ADC_Enable>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 8083 	bne.w	80037f2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003700:	4b42      	ldr	r3, [pc, #264]	; (800380c <HAL_ADC_Start+0x164>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_ADC_Start+0x6e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003714:	d115      	bne.n	8003742 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d027      	beq.n	8003780 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003738:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003740:	e01e      	b.n	8003780 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003756:	d004      	beq.n	8003762 <HAL_ADC_Start+0xba>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <HAL_ADC_Start+0x168>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <HAL_ADC_Start+0xd8>
 8003762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003778:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d106      	bne.n	800379c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f023 0206 	bic.w	r2, r3, #6
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
 800379a:	e002      	b.n	80037a2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	221c      	movs	r2, #28
 80037b0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_ADC_Start+0x164>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_ADC_Start+0x138>
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_ADC_Start+0x164>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d00a      	beq.n	80037e0 <HAL_ADC_Start+0x138>
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_ADC_Start+0x164>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_Start+0x138>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037de:	d10f      	bne.n	8003800 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0204 	orr.w	r2, r2, #4
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	e006      	b.n	8003800 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037fa:	e001      	b.n	8003800 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	50000300 	.word	0x50000300
 8003810:	50000100 	.word	0x50000100

08003814 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_ADC_Stop+0x1a>
 800382a:	2302      	movs	r3, #2
 800382c:	e023      	b.n	8003876 <HAL_ADC_Stop+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003836:	216c      	movs	r1, #108	; 0x6c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fc7b 	bl	8004134 <ADC_ConversionStop>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d111      	bne.n	800386c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fc0d 	bl	8004068 <ADC_Disable>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d102      	bne.n	800389c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003896:	2308      	movs	r3, #8
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e02e      	b.n	80038fa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800389c:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_ADC_PollForConversion+0x198>)
 800389e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d112      	bne.n	80038d2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d11d      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e09d      	b.n	8003a0e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e08b      	b.n	8003a0e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80038f6:	230c      	movs	r3, #12
 80038f8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_ADC_PollForConversion+0x198>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_ADC_PollForConversion+0x90>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390e:	d104      	bne.n	800391a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e003      	b.n	8003922 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800391a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003922:	f7ff fd23 	bl	800336c <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003928:	e021      	b.n	800396e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d01d      	beq.n	800396e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_ADC_PollForConversion+0xc8>
 8003938:	f7ff fd18 	bl	800336c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d212      	bcs.n	800396e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0d6      	beq.n	800392a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003992:	2b00      	cmp	r3, #0
 8003994:	d131      	bne.n	80039fa <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800399c:	2b00      	cmp	r3, #0
 800399e:	d12c      	bne.n	80039fa <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d125      	bne.n	80039fa <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d112      	bne.n	80039e2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d112      	bne.n	80039fa <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
 80039e0:	e00b      	b.n	80039fa <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	50000300 	.word	0x50000300

08003a1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b09b      	sub	sp, #108	; 0x6c
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x22>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e2a5      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x56e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 8289 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d81c      	bhi.n	8003a98 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	461a      	mov	r2, r3
 8003a72:	231f      	movs	r3, #31
 8003a74:	4093      	lsls	r3, r2
 8003a76:	43db      	mvns	r3, r3
 8003a78:	4019      	ands	r1, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
 8003a96:	e063      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d81e      	bhi.n	8003ade <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	3b1e      	subs	r3, #30
 8003ab4:	221f      	movs	r2, #31
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	4019      	ands	r1, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	3b1e      	subs	r3, #30
 8003ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34
 8003adc:	e040      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b0e      	cmp	r3, #14
 8003ae4:	d81e      	bhi.n	8003b24 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	3b3c      	subs	r3, #60	; 0x3c
 8003afa:	221f      	movs	r2, #31
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	4019      	ands	r1, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	3b3c      	subs	r3, #60	; 0x3c
 8003b16:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
 8003b22:	e01d      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	3b5a      	subs	r3, #90	; 0x5a
 8003b38:	221f      	movs	r2, #31
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	4019      	ands	r1, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	3b5a      	subs	r3, #90	; 0x5a
 8003b54:	fa00 f203 	lsl.w	r2, r0, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 80e5 	bne.w	8003d3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d91c      	bls.n	8003bb2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6999      	ldr	r1, [r3, #24]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	3b1e      	subs	r3, #30
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	4019      	ands	r1, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6898      	ldr	r0, [r3, #8]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b1e      	subs	r3, #30
 8003ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	619a      	str	r2, [r3, #24]
 8003bb0:	e019      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6959      	ldr	r1, [r3, #20]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	4019      	ands	r1, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6898      	ldr	r0, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	fa00 f203 	lsl.w	r2, r0, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d84f      	bhi.n	8003ca8 <HAL_ADC_ConfigChannel+0x28c>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_ADC_ConfigChannel+0x1f4>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c87 	.word	0x08003c87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c26:	4b9e      	ldr	r3, [pc, #632]	; (8003ea0 <HAL_ADC_ConfigChannel+0x484>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	0691      	lsls	r1, r2, #26
 8003c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c32:	430a      	orrs	r2, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c40:	e07e      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c48:	4b95      	ldr	r3, [pc, #596]	; (8003ea0 <HAL_ADC_ConfigChannel+0x484>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	0691      	lsls	r1, r2, #26
 8003c52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c54:	430a      	orrs	r2, r1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c62:	e06d      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ea0 <HAL_ADC_ConfigChannel+0x484>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	0691      	lsls	r1, r2, #26
 8003c74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c76:	430a      	orrs	r2, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c84:	e05c      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_ADC_ConfigChannel+0x484>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	0691      	lsls	r1, r2, #26
 8003c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ca4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ca6:	e04b      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	069b      	lsls	r3, r3, #26
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	069b      	lsls	r3, r3, #26
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	069b      	lsls	r3, r3, #26
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d10a      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003d38:	e001      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003d3e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x344>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x344>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x346>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 810b 	bne.w	8003f7e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d00f      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	400a      	ands	r2, r1
 8003d8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003d8e:	e049      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d91c      	bls.n	8003dec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3b1b      	subs	r3, #27
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	4019      	ands	r1, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6898      	ldr	r0, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b1b      	subs	r3, #27
 8003dde:	fa00 f203 	lsl.w	r2, r0, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	619a      	str	r2, [r3, #24]
 8003dea:	e01b      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6959      	ldr	r1, [r3, #20]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	2207      	movs	r2, #7
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	4019      	ands	r1, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6898      	ldr	r0, [r3, #8]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	fa00 f203 	lsl.w	r2, r0, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_ADC_ConfigChannel+0x488>)
 8003e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d105      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003e40:	2b11      	cmp	r3, #17
 8003e42:	d105      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003e54:	2b12      	cmp	r3, #18
 8003e56:	f040 8092 	bne.w	8003f7e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 808b 	bne.w	8003f7e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e70:	d102      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x45c>
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_ADC_ConfigChannel+0x48c>)
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x462>
 8003e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e7c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10f      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x490>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x490>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <HAL_ADC_ConfigChannel+0x492>
 8003e9e:	bf00      	nop
 8003ea0:	83fff000 	.word	0x83fff000
 8003ea4:	50000300 	.word	0x50000300
 8003ea8:	50000100 	.word	0x50000100
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d150      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003eb2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x4b8>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x4b8>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x4ba>
 8003ed4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13c      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d11d      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x502>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eea:	d118      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ef8:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <HAL_ADC_ConfigChannel+0x57c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <HAL_ADC_ConfigChannel+0x580>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9a      	lsrs	r2, r3, #18
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f0e:	e002      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f9      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f1c:	e02e      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b11      	cmp	r3, #17
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x522>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f2e:	d106      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f3c:	e01e      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b12      	cmp	r3, #18
 8003f44:	d11a      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f52:	e013      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f66:	e00a      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f7a:	e000      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f7c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	376c      	adds	r7, #108	; 0x6c
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	431bde83 	.word	0x431bde83

08003fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d108      	bne.n	8003fcc <ADC_Enable+0x2c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <ADC_Enable+0x2c>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <ADC_Enable+0x2e>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d143      	bne.n	800405a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <ADC_Enable+0xc4>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e02f      	b.n	800405c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800400c:	f7ff f9ae 	bl	800336c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004012:	e01b      	b.n	800404c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004014:	f7ff f9aa 	bl	800336c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d914      	bls.n	800404c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d00d      	beq.n	800404c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0210 	orr.w	r2, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e007      	b.n	800405c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d1dc      	bne.n	8004014 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	8000003f 	.word	0x8000003f

08004068 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d108      	bne.n	8004094 <ADC_Disable+0x2c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <ADC_Disable+0x2c>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <ADC_Disable+0x2e>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d047      	beq.n	800412a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030d 	and.w	r3, r3, #13
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d10f      	bne.n	80040c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0202 	orr.w	r2, r2, #2
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2203      	movs	r2, #3
 80040be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80040c0:	f7ff f954 	bl	800336c <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040c6:	e029      	b.n	800411c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0210 	orr.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e023      	b.n	800412c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040e4:	f7ff f942 	bl	800336c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d914      	bls.n	800411c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d10d      	bne.n	800411c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f043 0210 	orr.w	r2, r3, #16
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d0dc      	beq.n	80040e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 809b 	beq.w	8004290 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004168:	d12a      	bne.n	80041c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800416e:	2b01      	cmp	r3, #1
 8004170:	d126      	bne.n	80041c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004176:	2b01      	cmp	r3, #1
 8004178:	d122      	bne.n	80041c0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800417a:	230c      	movs	r3, #12
 800417c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800417e:	e014      	b.n	80041aa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4a46      	ldr	r2, [pc, #280]	; (800429c <ADC_ConversionStop+0x168>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d90d      	bls.n	80041a4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e076      	b.n	8004292 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3301      	adds	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d1e3      	bne.n	8004180 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b60      	cmp	r3, #96	; 0x60
 80041c4:	d015      	beq.n	80041f2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0210 	orr.w	r2, r2, #16
 80041f0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d015      	beq.n	8004224 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d10e      	bne.n	8004224 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0220 	orr.w	r2, r2, #32
 8004222:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b60      	cmp	r3, #96	; 0x60
 8004228:	d005      	beq.n	8004236 <ADC_ConversionStop+0x102>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b6c      	cmp	r3, #108	; 0x6c
 800422e:	d105      	bne.n	800423c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004230:	230c      	movs	r3, #12
 8004232:	617b      	str	r3, [r7, #20]
        break;
 8004234:	e005      	b.n	8004242 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004236:	2308      	movs	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
        break;
 800423a:	e002      	b.n	8004242 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800423c:	2304      	movs	r3, #4
 800423e:	617b      	str	r3, [r7, #20]
        break;
 8004240:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004242:	f7ff f893 	bl	800336c <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004248:	e01b      	b.n	8004282 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800424a:	f7ff f88f 	bl	800336c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b0b      	cmp	r3, #11
 8004256:	d914      	bls.n	8004282 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e007      	b.n	8004292 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1dc      	bne.n	800424a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	000993ff 	.word	0x000993ff

080042a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0ed      	b.n	800448e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe fe2c 	bl	8002f1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d4:	f7ff f84a 	bl	800336c <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042da:	e012      	b.n	8004302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042dc:	f7ff f846 	bl	800336c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b0a      	cmp	r3, #10
 80042e8:	d90b      	bls.n	8004302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2205      	movs	r2, #5
 80042fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0c5      	b.n	800448e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0e5      	beq.n	80042dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0202 	bic.w	r2, r2, #2
 800431e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004320:	f7ff f824 	bl	800336c <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004326:	e012      	b.n	800434e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004328:	f7ff f820 	bl	800336c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b0a      	cmp	r3, #10
 8004334:	d90b      	bls.n	800434e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2205      	movs	r2, #5
 8004346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e09f      	b.n	800448e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e1b      	ldrb	r3, [r3, #24]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d108      	bne.n	8004376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e007      	b.n	8004386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7e5b      	ldrb	r3, [r3, #25]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d108      	bne.n	80043a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e007      	b.n	80043b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7e9b      	ldrb	r3, [r3, #26]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d108      	bne.n	80043ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e007      	b.n	80043da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0220 	bic.w	r2, r2, #32
 80043d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7edb      	ldrb	r3, [r3, #27]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d108      	bne.n	80043f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0210 	bic.w	r2, r2, #16
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0210 	orr.w	r2, r2, #16
 8004402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7f1b      	ldrb	r3, [r3, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d108      	bne.n	800441e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e007      	b.n	800442e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0208 	bic.w	r2, r2, #8
 800442c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7f5b      	ldrb	r3, [r3, #29]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d108      	bne.n	8004448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0204 	orr.w	r2, r2, #4
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e007      	b.n	8004458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	ea42 0103 	orr.w	r1, r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	1e5a      	subs	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d003      	beq.n	80044bc <HAL_CAN_ConfigFilter+0x26>
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	f040 80aa 	bne.w	8004610 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2201      	movs	r2, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d123      	bne.n	800453e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	43db      	mvns	r3, r3
 8004500:	401a      	ands	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	3248      	adds	r2, #72	; 0x48
 800451e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004534:	6979      	ldr	r1, [r7, #20]
 8004536:	3348      	adds	r3, #72	; 0x48
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d122      	bne.n	800458c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004566:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3248      	adds	r2, #72	; 0x48
 800456c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004580:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	3348      	adds	r3, #72	; 0x48
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	440b      	add	r3, r1
 800458a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43db      	mvns	r3, r3
 800459e:	401a      	ands	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80045a6:	e007      	b.n	80045b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80045d2:	e007      	b.n	80045e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	431a      	orrs	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e006      	b.n	800461e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d12e      	bne.n	800469c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004656:	f7fe fe89 	bl	800336c <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800465c:	e012      	b.n	8004684 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800465e:	f7fe fe85 	bl	800336c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b0a      	cmp	r3, #10
 800466a:	d90b      	bls.n	8004684 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2205      	movs	r2, #5
 800467c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e012      	b.n	80046aa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e006      	b.n	80046aa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b089      	sub	sp, #36	; 0x24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d003      	beq.n	80046de <HAL_CAN_AddTxMessage+0x2c>
 80046d6:	7ffb      	ldrb	r3, [r7, #31]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f040 80b8 	bne.w	800484e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a0 	beq.w	800483e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	0e1b      	lsrs	r3, r3, #24
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d907      	bls.n	800471e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e09e      	b.n	800485c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800471e:	2201      	movs	r2, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	409a      	lsls	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	431a      	orrs	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3318      	adds	r3, #24
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	440b      	add	r3, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e00f      	b.n	800476c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004756:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004760:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3318      	adds	r3, #24
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	440b      	add	r3, r1
 800476a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3318      	adds	r3, #24
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	440b      	add	r3, r1
 800477c:	3304      	adds	r3, #4
 800477e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	7d1b      	ldrb	r3, [r3, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d111      	bne.n	80047ac <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3318      	adds	r3, #24
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	3304      	adds	r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	6811      	ldr	r1, [r2, #0]
 800479c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3318      	adds	r3, #24
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	440b      	add	r3, r1
 80047a8:	3304      	adds	r3, #4
 80047aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3307      	adds	r3, #7
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	061a      	lsls	r2, r3, #24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3306      	adds	r3, #6
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3305      	adds	r3, #5
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	4313      	orrs	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	3204      	adds	r2, #4
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	4610      	mov	r0, r2
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	6811      	ldr	r1, [r2, #0]
 80047d4:	ea43 0200 	orr.w	r2, r3, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	440b      	add	r3, r1
 80047de:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80047e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3303      	adds	r3, #3
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	061a      	lsls	r2, r3, #24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3302      	adds	r3, #2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3301      	adds	r3, #1
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4313      	orrs	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	4610      	mov	r0, r2
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	ea43 0200 	orr.w	r2, r3, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	440b      	add	r3, r1
 8004814:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004818:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3318      	adds	r3, #24
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4413      	add	r3, r2
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6811      	ldr	r1, [r2, #0]
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3318      	adds	r3, #24
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	440b      	add	r3, r1
 8004838:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e00e      	b.n	800485c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e006      	b.n	800485c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3724      	adds	r7, #36	; 0x24
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800487c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d003      	beq.n	800488c <HAL_CAN_GetRxMessage+0x24>
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b02      	cmp	r3, #2
 8004888:	f040 80f3 	bne.w	8004a72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10e      	bne.n	80048b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0e7      	b.n	8004a80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0d8      	b.n	8004a80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	331b      	adds	r3, #27
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0204 	and.w	r2, r3, #4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10c      	bne.n	8004906 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	331b      	adds	r3, #27
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	4413      	add	r3, r2
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	0d5b      	lsrs	r3, r3, #21
 80048fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e00b      	b.n	800491e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	331b      	adds	r3, #27
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4413      	add	r3, r2
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	331b      	adds	r3, #27
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4413      	add	r3, r2
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0202 	and.w	r2, r3, #2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	331b      	adds	r3, #27
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	331b      	adds	r3, #27
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	331b      	adds	r3, #27
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	4413      	add	r3, r2
 8004970:	3304      	adds	r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	4413      	add	r3, r2
 800499c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0a1a      	lsrs	r2, r3, #8
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0c1a      	lsrs	r2, r3, #16
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	3302      	adds	r3, #2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	0e1a      	lsrs	r2, r3, #24
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	3303      	adds	r3, #3
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	3304      	adds	r3, #4
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0a1a      	lsrs	r2, r3, #8
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	3305      	adds	r3, #5
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0c1a      	lsrs	r2, r3, #16
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	3306      	adds	r3, #6
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0e1a      	lsrs	r2, r3, #24
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	3307      	adds	r3, #7
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d108      	bne.n	8004a5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e007      	b.n	8004a6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0220 	orr.w	r2, r2, #32
 8004a6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e006      	b.n	8004a80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d002      	beq.n	8004aaa <HAL_CAN_ActivateNotification+0x1e>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d109      	bne.n	8004abe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6959      	ldr	r1, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e006      	b.n	8004acc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d07c      	beq.n	8004c18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d023      	beq.n	8004b70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f983 	bl	8004e46 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b40:	e016      	b.n	8004b70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	e00c      	b.n	8004b70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	e002      	b.n	8004b70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f989 	bl	8004e82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d024      	beq.n	8004bc4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f963 	bl	8004e5a <HAL_CAN_TxMailbox1CompleteCallback>
 8004b94:	e016      	b.n	8004bc4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e00c      	b.n	8004bc4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	e002      	b.n	8004bc4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f969 	bl	8004e96 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d024      	beq.n	8004c18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f943 	bl	8004e6e <HAL_CAN_TxMailbox2CompleteCallback>
 8004be8:	e016      	b.n	8004c18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	e00c      	b.n	8004c18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	e002      	b.n	8004c18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f949 	bl	8004eaa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f930 	bl	8004ebe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc fdb8 	bl	80017ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f912 	bl	8004ee6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8f9 	bl	8004ed2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f8fc 	bl	8004efa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8f5 	bl	8004f0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07b      	beq.n	8004e26 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d072      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	f043 0302 	orr.w	r3, r3, #2
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d043      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03e      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da6:	2b60      	cmp	r3, #96	; 0x60
 8004da8:	d02b      	beq.n	8004e02 <HAL_CAN_IRQHandler+0x32a>
 8004daa:	2b60      	cmp	r3, #96	; 0x60
 8004dac:	d82e      	bhi.n	8004e0c <HAL_CAN_IRQHandler+0x334>
 8004dae:	2b50      	cmp	r3, #80	; 0x50
 8004db0:	d022      	beq.n	8004df8 <HAL_CAN_IRQHandler+0x320>
 8004db2:	2b50      	cmp	r3, #80	; 0x50
 8004db4:	d82a      	bhi.n	8004e0c <HAL_CAN_IRQHandler+0x334>
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d019      	beq.n	8004dee <HAL_CAN_IRQHandler+0x316>
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d826      	bhi.n	8004e0c <HAL_CAN_IRQHandler+0x334>
 8004dbe:	2b30      	cmp	r3, #48	; 0x30
 8004dc0:	d010      	beq.n	8004de4 <HAL_CAN_IRQHandler+0x30c>
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d822      	bhi.n	8004e0c <HAL_CAN_IRQHandler+0x334>
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d002      	beq.n	8004dd0 <HAL_CAN_IRQHandler+0x2f8>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d005      	beq.n	8004dda <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dce:	e01d      	b.n	8004e0c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f043 0308 	orr.w	r3, r3, #8
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd8:	e019      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de2:	e014      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f043 0320 	orr.w	r3, r3, #32
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dec:	e00f      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df6:	e00a      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e00:	e005      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e0a:	e000      	b.n	8004e0e <HAL_CAN_IRQHandler+0x336>
            break;
 8004e0c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e1c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2204      	movs	r2, #4
 8004e24:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f872 	bl	8004f22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6a:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	60d3      	str	r3, [r2, #12]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f84:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <__NVIC_GetPriorityGrouping+0x18>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f003 0307 	and.w	r3, r3, #7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db0b      	blt.n	8004fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	4907      	ldr	r1, [pc, #28]	; (8004fd4 <__NVIC_EnableIRQ+0x38>)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0a      	blt.n	8005002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	490c      	ldr	r1, [pc, #48]	; (8005024 <__NVIC_SetPriority+0x4c>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005000:	e00a      	b.n	8005018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <__NVIC_SetPriority+0x50>)
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3b04      	subs	r3, #4
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	440b      	add	r3, r1
 8005016:	761a      	strb	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000e100 	.word	0xe000e100
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f1c3 0307 	rsb	r3, r3, #7
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf28      	it	cs
 800504a:	2304      	movcs	r3, #4
 800504c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3304      	adds	r3, #4
 8005052:	2b06      	cmp	r3, #6
 8005054:	d902      	bls.n	800505c <NVIC_EncodePriority+0x30>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3b03      	subs	r3, #3
 800505a:	e000      	b.n	800505e <NVIC_EncodePriority+0x32>
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	401a      	ands	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005074:	f04f 31ff 	mov.w	r1, #4294967295
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	43d9      	mvns	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	4313      	orrs	r3, r2
         );
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a4:	d301      	bcc.n	80050aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <SysTick_Config+0x40>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b2:	210f      	movs	r1, #15
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f7ff ff8e 	bl	8004fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <SysTick_Config+0x40>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <SysTick_Config+0x40>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	e000e010 	.word	0xe000e010

080050d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff29 	bl	8004f38 <__NVIC_SetPriorityGrouping>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	4603      	mov	r3, r0
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005100:	f7ff ff3e 	bl	8004f80 <__NVIC_GetPriorityGrouping>
 8005104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff ff8e 	bl	800502c <NVIC_EncodePriority>
 8005110:	4602      	mov	r2, r0
 8005112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ff5d 	bl	8004fd8 <__NVIC_SetPriority>
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff ff31 	bl	8004f9c <__NVIC_EnableIRQ>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ffa2 	bl	8005094 <SysTick_Config>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800516a:	e14e      	b.n	800540a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8140 	beq.w	8005404 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d005      	beq.n	800519c <HAL_GPIO_Init+0x40>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d130      	bne.n	80051fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d2:	2201      	movs	r2, #1
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0201 	and.w	r2, r3, #1
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b03      	cmp	r3, #3
 8005208:	d017      	beq.n	800523a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4013      	ands	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d123      	bne.n	800528e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	220f      	movs	r2, #15
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	08da      	lsrs	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3208      	adds	r2, #8
 8005288:	6939      	ldr	r1, [r7, #16]
 800528a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 0203 	and.w	r2, r3, #3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 809a 	beq.w	8005404 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d0:	4b55      	ldr	r3, [pc, #340]	; (8005428 <HAL_GPIO_Init+0x2cc>)
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	4a54      	ldr	r2, [pc, #336]	; (8005428 <HAL_GPIO_Init+0x2cc>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6193      	str	r3, [r2, #24]
 80052dc:	4b52      	ldr	r3, [pc, #328]	; (8005428 <HAL_GPIO_Init+0x2cc>)
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052e8:	4a50      	ldr	r2, [pc, #320]	; (800542c <HAL_GPIO_Init+0x2d0>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	3302      	adds	r3, #2
 80052f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	220f      	movs	r2, #15
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005312:	d013      	beq.n	800533c <HAL_GPIO_Init+0x1e0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a46      	ldr	r2, [pc, #280]	; (8005430 <HAL_GPIO_Init+0x2d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00d      	beq.n	8005338 <HAL_GPIO_Init+0x1dc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a45      	ldr	r2, [pc, #276]	; (8005434 <HAL_GPIO_Init+0x2d8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <HAL_GPIO_Init+0x1d8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a44      	ldr	r2, [pc, #272]	; (8005438 <HAL_GPIO_Init+0x2dc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_GPIO_Init+0x1d4>
 800532c:	2303      	movs	r3, #3
 800532e:	e006      	b.n	800533e <HAL_GPIO_Init+0x1e2>
 8005330:	2305      	movs	r3, #5
 8005332:	e004      	b.n	800533e <HAL_GPIO_Init+0x1e2>
 8005334:	2302      	movs	r3, #2
 8005336:	e002      	b.n	800533e <HAL_GPIO_Init+0x1e2>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_GPIO_Init+0x1e2>
 800533c:	2300      	movs	r3, #0
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	f002 0203 	and.w	r2, r2, #3
 8005344:	0092      	lsls	r2, r2, #2
 8005346:	4093      	lsls	r3, r2
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800534e:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_GPIO_Init+0x2d0>)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	3302      	adds	r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800535c:	4b37      	ldr	r3, [pc, #220]	; (800543c <HAL_GPIO_Init+0x2e0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43db      	mvns	r3, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4013      	ands	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005380:	4a2e      	ldr	r2, [pc, #184]	; (800543c <HAL_GPIO_Init+0x2e0>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <HAL_GPIO_Init+0x2e0>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	43db      	mvns	r3, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053aa:	4a24      	ldr	r2, [pc, #144]	; (800543c <HAL_GPIO_Init+0x2e0>)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <HAL_GPIO_Init+0x2e0>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053d4:	4a19      	ldr	r2, [pc, #100]	; (800543c <HAL_GPIO_Init+0x2e0>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053da:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_GPIO_Init+0x2e0>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4013      	ands	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80053fe:	4a0f      	ldr	r2, [pc, #60]	; (800543c <HAL_GPIO_Init+0x2e0>)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3301      	adds	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f aea9 	bne.w	800516c <HAL_GPIO_Init+0x10>
  }
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40021000 	.word	0x40021000
 800542c:	40010000 	.word	0x40010000
 8005430:	48000400 	.word	0x48000400
 8005434:	48000800 	.word	0x48000800
 8005438:	48000c00 	.word	0x48000c00
 800543c:	40010400 	.word	0x40010400

08005440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	887b      	ldrh	r3, [r7, #2]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	e001      	b.n	8005462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
 800547c:	4613      	mov	r3, r2
 800547e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005480:	787b      	ldrb	r3, [r7, #1]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800548c:	e002      	b.n	8005494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800548e:	887a      	ldrh	r2, [r7, #2]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	1d3b      	adds	r3, r7, #4
 80054aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f000 bef4 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 816a 	beq.w	800579e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80054ca:	4bb3      	ldr	r3, [pc, #716]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d00c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054d6:	4bb0      	ldr	r3, [pc, #704]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d159      	bne.n	8005596 <HAL_RCC_OscConfig+0xf6>
 80054e2:	4bad      	ldr	r3, [pc, #692]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ee:	d152      	bne.n	8005596 <HAL_RCC_OscConfig+0xf6>
 80054f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80054fc:	fa93 f3a3 	rbit	r3, r3
 8005500:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005504:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <HAL_RCC_OscConfig+0x82>
 800551c:	4b9e      	ldr	r3, [pc, #632]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0xae>
 8005522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005526:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800553e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800554a:	4b93      	ldr	r3, [pc, #588]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005552:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005556:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800555a:	fa92 f2a2 	rbit	r2, r2
 800555e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005562:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005566:	fab2 f282 	clz	r2, r2
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f042 0220 	orr.w	r2, r2, #32
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f002 021f 	and.w	r2, r2, #31
 8005576:	2101      	movs	r1, #1
 8005578:	fa01 f202 	lsl.w	r2, r1, r2
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 810c 	beq.w	800579c <HAL_RCC_OscConfig+0x2fc>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 8106 	bne.w	800579c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f000 be86 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x110>
 80055a2:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a7c      	ldr	r2, [pc, #496]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e030      	b.n	8005612 <HAL_RCC_OscConfig+0x172>
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x134>
 80055ba:	4b77      	ldr	r3, [pc, #476]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a76      	ldr	r2, [pc, #472]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b74      	ldr	r3, [pc, #464]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a73      	ldr	r2, [pc, #460]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e01e      	b.n	8005612 <HAL_RCC_OscConfig+0x172>
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055de:	d10c      	bne.n	80055fa <HAL_RCC_OscConfig+0x15a>
 80055e0:	4b6d      	ldr	r3, [pc, #436]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a6c      	ldr	r2, [pc, #432]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a69      	ldr	r2, [pc, #420]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e00b      	b.n	8005612 <HAL_RCC_OscConfig+0x172>
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a66      	ldr	r2, [pc, #408]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b64      	ldr	r3, [pc, #400]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a63      	ldr	r2, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 800560c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005610:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005612:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	f023 020f 	bic.w	r2, r3, #15
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	495d      	ldr	r1, [pc, #372]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d059      	beq.n	80056e4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fd fe9c 	bl	800336c <HAL_GetTick>
 8005634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005638:	e00a      	b.n	8005650 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563a:	f7fd fe97 	bl	800336c <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d902      	bls.n	8005650 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	f000 be29 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005654:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005664:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <HAL_RCC_OscConfig+0x1e2>
 800567c:	4b46      	ldr	r3, [pc, #280]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x20e>
 8005682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005686:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800569e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80056b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80056ba:	fa92 f2a2 	rbit	r2, r2
 80056be:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80056c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80056c6:	fab2 f282 	clz	r2, r2
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	f042 0220 	orr.w	r2, r2, #32
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	f002 021f 	and.w	r2, r2, #31
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ab      	beq.n	800563a <HAL_RCC_OscConfig+0x19a>
 80056e2:	e05c      	b.n	800579e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fd fe42 	bl	800336c <HAL_GetTick>
 80056e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ee:	f7fd fe3d 	bl	800336c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d902      	bls.n	8005704 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	f000 bdcf 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005708:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005718:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571c:	fab3 f383 	clz	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d102      	bne.n	8005736 <HAL_RCC_OscConfig+0x296>
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	e015      	b.n	8005762 <HAL_RCC_OscConfig+0x2c2>
 8005736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800573a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800574a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800574e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005752:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <HAL_RCC_OscConfig+0x2f8>)
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005766:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800576a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800576e:	fa92 f2a2 	rbit	r2, r2
 8005772:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005776:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800577a:	fab2 f282 	clz	r2, r2
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	f042 0220 	orr.w	r2, r2, #32
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f002 021f 	and.w	r2, r2, #31
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ab      	bne.n	80056ee <HAL_RCC_OscConfig+0x24e>
 8005796:	e002      	b.n	800579e <HAL_RCC_OscConfig+0x2fe>
 8005798:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 816f 	beq.w	8005a8c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057ae:	4bd0      	ldr	r3, [pc, #832]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057ba:	4bcd      	ldr	r3, [pc, #820]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d16c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x400>
 80057c6:	4bca      	ldr	r3, [pc, #808]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d166      	bne.n	80058a0 <HAL_RCC_OscConfig+0x400>
 80057d2:	2302      	movs	r3, #2
 80057d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80057e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e8:	fab3 f383 	clz	r3, r3
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <HAL_RCC_OscConfig+0x362>
 80057fc:	4bbc      	ldr	r3, [pc, #752]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	e013      	b.n	800582a <HAL_RCC_OscConfig+0x38a>
 8005802:	2302      	movs	r3, #2
 8005804:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005814:	2302      	movs	r3, #2
 8005816:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800581a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005826:	4bb2      	ldr	r3, [pc, #712]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2202      	movs	r2, #2
 800582c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005830:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005834:	fa92 f2a2 	rbit	r2, r2
 8005838:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800583c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005840:	fab2 f282 	clz	r2, r2
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	f042 0220 	orr.w	r2, r2, #32
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f002 021f 	and.w	r2, r2, #31
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <HAL_RCC_OscConfig+0x3cc>
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f000 bd1b 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4ba0      	ldr	r3, [pc, #640]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	21f8      	movs	r1, #248	; 0xf8
 800587c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005880:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005884:	fa91 f1a1 	rbit	r1, r1
 8005888:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800588c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005890:	fab1 f181 	clz	r1, r1
 8005894:	b2c9      	uxtb	r1, r1
 8005896:	408b      	lsls	r3, r1
 8005898:	4995      	ldr	r1, [pc, #596]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	e0f5      	b.n	8005a8c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8085 	beq.w	80059b6 <HAL_RCC_OscConfig+0x516>
 80058ac:	2301      	movs	r3, #1
 80058ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80058be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	461a      	mov	r2, r3
 80058d4:	2301      	movs	r3, #1
 80058d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fd fd48 	bl	800336c <HAL_GetTick>
 80058dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e0:	e00a      	b.n	80058f8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e2:	f7fd fd43 	bl	800336c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d902      	bls.n	80058f8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	f000 bcd5 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800590a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_RCC_OscConfig+0x488>
 8005922:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	e013      	b.n	8005950 <HAL_RCC_OscConfig+0x4b0>
 8005928:	2302      	movs	r3, #2
 800592a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800593a:	2302      	movs	r3, #2
 800593c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005940:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005944:	fa93 f3a3 	rbit	r3, r3
 8005948:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800594c:	4b68      	ldr	r3, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2202      	movs	r2, #2
 8005952:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005956:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800595a:	fa92 f2a2 	rbit	r2, r2
 800595e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005962:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005966:	fab2 f282 	clz	r2, r2
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	f042 0220 	orr.w	r2, r2, #32
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	f002 021f 	and.w	r2, r2, #31
 8005976:	2101      	movs	r1, #1
 8005978:	fa01 f202 	lsl.w	r2, r1, r2
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0af      	beq.n	80058e2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	21f8      	movs	r1, #248	; 0xf8
 8005992:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005996:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800599a:	fa91 f1a1 	rbit	r1, r1
 800599e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80059a2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80059a6:	fab1 f181 	clz	r1, r1
 80059aa:	b2c9      	uxtb	r1, r1
 80059ac:	408b      	lsls	r3, r1
 80059ae:	4950      	ldr	r1, [pc, #320]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	600b      	str	r3, [r1, #0]
 80059b4:	e06a      	b.n	8005a8c <HAL_RCC_OscConfig+0x5ec>
 80059b6:	2301      	movs	r3, #1
 80059b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059c0:	fa93 f3a3 	rbit	r3, r3
 80059c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80059c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059cc:	fab3 f383 	clz	r3, r3
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e2:	f7fd fcc3 	bl	800336c <HAL_GetTick>
 80059e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ec:	f7fd fcbe 	bl	800336c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	f000 bc50 	b.w	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005a02:	2302      	movs	r3, #2
 8005a04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCC_OscConfig+0x592>
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	e013      	b.n	8005a5a <HAL_RCC_OscConfig+0x5ba>
 8005a32:	2302      	movs	r3, #2
 8005a34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a3c:	fa93 f3a3 	rbit	r3, r3
 8005a40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a44:	2302      	movs	r3, #2
 8005a46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a4e:	fa93 f3a3 	rbit	r3, r3
 8005a52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <HAL_RCC_OscConfig+0x650>)
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005a60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005a64:	fa92 f2a2 	rbit	r2, r2
 8005a68:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005a6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005a70:	fab2 f282 	clz	r2, r2
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	f042 0220 	orr.w	r2, r2, #32
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	f002 021f 	and.w	r2, r2, #31
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1af      	bne.n	80059ec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80da 	beq.w	8005c50 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a9c:	1d3b      	adds	r3, r7, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d069      	beq.n	8005b7a <HAL_RCC_OscConfig+0x6da>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ab0:	fa93 f3a3 	rbit	r3, r3
 8005ab4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005abc:	fab3 f383 	clz	r3, r3
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_OscConfig+0x654>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	461a      	mov	r2, r3
 8005acc:	2301      	movs	r3, #1
 8005ace:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad0:	f7fd fc4c 	bl	800336c <HAL_GetTick>
 8005ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad8:	e00e      	b.n	8005af8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ada:	f7fd fc47 	bl	800336c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d906      	bls.n	8005af8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e3d9      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	10908120 	.word	0x10908120
 8005af8:	2302      	movs	r3, #2
 8005afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b02:	fa93 f3a3 	rbit	r3, r3
 8005b06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005b0e:	2202      	movs	r2, #2
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	fa93 f2a3 	rbit	r2, r3
 8005b1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005b26:	2202      	movs	r2, #2
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fa93 f2a3 	rbit	r2, r3
 8005b34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005b38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	4ba5      	ldr	r3, [pc, #660]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005b42:	2102      	movs	r1, #2
 8005b44:	6019      	str	r1, [r3, #0]
 8005b46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	fa93 f1a3 	rbit	r1, r3
 8005b50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005b54:	6019      	str	r1, [r3, #0]
  return result;
 8005b56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fab3 f383 	clz	r3, r3
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0b0      	beq.n	8005ada <HAL_RCC_OscConfig+0x63a>
 8005b78:	e06a      	b.n	8005c50 <HAL_RCC_OscConfig+0x7b0>
 8005b7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	fa93 f2a3 	rbit	r2, r3
 8005b8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b90:	601a      	str	r2, [r3, #0]
  return result;
 8005b92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	fab3 f383 	clz	r3, r3
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b8c      	ldr	r3, [pc, #560]	; (8005dd4 <HAL_RCC_OscConfig+0x934>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bac:	f7fd fbde 	bl	800336c <HAL_GetTick>
 8005bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb4:	e009      	b.n	8005bca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb6:	f7fd fbd9 	bl	800336c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e36b      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005bca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005bce:	2202      	movs	r2, #2
 8005bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	fa93 f2a3 	rbit	r2, r3
 8005bdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005be6:	2202      	movs	r2, #2
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	fa93 f2a3 	rbit	r2, r3
 8005bf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005bfe:	2202      	movs	r2, #2
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	fa93 f2a3 	rbit	r2, r3
 8005c0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005c10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c12:	4b6f      	ldr	r3, [pc, #444]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	6019      	str	r1, [r3, #0]
 8005c1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	fa93 f1a3 	rbit	r1, r3
 8005c28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c2c:	6019      	str	r1, [r3, #0]
  return result;
 8005c2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	fab3 f383 	clz	r3, r3
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1b2      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8158 	beq.w	8005f10 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c66:	4b5a      	ldr	r3, [pc, #360]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d112      	bne.n	8005c98 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	4b57      	ldr	r3, [pc, #348]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4a56      	ldr	r2, [pc, #344]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	61d3      	str	r3, [r2, #28]
 8005c7e:	4b54      	ldr	r3, [pc, #336]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005c86:	f107 0308 	add.w	r3, r7, #8
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	4b4f      	ldr	r3, [pc, #316]	; (8005dd8 <HAL_RCC_OscConfig+0x938>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11a      	bne.n	8005cda <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca4:	4b4c      	ldr	r3, [pc, #304]	; (8005dd8 <HAL_RCC_OscConfig+0x938>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a4b      	ldr	r2, [pc, #300]	; (8005dd8 <HAL_RCC_OscConfig+0x938>)
 8005caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fb5c 	bl	800336c <HAL_GetTick>
 8005cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	e009      	b.n	8005cce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cba:	f7fd fb57 	bl	800336c <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	; 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e2e9      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <HAL_RCC_OscConfig+0x938>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0ef      	beq.n	8005cba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d106      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x852>
 8005ce4:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	4a39      	ldr	r2, [pc, #228]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	6213      	str	r3, [r2, #32]
 8005cf0:	e02f      	b.n	8005d52 <HAL_RCC_OscConfig+0x8b2>
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10c      	bne.n	8005d16 <HAL_RCC_OscConfig+0x876>
 8005cfc:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	6213      	str	r3, [r2, #32]
 8005d08:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d0e:	f023 0304 	bic.w	r3, r3, #4
 8005d12:	6213      	str	r3, [r2, #32]
 8005d14:	e01d      	b.n	8005d52 <HAL_RCC_OscConfig+0x8b2>
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d10c      	bne.n	8005d3a <HAL_RCC_OscConfig+0x89a>
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d26:	f043 0304 	orr.w	r3, r3, #4
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6213      	str	r3, [r2, #32]
 8005d38:	e00b      	b.n	8005d52 <HAL_RCC_OscConfig+0x8b2>
 8005d3a:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6213      	str	r3, [r2, #32]
 8005d46:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d06b      	beq.n	8005e34 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fd fb06 	bl	800336c <HAL_GetTick>
 8005d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	e00b      	b.n	8005d7e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fd fb01 	bl	800336c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e291      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005d7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005d82:	2202      	movs	r2, #2
 8005d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	fa93 f2a3 	rbit	r2, r3
 8005d90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fa93 f2a3 	rbit	r2, r3
 8005da8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005dac:	601a      	str	r2, [r3, #0]
  return result;
 8005dae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005db2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db4:	fab3 f383 	clz	r3, r3
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f043 0302 	orr.w	r3, r3, #2
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d109      	bne.n	8005ddc <HAL_RCC_OscConfig+0x93c>
 8005dc8:	4b01      	ldr	r3, [pc, #4]	; (8005dd0 <HAL_RCC_OscConfig+0x930>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	e014      	b.n	8005df8 <HAL_RCC_OscConfig+0x958>
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	10908120 	.word	0x10908120
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005de0:	2202      	movs	r2, #2
 8005de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	fa93 f2a3 	rbit	r2, r3
 8005dee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	4bbb      	ldr	r3, [pc, #748]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	6011      	str	r1, [r2, #0]
 8005e00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	fa92 f1a2 	rbit	r1, r2
 8005e0a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005e0e:	6011      	str	r1, [r2, #0]
  return result;
 8005e10:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	fab2 f282 	clz	r2, r2
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	f002 021f 	and.w	r2, r2, #31
 8005e26:	2101      	movs	r1, #1
 8005e28:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d099      	beq.n	8005d66 <HAL_RCC_OscConfig+0x8c6>
 8005e32:	e063      	b.n	8005efc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e34:	f7fd fa9a 	bl	800336c <HAL_GetTick>
 8005e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e3c:	e00b      	b.n	8005e56 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fd fa95 	bl	800336c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e225      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005e56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fa93 f2a3 	rbit	r2, r3
 8005e68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e72:	2202      	movs	r2, #2
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	fa93 f2a3 	rbit	r2, r3
 8005e80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e84:	601a      	str	r2, [r3, #0]
  return result;
 8005e86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8c:	fab3 f383 	clz	r3, r3
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d102      	bne.n	8005ea6 <HAL_RCC_OscConfig+0xa06>
 8005ea0:	4b90      	ldr	r3, [pc, #576]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	e00d      	b.n	8005ec2 <HAL_RCC_OscConfig+0xa22>
 8005ea6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005eaa:	2202      	movs	r2, #2
 8005eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	fa93 f2a3 	rbit	r2, r3
 8005eb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	fa92 f1a2 	rbit	r1, r2
 8005ed4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005ed8:	6011      	str	r1, [r2, #0]
  return result;
 8005eda:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	fab2 f282 	clz	r2, r2
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	f002 021f 	and.w	r2, r2, #31
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1a0      	bne.n	8005e3e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005efc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d105      	bne.n	8005f10 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f04:	4b77      	ldr	r3, [pc, #476]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4a76      	ldr	r2, [pc, #472]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 81c2 	beq.w	80062a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f1c:	4b71      	ldr	r3, [pc, #452]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	f000 819c 	beq.w	8006262 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	f040 8114 	bne.w	800615e <HAL_RCC_OscConfig+0xcbe>
 8005f36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	fa93 f2a3 	rbit	r2, r3
 8005f4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f4e:	601a      	str	r2, [r3, #0]
  return result;
 8005f50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6c:	f7fd f9fe 	bl	800336c <HAL_GetTick>
 8005f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f74:	e009      	b.n	8005f8a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f76:	f7fd f9f9 	bl	800336c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e18b      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 8005f8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	fa93 f2a3 	rbit	r2, r3
 8005f9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fa2:	601a      	str	r2, [r3, #0]
  return result;
 8005fa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005faa:	fab3 f383 	clz	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d102      	bne.n	8005fc4 <HAL_RCC_OscConfig+0xb24>
 8005fbe:	4b49      	ldr	r3, [pc, #292]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	e01b      	b.n	8005ffc <HAL_RCC_OscConfig+0xb5c>
 8005fc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	fa93 f2a3 	rbit	r2, r3
 8005fd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	fa93 f2a3 	rbit	r2, r3
 8005ff2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	4b3a      	ldr	r3, [pc, #232]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006000:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	fa92 f1a2 	rbit	r1, r2
 8006010:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006014:	6011      	str	r1, [r2, #0]
  return result;
 8006016:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	fab2 f282 	clz	r2, r2
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	f042 0220 	orr.w	r2, r2, #32
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	f002 021f 	and.w	r2, r2, #31
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f202 	lsl.w	r2, r1, r2
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d19e      	bne.n	8005f76 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006040:	1d3b      	adds	r3, r7, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	430b      	orrs	r3, r1
 800604e:	4925      	ldr	r1, [pc, #148]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
 8006054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800605c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	fa93 f2a3 	rbit	r2, r3
 8006068:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800606c:	601a      	str	r2, [r3, #0]
  return result;
 800606e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006072:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800607e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	461a      	mov	r2, r3
 8006086:	2301      	movs	r3, #1
 8006088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608a:	f7fd f96f 	bl	800336c <HAL_GetTick>
 800608e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006092:	e009      	b.n	80060a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006094:	f7fd f96a 	bl	800336c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0fc      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 80060a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80060ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	fa93 f2a3 	rbit	r2, r3
 80060bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060c0:	601a      	str	r2, [r3, #0]
  return result;
 80060c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060c8:	fab3 f383 	clz	r3, r3
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d105      	bne.n	80060e8 <HAL_RCC_OscConfig+0xc48>
 80060dc:	4b01      	ldr	r3, [pc, #4]	; (80060e4 <HAL_RCC_OscConfig+0xc44>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	e01e      	b.n	8006120 <HAL_RCC_OscConfig+0xc80>
 80060e2:	bf00      	nop
 80060e4:	40021000 	.word	0x40021000
 80060e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	fa93 f2a3 	rbit	r2, r3
 80060fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	fa93 f2a3 	rbit	r2, r3
 8006116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	4b63      	ldr	r3, [pc, #396]	; (80062ac <HAL_RCC_OscConfig+0xe0c>)
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006124:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	fa92 f1a2 	rbit	r1, r2
 8006134:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006138:	6011      	str	r1, [r2, #0]
  return result;
 800613a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	fab2 f282 	clz	r2, r2
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	f042 0220 	orr.w	r2, r2, #32
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	f002 021f 	and.w	r2, r2, #31
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f202 	lsl.w	r2, r1, r2
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d09b      	beq.n	8006094 <HAL_RCC_OscConfig+0xbf4>
 800615c:	e0a0      	b.n	80062a0 <HAL_RCC_OscConfig+0xe00>
 800615e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006162:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	fa93 f2a3 	rbit	r2, r3
 8006172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006176:	601a      	str	r2, [r3, #0]
  return result;
 8006178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800617c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006188:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fd f8ea 	bl	800336c <HAL_GetTick>
 8006198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800619c:	e009      	b.n	80061b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619e:	f7fd f8e5 	bl	800336c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e077      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
 80061b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	fa93 f2a3 	rbit	r2, r3
 80061c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ca:	601a      	str	r2, [r3, #0]
  return result;
 80061cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_OscConfig+0xd4c>
 80061e6:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_RCC_OscConfig+0xe0c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	e01b      	b.n	8006224 <HAL_RCC_OscConfig+0xd84>
 80061ec:	f107 0320 	add.w	r3, r7, #32
 80061f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f107 0320 	add.w	r3, r7, #32
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	fa93 f2a3 	rbit	r2, r3
 8006200:	f107 031c 	add.w	r3, r7, #28
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f107 0318 	add.w	r3, r7, #24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	fa93 f2a3 	rbit	r2, r3
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	4b22      	ldr	r3, [pc, #136]	; (80062ac <HAL_RCC_OscConfig+0xe0c>)
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	f107 0210 	add.w	r2, r7, #16
 8006228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	f107 0210 	add.w	r2, r7, #16
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	fa92 f1a2 	rbit	r1, r2
 8006238:	f107 020c 	add.w	r2, r7, #12
 800623c:	6011      	str	r1, [r2, #0]
  return result;
 800623e:	f107 020c 	add.w	r2, r7, #12
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	fab2 f282 	clz	r2, r2
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	f042 0220 	orr.w	r2, r2, #32
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	f002 021f 	and.w	r2, r2, #31
 8006254:	2101      	movs	r1, #1
 8006256:	fa01 f202 	lsl.w	r2, r1, r2
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d19e      	bne.n	800619e <HAL_RCC_OscConfig+0xcfe>
 8006260:	e01e      	b.n	80062a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e018      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_RCC_OscConfig+0xe0c>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006278:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800627c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	429a      	cmp	r2, r3
 8006288:	d108      	bne.n	800629c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800628a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800628e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006292:	1d3b      	adds	r3, r7, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006298:	429a      	cmp	r2, r3
 800629a:	d001      	beq.n	80062a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40021000 	.word	0x40021000

080062b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b09e      	sub	sp, #120	; 0x78
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e162      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062c8:	4b90      	ldr	r3, [pc, #576]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d910      	bls.n	80062f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b8d      	ldr	r3, [pc, #564]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 0207 	bic.w	r2, r3, #7
 80062de:	498b      	ldr	r1, [pc, #556]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b89      	ldr	r3, [pc, #548]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e14a      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006304:	4b82      	ldr	r3, [pc, #520]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	497f      	ldr	r1, [pc, #508]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 8006312:	4313      	orrs	r3, r2
 8006314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80dc 	beq.w	80064dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d13c      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xf6>
 800632c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006330:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633c:	fab3 f383 	clz	r3, r3
 8006340:	b2db      	uxtb	r3, r3
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	d102      	bne.n	8006356 <HAL_RCC_ClockConfig+0xa6>
 8006350:	4b6f      	ldr	r3, [pc, #444]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	e00f      	b.n	8006376 <HAL_RCC_ClockConfig+0xc6>
 8006356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800635a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800635e:	fa93 f3a3 	rbit	r3, r3
 8006362:	667b      	str	r3, [r7, #100]	; 0x64
 8006364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006368:	663b      	str	r3, [r7, #96]	; 0x60
 800636a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636c:	fa93 f3a3 	rbit	r3, r3
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006372:	4b67      	ldr	r3, [pc, #412]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800637a:	65ba      	str	r2, [r7, #88]	; 0x58
 800637c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800637e:	fa92 f2a2 	rbit	r2, r2
 8006382:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006386:	fab2 f282 	clz	r2, r2
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	f042 0220 	orr.w	r2, r2, #32
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	f002 021f 	and.w	r2, r2, #31
 8006396:	2101      	movs	r1, #1
 8006398:	fa01 f202 	lsl.w	r2, r1, r2
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d17b      	bne.n	800649a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e0f3      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d13c      	bne.n	8006428 <HAL_RCC_ClockConfig+0x178>
 80063ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b6:	fa93 f3a3 	rbit	r3, r3
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063be:	fab3 f383 	clz	r3, r3
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d102      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x128>
 80063d2:	4b4f      	ldr	r3, [pc, #316]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	e00f      	b.n	80063f8 <HAL_RCC_ClockConfig+0x148>
 80063d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e0:	fa93 f3a3 	rbit	r3, r3
 80063e4:	647b      	str	r3, [r7, #68]	; 0x44
 80063e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
 80063ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f4:	4b46      	ldr	r3, [pc, #280]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80063fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006400:	fa92 f2a2 	rbit	r2, r2
 8006404:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006408:	fab2 f282 	clz	r2, r2
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	f042 0220 	orr.w	r2, r2, #32
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	f002 021f 	and.w	r2, r2, #31
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f202 	lsl.w	r2, r1, r2
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d13a      	bne.n	800649a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0b2      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
 8006428:	2302      	movs	r3, #2
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	fa93 f3a3 	rbit	r3, r3
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1a0>
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	e00d      	b.n	800646c <HAL_RCC_ClockConfig+0x1bc>
 8006450:	2302      	movs	r3, #2
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	fa93 f3a3 	rbit	r3, r3
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	2302      	movs	r3, #2
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	fa93 f3a3 	rbit	r3, r3
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	4b29      	ldr	r3, [pc, #164]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2202      	movs	r2, #2
 800646e:	61ba      	str	r2, [r7, #24]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	fa92 f2a2 	rbit	r2, r2
 8006476:	617a      	str	r2, [r7, #20]
  return result;
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	fab2 f282 	clz	r2, r2
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	f042 0220 	orr.w	r2, r2, #32
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	f002 021f 	and.w	r2, r2, #31
 800648a:	2101      	movs	r1, #1
 800648c:	fa01 f202 	lsl.w	r2, r1, r2
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e079      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f023 0203 	bic.w	r2, r3, #3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	491a      	ldr	r1, [pc, #104]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064ac:	f7fc ff5e 	bl	800336c <HAL_GetTick>
 80064b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b4:	f7fc ff5a 	bl	800336c <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e061      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <HAL_RCC_ClockConfig+0x260>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 020c 	and.w	r2, r3, #12
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	429a      	cmp	r2, r3
 80064da:	d1eb      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d214      	bcs.n	8006514 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	4906      	ldr	r1, [pc, #24]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_RCC_ClockConfig+0x25c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e040      	b.n	800658e <HAL_RCC_ClockConfig+0x2de>
 800650c:	40022000 	.word	0x40022000
 8006510:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_RCC_ClockConfig+0x2e8>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	491a      	ldr	r1, [pc, #104]	; (8006598 <HAL_RCC_ClockConfig+0x2e8>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800653e:	4b16      	ldr	r3, [pc, #88]	; (8006598 <HAL_RCC_ClockConfig+0x2e8>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4912      	ldr	r1, [pc, #72]	; (8006598 <HAL_RCC_ClockConfig+0x2e8>)
 800654e:	4313      	orrs	r3, r2
 8006550:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006552:	f000 f829 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8006556:	4601      	mov	r1, r0
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <HAL_RCC_ClockConfig+0x2e8>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006560:	22f0      	movs	r2, #240	; 0xf0
 8006562:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	fa92 f2a2 	rbit	r2, r2
 800656a:	60fa      	str	r2, [r7, #12]
  return result;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	fab2 f282 	clz	r2, r2
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	40d3      	lsrs	r3, r2
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <HAL_RCC_ClockConfig+0x2ec>)
 8006578:	5cd3      	ldrb	r3, [r2, r3]
 800657a:	fa21 f303 	lsr.w	r3, r1, r3
 800657e:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <HAL_RCC_ClockConfig+0x2f0>)
 8006580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006582:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <HAL_RCC_ClockConfig+0x2f4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc feac 	bl	80032e4 <HAL_InitTick>
  
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3778      	adds	r7, #120	; 0x78
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000
 800659c:	080088e0 	.word	0x080088e0
 80065a0:	20000000 	.word	0x20000000
 80065a4:	20000004 	.word	0x20000004

080065a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b08b      	sub	sp, #44	; 0x2c
 80065ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	2300      	movs	r3, #0
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80065c2:	4b29      	ldr	r3, [pc, #164]	; (8006668 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d002      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x30>
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d003      	beq.n	80065de <HAL_RCC_GetSysClockFreq+0x36>
 80065d6:	e03c      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <HAL_RCC_GetSysClockFreq+0xc4>)
 80065da:	623b      	str	r3, [r7, #32]
      break;
 80065dc:	e03c      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80065e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80065e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	fa92 f2a2 	rbit	r2, r2
 80065f0:	607a      	str	r2, [r7, #4]
  return result;
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	fab2 f282 	clz	r2, r2
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	40d3      	lsrs	r3, r2
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_RCC_GetSysClockFreq+0xc8>)
 80065fe:	5cd3      	ldrb	r3, [r2, r3]
 8006600:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006602:	4b19      	ldr	r3, [pc, #100]	; (8006668 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	220f      	movs	r2, #15
 800660c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	fa92 f2a2 	rbit	r2, r2
 8006614:	60fa      	str	r2, [r7, #12]
  return result;
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	fab2 f282 	clz	r2, r2
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	40d3      	lsrs	r3, r2
 8006620:	4a14      	ldr	r2, [pc, #80]	; (8006674 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006622:	5cd3      	ldrb	r3, [r2, r3]
 8006624:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006630:	4a0e      	ldr	r2, [pc, #56]	; (800666c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	fbb2 f2f3 	udiv	r2, r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
 8006640:	e004      	b.n	800664c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	623b      	str	r3, [r7, #32]
      break;
 8006650:	e002      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006654:	623b      	str	r3, [r7, #32]
      break;
 8006656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006658:	6a3b      	ldr	r3, [r7, #32]
}
 800665a:	4618      	mov	r0, r3
 800665c:	372c      	adds	r7, #44	; 0x2c
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40021000 	.word	0x40021000
 800666c:	00b71b00 	.word	0x00b71b00
 8006670:	080088f8 	.word	0x080088f8
 8006674:	08008908 	.word	0x08008908
 8006678:	003d0900 	.word	0x003d0900
 800667c:	007a1200 	.word	0x007a1200

08006680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006684:	4b03      	ldr	r3, [pc, #12]	; (8006694 <HAL_RCC_GetHCLKFreq+0x14>)
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000000 	.word	0x20000000

08006698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800669e:	f7ff ffef 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066a2:	4601      	mov	r1, r0
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80066b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	fa92 f2a2 	rbit	r2, r2
 80066b8:	603a      	str	r2, [r7, #0]
  return result;
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	fab2 f282 	clz	r2, r2
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	40d3      	lsrs	r3, r2
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80066c6:	5cd3      	ldrb	r3, [r2, r3]
 80066c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000
 80066d8:	080088f0 	.word	0x080088f0

080066dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80066e2:	f7ff ffcd 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066e6:	4601      	mov	r1, r0
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80066f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80066f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	fa92 f2a2 	rbit	r2, r2
 80066fc:	603a      	str	r2, [r7, #0]
  return result;
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	fab2 f282 	clz	r2, r2
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	40d3      	lsrs	r3, r2
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <HAL_RCC_GetPCLK2Freq+0x40>)
 800670a:	5cd3      	ldrb	r3, [r2, r3]
 800670c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40021000 	.word	0x40021000
 800671c:	080088f0 	.word	0x080088f0

08006720 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b092      	sub	sp, #72	; 0x48
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80cd 	beq.w	80068de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006744:	4b86      	ldr	r3, [pc, #536]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10e      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006750:	4b83      	ldr	r3, [pc, #524]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	4a82      	ldr	r2, [pc, #520]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	61d3      	str	r3, [r2, #28]
 800675c:	4b80      	ldr	r3, [pc, #512]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676e:	4b7d      	ldr	r3, [pc, #500]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d118      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677a:	4b7a      	ldr	r3, [pc, #488]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a79      	ldr	r2, [pc, #484]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006786:	f7fc fdf1 	bl	800336c <HAL_GetTick>
 800678a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678c:	e008      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678e:	f7fc fded 	bl	800336c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b64      	cmp	r3, #100	; 0x64
 800679a:	d901      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e0db      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a0:	4b70      	ldr	r3, [pc, #448]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ac:	4b6c      	ldr	r3, [pc, #432]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d07d      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d076      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ca:	4b65      	ldr	r3, [pc, #404]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	fa93 f3a3 	rbit	r3, r3
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067e4:	fab3 f383 	clz	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	4b5e      	ldr	r3, [pc, #376]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	461a      	mov	r2, r3
 80067f4:	2301      	movs	r3, #1
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	fa93 f3a3 	rbit	r3, r3
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006808:	fab3 f383 	clz	r3, r3
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	4b55      	ldr	r3, [pc, #340]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	461a      	mov	r2, r3
 8006818:	2300      	movs	r3, #0
 800681a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800681c:	4a50      	ldr	r2, [pc, #320]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d045      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc fd9e 	bl	800336c <HAL_GetTick>
 8006830:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006832:	e00a      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fc fd9a 	bl	800336c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e086      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800684a:	2302      	movs	r3, #2
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	fa93 f3a3 	rbit	r3, r3
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	2302      	movs	r3, #2
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	fa93 f3a3 	rbit	r3, r3
 8006860:	61fb      	str	r3, [r7, #28]
  return result;
 8006862:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006864:	fab3 f383 	clz	r3, r3
 8006868:	b2db      	uxtb	r3, r3
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f043 0302 	orr.w	r3, r3, #2
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d102      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006878:	4b39      	ldr	r3, [pc, #228]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	e007      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800687e:	2302      	movs	r3, #2
 8006880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	fa93 f3a3 	rbit	r3, r3
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2202      	movs	r2, #2
 8006890:	613a      	str	r2, [r7, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	fa92 f2a2 	rbit	r2, r2
 8006898:	60fa      	str	r2, [r7, #12]
  return result;
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	fab2 f282 	clz	r2, r2
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	f002 021f 	and.w	r2, r2, #31
 80068ac:	2101      	movs	r1, #1
 80068ae:	fa01 f202 	lsl.w	r2, r1, r2
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0bd      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80068b8:	4b29      	ldr	r3, [pc, #164]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4926      	ldr	r1, [pc, #152]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d105      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d2:	4b23      	ldr	r3, [pc, #140]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	f023 0203 	bic.w	r2, r3, #3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	491a      	ldr	r1, [pc, #104]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	f023 0210 	bic.w	r2, r3, #16
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4912      	ldr	r1, [pc, #72]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006916:	4313      	orrs	r3, r2
 8006918:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006926:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	490b      	ldr	r1, [pc, #44]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006934:	4313      	orrs	r3, r2
 8006936:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	4903      	ldr	r1, [pc, #12]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006952:	4313      	orrs	r3, r2
 8006954:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3748      	adds	r7, #72	; 0x48
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000
 8006964:	40007000 	.word	0x40007000
 8006968:	10908100 	.word	0x10908100

0800696c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e049      	b.n	8006a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fc fb16 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 ff0e 	bl	80077cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d001      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e040      	b.n	8006ab6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x58>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x58>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xac>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x58>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_TIM_Base_Start_IT+0xb0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d015      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0x96>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d011      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e008      	b.n	8006ab2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	00010007 	.word	0x00010007

08006ad4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10f      	bne.n	8006b1c <HAL_TIM_Base_Stop_IT+0x48>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	f240 4344 	movw	r3, #1092	; 0x444
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_Base_Stop_IT+0x48>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e049      	b.n	8006bd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f841 	bl	8006be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f000 fe2b 	bl	80077cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_TIM_PWM_Start+0x24>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	bf14      	ite	ne
 8006c10:	2301      	movne	r3, #1
 8006c12:	2300      	moveq	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	e03c      	b.n	8006c92 <HAL_TIM_PWM_Start+0x9e>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d109      	bne.n	8006c32 <HAL_TIM_PWM_Start+0x3e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	bf14      	ite	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	2300      	moveq	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	e02f      	b.n	8006c92 <HAL_TIM_PWM_Start+0x9e>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d109      	bne.n	8006c4c <HAL_TIM_PWM_Start+0x58>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	e022      	b.n	8006c92 <HAL_TIM_PWM_Start+0x9e>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b0c      	cmp	r3, #12
 8006c50:	d109      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x72>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	bf14      	ite	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	2300      	moveq	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	e015      	b.n	8006c92 <HAL_TIM_PWM_Start+0x9e>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d109      	bne.n	8006c80 <HAL_TIM_PWM_Start+0x8c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e008      	b.n	8006c92 <HAL_TIM_PWM_Start+0x9e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e088      	b.n	8006dac <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_PWM_Start+0xb6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca8:	e023      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xfe>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start+0xc6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb8:	e01b      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xfe>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_PWM_Start+0xd6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc8:	e013      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xfe>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b0c      	cmp	r3, #12
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_PWM_Start+0xe6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd8:	e00b      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xfe>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start+0xf6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce8:	e003      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xfe>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 f91e 	bl	8007f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <HAL_TIM_PWM_Start+0x1c0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_PWM_Start+0x134>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <HAL_TIM_PWM_Start+0x1c4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_PWM_Start+0x134>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <HAL_TIM_PWM_Start+0x1c8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_PWM_Start+0x134>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a27      	ldr	r2, [pc, #156]	; (8006dc0 <HAL_TIM_PWM_Start+0x1cc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d101      	bne.n	8006d2c <HAL_TIM_PWM_Start+0x138>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <HAL_TIM_PWM_Start+0x13a>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <HAL_TIM_PWM_Start+0x1c0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00e      	beq.n	8006d6a <HAL_TIM_PWM_Start+0x176>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d009      	beq.n	8006d6a <HAL_TIM_PWM_Start+0x176>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <HAL_TIM_PWM_Start+0x1d0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIM_PWM_Start+0x176>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <HAL_TIM_PWM_Start+0x1c4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d115      	bne.n	8006d96 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_TIM_PWM_Start+0x1d4>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b06      	cmp	r3, #6
 8006d7a:	d015      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x1b4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d82:	d011      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d94:	e008      	b.n	8006da8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0201 	orr.w	r2, r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	e000      	b.n	8006daa <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	00010007 	.word	0x00010007

08006dcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e097      	b.n	8006f10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fc f91f 	bl	8003038 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fcd3 	bl	80077cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e6c:	f023 030c 	bic.w	r3, r3, #12
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	031b      	lsls	r3, r3, #12
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d110      	bne.n	8006f6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d102      	bne.n	8006f54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f4e:	7b7b      	ldrb	r3, [r7, #13]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e069      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	e031      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d110      	bne.n	8006f92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f76:	7b3b      	ldrb	r3, [r7, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d001      	beq.n	8006f80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e055      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f90:	e01d      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f9e:	7b7b      	ldrb	r3, [r7, #13]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d102      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fa4:	7b3b      	ldrb	r3, [r7, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d001      	beq.n	8006fae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e03e      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_TIM_Encoder_Start+0xc4>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d008      	beq.n	8006fec <HAL_TIM_Encoder_Start+0xd4>
 8006fda:	e00f      	b.n	8006ffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ffa9 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8006fea:	e016      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 ffa1 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8006ffa:	e00e      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2201      	movs	r2, #1
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f000 ff99 	bl	8007f3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2201      	movs	r2, #1
 8007010:	2104      	movs	r1, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ff92 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8007018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_TIM_Encoder_Stop+0x18>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d008      	beq.n	800705c <HAL_TIM_Encoder_Stop+0x28>
 800704a:	e00f      	b.n	800706c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 ff71 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 800705a:	e016      	b.n	800708a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	2104      	movs	r1, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f000 ff69 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 800706a:	e00e      	b.n	800708a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f000 ff61 	bl	8007f3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	2104      	movs	r1, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f000 ff5a 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8007088:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6a1a      	ldr	r2, [r3, #32]
 8007090:	f241 1311 	movw	r3, #4369	; 0x1111
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <HAL_TIM_Encoder_Stop+0x86>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a1a      	ldr	r2, [r3, #32]
 80070a0:	f240 4344 	movw	r3, #1092	; 0x444
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d107      	bne.n	80070ba <HAL_TIM_Encoder_Stop+0x86>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_TIM_Encoder_Stop+0x92>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d148      	bne.n	8007158 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_Encoder_Stop+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d4:	e023      	b.n	800711e <HAL_TIM_Encoder_Stop+0xea>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_Encoder_Stop+0xb2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e4:	e01b      	b.n	800711e <HAL_TIM_Encoder_Stop+0xea>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_Encoder_Stop+0xc2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f4:	e013      	b.n	800711e <HAL_TIM_Encoder_Stop+0xea>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_Encoder_Stop+0xd2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007104:	e00b      	b.n	800711e <HAL_TIM_Encoder_Stop+0xea>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b10      	cmp	r3, #16
 800710a:	d104      	bne.n	8007116 <HAL_TIM_Encoder_Stop+0xe2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007114:	e003      	b.n	800711e <HAL_TIM_Encoder_Stop+0xea>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <HAL_TIM_Encoder_Stop+0xfa>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712c:	e024      	b.n	8007178 <HAL_TIM_Encoder_Stop+0x144>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d104      	bne.n	800713e <HAL_TIM_Encoder_Stop+0x10a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800713c:	e01c      	b.n	8007178 <HAL_TIM_Encoder_Stop+0x144>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d104      	bne.n	800714e <HAL_TIM_Encoder_Stop+0x11a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800714c:	e014      	b.n	8007178 <HAL_TIM_Encoder_Stop+0x144>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007156:	e00f      	b.n	8007178 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b02      	cmp	r3, #2
 8007196:	d122      	bne.n	80071de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d11b      	bne.n	80071de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f06f 0202 	mvn.w	r2, #2
 80071ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fae2 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 80071ca:	e005      	b.n	80071d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fad4 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fae5 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d122      	bne.n	8007232 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0304 	and.w	r3, r3, #4
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d11b      	bne.n	8007232 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f06f 0204 	mvn.w	r2, #4
 8007202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fab8 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 800721e:	e005      	b.n	800722c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 faaa 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fabb 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d122      	bne.n	8007286 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b08      	cmp	r3, #8
 800724c:	d11b      	bne.n	8007286 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f06f 0208 	mvn.w	r2, #8
 8007256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2204      	movs	r2, #4
 800725c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa8e 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 8007272:	e005      	b.n	8007280 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa80 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa91 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d122      	bne.n	80072da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d11b      	bne.n	80072da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0210 	mvn.w	r2, #16
 80072aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2208      	movs	r2, #8
 80072b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa64 	bl	800778e <HAL_TIM_IC_CaptureCallback>
 80072c6:	e005      	b.n	80072d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa56 	bl	800777a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa67 	bl	80077a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10e      	bne.n	8007306 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0201 	mvn.w	r2, #1
 80072fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fa feb3 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d10e      	bne.n	8007332 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	2b80      	cmp	r3, #128	; 0x80
 8007320:	d107      	bne.n	8007332 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fea3 	bl	8008078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007340:	d10e      	bne.n	8007360 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d107      	bne.n	8007360 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fe96 	bl	800808c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d10e      	bne.n	800738c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d107      	bne.n	800738c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa15 	bl	80077b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b20      	cmp	r3, #32
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0220 	mvn.w	r2, #32
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fe56 	bl	8008064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073da:	2302      	movs	r3, #2
 80073dc:	e0ff      	b.n	80075de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b14      	cmp	r3, #20
 80073ea:	f200 80f0 	bhi.w	80075ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	08007449 	.word	0x08007449
 80073f8:	080075cf 	.word	0x080075cf
 80073fc:	080075cf 	.word	0x080075cf
 8007400:	080075cf 	.word	0x080075cf
 8007404:	08007489 	.word	0x08007489
 8007408:	080075cf 	.word	0x080075cf
 800740c:	080075cf 	.word	0x080075cf
 8007410:	080075cf 	.word	0x080075cf
 8007414:	080074cb 	.word	0x080074cb
 8007418:	080075cf 	.word	0x080075cf
 800741c:	080075cf 	.word	0x080075cf
 8007420:	080075cf 	.word	0x080075cf
 8007424:	0800750b 	.word	0x0800750b
 8007428:	080075cf 	.word	0x080075cf
 800742c:	080075cf 	.word	0x080075cf
 8007430:	080075cf 	.word	0x080075cf
 8007434:	0800754d 	.word	0x0800754d
 8007438:	080075cf 	.word	0x080075cf
 800743c:	080075cf 	.word	0x080075cf
 8007440:	080075cf 	.word	0x080075cf
 8007444:	0800758d 	.word	0x0800758d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fa34 	bl	80078bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0208 	orr.w	r2, r2, #8
 8007462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0204 	bic.w	r2, r2, #4
 8007472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6999      	ldr	r1, [r3, #24]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	619a      	str	r2, [r3, #24]
      break;
 8007486:	e0a5      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fa9a 	bl	80079c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6999      	ldr	r1, [r3, #24]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	021a      	lsls	r2, r3, #8
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	619a      	str	r2, [r3, #24]
      break;
 80074c8:	e084      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 faf9 	bl	8007ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0208 	orr.w	r2, r2, #8
 80074e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0204 	bic.w	r2, r2, #4
 80074f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69d9      	ldr	r1, [r3, #28]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	61da      	str	r2, [r3, #28]
      break;
 8007508:	e064      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fb57 	bl	8007bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69d9      	ldr	r1, [r3, #28]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	021a      	lsls	r2, r3, #8
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	61da      	str	r2, [r3, #28]
      break;
 800754a:	e043      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fb9a 	bl	8007c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0208 	orr.w	r2, r2, #8
 8007566:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800758a:	e023      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fbd8 	bl	8007d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	021a      	lsls	r2, r3, #8
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075cc:	e002      	b.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
      break;
 80075d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop

080075e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_TIM_ConfigClockSource+0x1c>
 8007600:	2302      	movs	r3, #2
 8007602:	e0b6      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x18a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xd8>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x170>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x176>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xaa>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x11e>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xfe>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x13e>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15e>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15e>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15e>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15e>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 fc2b 	bl	8007efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 fc14 	bl	8007efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fb88 	bl	8007e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fbe1 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fba7 	bl	8007e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fbd1 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 fb68 	bl	8007e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fbc1 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 fbb8 	bl	8007ec6 <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a32      	ldr	r2, [pc, #200]	; (80078a8 <TIM_Base_SetConfig+0xdc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_Base_SetConfig+0x28>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0x28>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <TIM_Base_SetConfig+0xe0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d108      	bne.n	8007806 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a27      	ldr	r2, [pc, #156]	; (80078a8 <TIM_Base_SetConfig+0xdc>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <TIM_Base_SetConfig+0x6a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007814:	d00f      	beq.n	8007836 <TIM_Base_SetConfig+0x6a>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a24      	ldr	r2, [pc, #144]	; (80078ac <TIM_Base_SetConfig+0xe0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00b      	beq.n	8007836 <TIM_Base_SetConfig+0x6a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a23      	ldr	r2, [pc, #140]	; (80078b0 <TIM_Base_SetConfig+0xe4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d007      	beq.n	8007836 <TIM_Base_SetConfig+0x6a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <TIM_Base_SetConfig+0xe8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_Base_SetConfig+0x6a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a21      	ldr	r2, [pc, #132]	; (80078b8 <TIM_Base_SetConfig+0xec>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a0e      	ldr	r2, [pc, #56]	; (80078a8 <TIM_Base_SetConfig+0xdc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0xc0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a0e      	ldr	r2, [pc, #56]	; (80078b0 <TIM_Base_SetConfig+0xe4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0xc0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a0d      	ldr	r2, [pc, #52]	; (80078b4 <TIM_Base_SetConfig+0xe8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0xc0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <TIM_Base_SetConfig+0xec>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d103      	bne.n	8007894 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	615a      	str	r2, [r3, #20]
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40014400 	.word	0x40014400
 80078b8:	40014800 	.word	0x40014800

080078bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 0302 	bic.w	r3, r3, #2
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <TIM_OC1_SetConfig+0xfc>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00b      	beq.n	8007934 <TIM_OC1_SetConfig+0x78>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a27      	ldr	r2, [pc, #156]	; (80079bc <TIM_OC1_SetConfig+0x100>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d007      	beq.n	8007934 <TIM_OC1_SetConfig+0x78>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <TIM_OC1_SetConfig+0x104>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_OC1_SetConfig+0x78>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a25      	ldr	r2, [pc, #148]	; (80079c4 <TIM_OC1_SetConfig+0x108>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d10c      	bne.n	800794e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0308 	bic.w	r3, r3, #8
 800793a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f023 0304 	bic.w	r3, r3, #4
 800794c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <TIM_OC1_SetConfig+0xfc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_OC1_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a18      	ldr	r2, [pc, #96]	; (80079bc <TIM_OC1_SetConfig+0x100>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_OC1_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <TIM_OC1_SetConfig+0x104>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC1_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <TIM_OC1_SetConfig+0x108>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d111      	bne.n	8007992 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40014800 	.word	0x40014800

080079c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0210 	bic.w	r2, r3, #16
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f023 0320 	bic.w	r3, r3, #32
 8007a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <TIM_OC2_SetConfig+0xf0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10d      	bne.n	8007a48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <TIM_OC2_SetConfig+0xf0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00b      	beq.n	8007a68 <TIM_OC2_SetConfig+0xa0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a1a      	ldr	r2, [pc, #104]	; (8007abc <TIM_OC2_SetConfig+0xf4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d007      	beq.n	8007a68 <TIM_OC2_SetConfig+0xa0>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <TIM_OC2_SetConfig+0xf8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d003      	beq.n	8007a68 <TIM_OC2_SetConfig+0xa0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <TIM_OC2_SetConfig+0xfc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d113      	bne.n	8007a90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	621a      	str	r2, [r3, #32]
}
 8007aaa:	bf00      	nop
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800

08007ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0303 	bic.w	r3, r3, #3
 8007b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a23      	ldr	r2, [pc, #140]	; (8007bb4 <TIM_OC3_SetConfig+0xec>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d10d      	bne.n	8007b46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <TIM_OC3_SetConfig+0xec>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00b      	beq.n	8007b66 <TIM_OC3_SetConfig+0x9e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <TIM_OC3_SetConfig+0xf0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d007      	beq.n	8007b66 <TIM_OC3_SetConfig+0x9e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <TIM_OC3_SetConfig+0xf4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC3_SetConfig+0x9e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a17      	ldr	r2, [pc, #92]	; (8007bc0 <TIM_OC3_SetConfig+0xf8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d113      	bne.n	8007b8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400
 8007bc0:	40014800 	.word	0x40014800

08007bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <TIM_OC4_SetConfig+0xb8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00b      	beq.n	8007c40 <TIM_OC4_SetConfig+0x7c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <TIM_OC4_SetConfig+0xbc>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d007      	beq.n	8007c40 <TIM_OC4_SetConfig+0x7c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a14      	ldr	r2, [pc, #80]	; (8007c84 <TIM_OC4_SetConfig+0xc0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_OC4_SetConfig+0x7c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <TIM_OC4_SetConfig+0xc4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d109      	bne.n	8007c54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	019b      	lsls	r3, r3, #6
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	40014800 	.word	0x40014800

08007c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <TIM_OC5_SetConfig+0xac>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <TIM_OC5_SetConfig+0x72>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <TIM_OC5_SetConfig+0xb0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d007      	beq.n	8007cfe <TIM_OC5_SetConfig+0x72>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <TIM_OC5_SetConfig+0xb4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC5_SetConfig+0x72>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a12      	ldr	r2, [pc, #72]	; (8007d44 <TIM_OC5_SetConfig+0xb8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d109      	bne.n	8007d12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	621a      	str	r2, [r3, #32]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	40012c00 	.word	0x40012c00
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800

08007d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	051b      	lsls	r3, r3, #20
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <TIM_OC6_SetConfig+0xb0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <TIM_OC6_SetConfig+0x74>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <TIM_OC6_SetConfig+0xb4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d007      	beq.n	8007dbc <TIM_OC6_SetConfig+0x74>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <TIM_OC6_SetConfig+0xb8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <TIM_OC6_SetConfig+0x74>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <TIM_OC6_SetConfig+0xbc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d109      	bne.n	8007dd0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	029b      	lsls	r3, r3, #10
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40014400 	.word	0x40014400
 8007e04:	40014800 	.word	0x40014800

08007e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f023 030a 	bic.w	r3, r3, #10
 8007e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b087      	sub	sp, #28
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0210 	bic.w	r2, r3, #16
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	031b      	lsls	r3, r3, #12
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f043 0307 	orr.w	r3, r3, #7
 8007ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	021a      	lsls	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	609a      	str	r2, [r3, #8]
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2201      	movs	r2, #1
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a1a      	ldr	r2, [r3, #32]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	401a      	ands	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a1a      	ldr	r2, [r3, #32]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	fa01 f303 	lsl.w	r3, r1, r3
 8007f74:	431a      	orrs	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e054      	b.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a24      	ldr	r2, [pc, #144]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d108      	bne.n	8007fdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008008:	d009      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a13      	ldr	r2, [pc, #76]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a11      	ldr	r2, [pc, #68]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d10c      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4313      	orrs	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40000400 	.word	0x40000400
 8008060:	40014000 	.word	0x40014000

08008064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e040      	b.n	8008134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fb f830 	bl	8003128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	; 0x24
 80080cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f82c 	bl	800813c <UART_SetConfig>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e022      	b.n	8008134 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f956 	bl	80083a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800810a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800811a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f9dd 	bl	80084ec <UART_CheckIdleState>
 8008132:	4603      	mov	r3, r0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b8a      	ldr	r3, [pc, #552]	; (8008390 <UART_SetConfig+0x254>)
 8008168:	4013      	ands	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	6979      	ldr	r1, [r7, #20]
 8008170:	430b      	orrs	r3, r1
 8008172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a78      	ldr	r2, [pc, #480]	; (8008394 <UART_SetConfig+0x258>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d120      	bne.n	80081fa <UART_SetConfig+0xbe>
 80081b8:	4b77      	ldr	r3, [pc, #476]	; (8008398 <UART_SetConfig+0x25c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d817      	bhi.n	80081f4 <UART_SetConfig+0xb8>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0x90>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081e9 	.word	0x080081e9
 80081d4:	080081ef 	.word	0x080081ef
 80081d8:	080081e3 	.word	0x080081e3
 80081dc:	2300      	movs	r3, #0
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e01d      	b.n	800821e <UART_SetConfig+0xe2>
 80081e2:	2302      	movs	r3, #2
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e01a      	b.n	800821e <UART_SetConfig+0xe2>
 80081e8:	2304      	movs	r3, #4
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e017      	b.n	800821e <UART_SetConfig+0xe2>
 80081ee:	2308      	movs	r3, #8
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e014      	b.n	800821e <UART_SetConfig+0xe2>
 80081f4:	2310      	movs	r3, #16
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e011      	b.n	800821e <UART_SetConfig+0xe2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a67      	ldr	r2, [pc, #412]	; (800839c <UART_SetConfig+0x260>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d102      	bne.n	800820a <UART_SetConfig+0xce>
 8008204:	2300      	movs	r3, #0
 8008206:	77fb      	strb	r3, [r7, #31]
 8008208:	e009      	b.n	800821e <UART_SetConfig+0xe2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a64      	ldr	r2, [pc, #400]	; (80083a0 <UART_SetConfig+0x264>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d102      	bne.n	800821a <UART_SetConfig+0xde>
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e001      	b.n	800821e <UART_SetConfig+0xe2>
 800821a:	2310      	movs	r3, #16
 800821c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008226:	d15b      	bne.n	80082e0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8008228:	7ffb      	ldrb	r3, [r7, #31]
 800822a:	2b08      	cmp	r3, #8
 800822c:	d827      	bhi.n	800827e <UART_SetConfig+0x142>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0xf8>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008259 	.word	0x08008259
 8008238:	08008261 	.word	0x08008261
 800823c:	08008269 	.word	0x08008269
 8008240:	0800827f 	.word	0x0800827f
 8008244:	0800826f 	.word	0x0800826f
 8008248:	0800827f 	.word	0x0800827f
 800824c:	0800827f 	.word	0x0800827f
 8008250:	0800827f 	.word	0x0800827f
 8008254:	08008277 	.word	0x08008277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008258:	f7fe fa1e 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 800825c:	61b8      	str	r0, [r7, #24]
        break;
 800825e:	e013      	b.n	8008288 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fe fa3c 	bl	80066dc <HAL_RCC_GetPCLK2Freq>
 8008264:	61b8      	str	r0, [r7, #24]
        break;
 8008266:	e00f      	b.n	8008288 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008268:	4b4e      	ldr	r3, [pc, #312]	; (80083a4 <UART_SetConfig+0x268>)
 800826a:	61bb      	str	r3, [r7, #24]
        break;
 800826c:	e00c      	b.n	8008288 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826e:	f7fe f99b 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8008272:	61b8      	str	r0, [r7, #24]
        break;
 8008274:	e008      	b.n	8008288 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	61bb      	str	r3, [r7, #24]
        break;
 800827c:	e004      	b.n	8008288 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	77bb      	strb	r3, [r7, #30]
        break;
 8008286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d074      	beq.n	8008378 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	005a      	lsls	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	441a      	add	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d916      	bls.n	80082da <UART_SetConfig+0x19e>
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b2:	d212      	bcs.n	80082da <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f023 030f 	bic.w	r3, r3, #15
 80082bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	89fa      	ldrh	r2, [r7, #14]
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e04e      	b.n	8008378 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	77bb      	strb	r3, [r7, #30]
 80082de:	e04b      	b.n	8008378 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e0:	7ffb      	ldrb	r3, [r7, #31]
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d827      	bhi.n	8008336 <UART_SetConfig+0x1fa>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x1b0>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008311 	.word	0x08008311
 80082f0:	08008319 	.word	0x08008319
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008337 	.word	0x08008337
 80082fc:	08008327 	.word	0x08008327
 8008300:	08008337 	.word	0x08008337
 8008304:	08008337 	.word	0x08008337
 8008308:	08008337 	.word	0x08008337
 800830c:	0800832f 	.word	0x0800832f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008310:	f7fe f9c2 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8008314:	61b8      	str	r0, [r7, #24]
        break;
 8008316:	e013      	b.n	8008340 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008318:	f7fe f9e0 	bl	80066dc <HAL_RCC_GetPCLK2Freq>
 800831c:	61b8      	str	r0, [r7, #24]
        break;
 800831e:	e00f      	b.n	8008340 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008320:	4b20      	ldr	r3, [pc, #128]	; (80083a4 <UART_SetConfig+0x268>)
 8008322:	61bb      	str	r3, [r7, #24]
        break;
 8008324:	e00c      	b.n	8008340 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008326:	f7fe f93f 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 800832a:	61b8      	str	r0, [r7, #24]
        break;
 800832c:	e008      	b.n	8008340 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	61bb      	str	r3, [r7, #24]
        break;
 8008334:	e004      	b.n	8008340 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	77bb      	strb	r3, [r7, #30]
        break;
 800833e:	bf00      	nop
    }

    if (pclk != 0U)
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d018      	beq.n	8008378 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	085a      	lsrs	r2, r3, #1
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	441a      	add	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	b29b      	uxth	r3, r3
 800835a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d908      	bls.n	8008374 <UART_SetConfig+0x238>
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d204      	bcs.n	8008374 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e001      	b.n	8008378 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008384:	7fbb      	ldrb	r3, [r7, #30]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	efff69f3 	.word	0xefff69f3
 8008394:	40013800 	.word	0x40013800
 8008398:	40021000 	.word	0x40021000
 800839c:	40004400 	.word	0x40004400
 80083a0:	40004800 	.word	0x40004800
 80083a4:	007a1200 	.word	0x007a1200

080083a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01a      	beq.n	80084be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a6:	d10a      	bne.n	80084be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084fc:	f7fa ff36 	bl	800336c <HAL_GetTick>
 8008500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d10e      	bne.n	800852e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f82d 	bl	800857e <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e023      	b.n	8008576 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d10e      	bne.n	800855a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f817 	bl	800857e <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e00d      	b.n	8008576 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b09c      	sub	sp, #112	; 0x70
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858e:	e0a5      	b.n	80086dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	f000 80a1 	beq.w	80086dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859a:	f7fa fee7 	bl	800336c <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d302      	bcc.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80085aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d13e      	bne.n	800862e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c4:	667b      	str	r3, [r7, #100]	; 0x64
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	663b      	str	r3, [r7, #96]	; 0x60
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008602:	64ba      	str	r2, [r7, #72]	; 0x48
 8008604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2220      	movs	r2, #32
 800861a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e067      	b.n	80086fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d04f      	beq.n	80086dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864a:	d147      	bne.n	80086dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800866a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800867a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e6      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	613b      	str	r3, [r7, #16]
   return(result);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086a8:	623a      	str	r2, [r7, #32]
 80086aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	69f9      	ldr	r1, [r7, #28]
 80086ae:	6a3a      	ldr	r2, [r7, #32]
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e5      	bne.n	8008688 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e010      	b.n	80086fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69da      	ldr	r2, [r3, #28]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4013      	ands	r3, r2
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	f43f af4a 	beq.w	8008590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3770      	adds	r7, #112	; 0x70
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <fmodf>:
 8008708:	b508      	push	{r3, lr}
 800870a:	ed2d 8b02 	vpush	{d8}
 800870e:	eef0 8a40 	vmov.f32	s17, s0
 8008712:	eeb0 8a60 	vmov.f32	s16, s1
 8008716:	f000 f823 	bl	8008760 <__ieee754_fmodf>
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <fmodf+0x50>)
 800871c:	f993 3000 	ldrsb.w	r3, [r3]
 8008720:	3301      	adds	r3, #1
 8008722:	d016      	beq.n	8008752 <fmodf+0x4a>
 8008724:	eeb4 8a48 	vcmp.f32	s16, s16
 8008728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872c:	d611      	bvs.n	8008752 <fmodf+0x4a>
 800872e:	eef4 8a68 	vcmp.f32	s17, s17
 8008732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008736:	d60c      	bvs.n	8008752 <fmodf+0x4a>
 8008738:	eddf 8a08 	vldr	s17, [pc, #32]	; 800875c <fmodf+0x54>
 800873c:	eeb4 8a68 	vcmp.f32	s16, s17
 8008740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008744:	d105      	bne.n	8008752 <fmodf+0x4a>
 8008746:	f000 f88d 	bl	8008864 <__errno>
 800874a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800874e:	2321      	movs	r3, #33	; 0x21
 8008750:	6003      	str	r3, [r0, #0]
 8008752:	ecbd 8b02 	vpop	{d8}
 8008756:	bd08      	pop	{r3, pc}
 8008758:	20000009 	.word	0x20000009
 800875c:	00000000 	.word	0x00000000

08008760 <__ieee754_fmodf>:
 8008760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008762:	ee10 6a90 	vmov	r6, s1
 8008766:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800876a:	d009      	beq.n	8008780 <__ieee754_fmodf+0x20>
 800876c:	ee10 2a10 	vmov	r2, s0
 8008770:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008774:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008778:	da02      	bge.n	8008780 <__ieee754_fmodf+0x20>
 800877a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800877e:	dd04      	ble.n	800878a <__ieee754_fmodf+0x2a>
 8008780:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008784:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8008788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878a:	42ab      	cmp	r3, r5
 800878c:	dbfc      	blt.n	8008788 <__ieee754_fmodf+0x28>
 800878e:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8008792:	d106      	bne.n	80087a2 <__ieee754_fmodf+0x42>
 8008794:	4a32      	ldr	r2, [pc, #200]	; (8008860 <__ieee754_fmodf+0x100>)
 8008796:	0fe3      	lsrs	r3, r4, #31
 8008798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800879c:	ed93 0a00 	vldr	s0, [r3]
 80087a0:	e7f2      	b.n	8008788 <__ieee754_fmodf+0x28>
 80087a2:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80087a6:	d13f      	bne.n	8008828 <__ieee754_fmodf+0xc8>
 80087a8:	0219      	lsls	r1, r3, #8
 80087aa:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80087ae:	2900      	cmp	r1, #0
 80087b0:	dc37      	bgt.n	8008822 <__ieee754_fmodf+0xc2>
 80087b2:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80087b6:	d13d      	bne.n	8008834 <__ieee754_fmodf+0xd4>
 80087b8:	022f      	lsls	r7, r5, #8
 80087ba:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80087be:	2f00      	cmp	r7, #0
 80087c0:	da35      	bge.n	800882e <__ieee754_fmodf+0xce>
 80087c2:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80087c6:	bfbb      	ittet	lt
 80087c8:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80087cc:	1a12      	sublt	r2, r2, r0
 80087ce:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80087d2:	4093      	lsllt	r3, r2
 80087d4:	bfa8      	it	ge
 80087d6:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80087da:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80087de:	bfb5      	itete	lt
 80087e0:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80087e4:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80087e8:	1a52      	sublt	r2, r2, r1
 80087ea:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80087ee:	bfb8      	it	lt
 80087f0:	4095      	lsllt	r5, r2
 80087f2:	1a40      	subs	r0, r0, r1
 80087f4:	1b5a      	subs	r2, r3, r5
 80087f6:	bb00      	cbnz	r0, 800883a <__ieee754_fmodf+0xda>
 80087f8:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80087fc:	bf38      	it	cc
 80087fe:	4613      	movcc	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c7      	beq.n	8008794 <__ieee754_fmodf+0x34>
 8008804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008808:	db1f      	blt.n	800884a <__ieee754_fmodf+0xea>
 800880a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800880e:	db1f      	blt.n	8008850 <__ieee754_fmodf+0xf0>
 8008810:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008814:	317f      	adds	r1, #127	; 0x7f
 8008816:	4323      	orrs	r3, r4
 8008818:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800881c:	ee00 3a10 	vmov	s0, r3
 8008820:	e7b2      	b.n	8008788 <__ieee754_fmodf+0x28>
 8008822:	3801      	subs	r0, #1
 8008824:	0049      	lsls	r1, r1, #1
 8008826:	e7c2      	b.n	80087ae <__ieee754_fmodf+0x4e>
 8008828:	15d8      	asrs	r0, r3, #23
 800882a:	387f      	subs	r0, #127	; 0x7f
 800882c:	e7c1      	b.n	80087b2 <__ieee754_fmodf+0x52>
 800882e:	3901      	subs	r1, #1
 8008830:	007f      	lsls	r7, r7, #1
 8008832:	e7c4      	b.n	80087be <__ieee754_fmodf+0x5e>
 8008834:	15e9      	asrs	r1, r5, #23
 8008836:	397f      	subs	r1, #127	; 0x7f
 8008838:	e7c3      	b.n	80087c2 <__ieee754_fmodf+0x62>
 800883a:	2a00      	cmp	r2, #0
 800883c:	da02      	bge.n	8008844 <__ieee754_fmodf+0xe4>
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	3801      	subs	r0, #1
 8008842:	e7d7      	b.n	80087f4 <__ieee754_fmodf+0x94>
 8008844:	d0a6      	beq.n	8008794 <__ieee754_fmodf+0x34>
 8008846:	0053      	lsls	r3, r2, #1
 8008848:	e7fa      	b.n	8008840 <__ieee754_fmodf+0xe0>
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	3901      	subs	r1, #1
 800884e:	e7d9      	b.n	8008804 <__ieee754_fmodf+0xa4>
 8008850:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008854:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8008858:	3182      	adds	r1, #130	; 0x82
 800885a:	410b      	asrs	r3, r1
 800885c:	4323      	orrs	r3, r4
 800885e:	e7dd      	b.n	800881c <__ieee754_fmodf+0xbc>
 8008860:	08008918 	.word	0x08008918

08008864 <__errno>:
 8008864:	4b01      	ldr	r3, [pc, #4]	; (800886c <__errno+0x8>)
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	2000000c 	.word	0x2000000c

08008870 <__libc_init_array>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	4d0d      	ldr	r5, [pc, #52]	; (80088a8 <__libc_init_array+0x38>)
 8008874:	4c0d      	ldr	r4, [pc, #52]	; (80088ac <__libc_init_array+0x3c>)
 8008876:	1b64      	subs	r4, r4, r5
 8008878:	10a4      	asrs	r4, r4, #2
 800887a:	2600      	movs	r6, #0
 800887c:	42a6      	cmp	r6, r4
 800887e:	d109      	bne.n	8008894 <__libc_init_array+0x24>
 8008880:	4d0b      	ldr	r5, [pc, #44]	; (80088b0 <__libc_init_array+0x40>)
 8008882:	4c0c      	ldr	r4, [pc, #48]	; (80088b4 <__libc_init_array+0x44>)
 8008884:	f000 f820 	bl	80088c8 <_init>
 8008888:	1b64      	subs	r4, r4, r5
 800888a:	10a4      	asrs	r4, r4, #2
 800888c:	2600      	movs	r6, #0
 800888e:	42a6      	cmp	r6, r4
 8008890:	d105      	bne.n	800889e <__libc_init_array+0x2e>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	f855 3b04 	ldr.w	r3, [r5], #4
 8008898:	4798      	blx	r3
 800889a:	3601      	adds	r6, #1
 800889c:	e7ee      	b.n	800887c <__libc_init_array+0xc>
 800889e:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a2:	4798      	blx	r3
 80088a4:	3601      	adds	r6, #1
 80088a6:	e7f2      	b.n	800888e <__libc_init_array+0x1e>
 80088a8:	08008920 	.word	0x08008920
 80088ac:	08008920 	.word	0x08008920
 80088b0:	08008920 	.word	0x08008920
 80088b4:	08008924 	.word	0x08008924

080088b8 <memset>:
 80088b8:	4402      	add	r2, r0
 80088ba:	4603      	mov	r3, r0
 80088bc:	4293      	cmp	r3, r2
 80088be:	d100      	bne.n	80088c2 <memset+0xa>
 80088c0:	4770      	bx	lr
 80088c2:	f803 1b01 	strb.w	r1, [r3], #1
 80088c6:	e7f9      	b.n	80088bc <memset+0x4>

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
